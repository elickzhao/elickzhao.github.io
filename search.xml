<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[thinphp 循环嵌套if 不输出的问题]]></title>
      <url>http://elickzhao.github.io/2018/02/thinphp%20%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97if%20%E4%B8%8D%E8%BE%93%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这个以前应该是遇到过,不过很久不用都忘记了.这次就记录下吧.免得以后没处查去.</p>
<p>原因很简单 当双重循环 <strong>volist</strong> 的时候, 如果做两重循环的判断.<br>这是就不能用简写的 <code>$vo.id</code> 这种形式了 必须用数组的形式 <code>$vo[&#39;id&#39;]</code><br>这样就ok了</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"lay-search"</span> <span class="attr">name</span>=<span class="string">"cateid"</span> <span class="attr">id</span>=<span class="string">"cateid"</span> <span class="attr">lay-filter</span>=<span class="string">"cid_1"</span> <span class="attr">lay-search</span> <span class="attr">lay-verify</span>=<span class="string">"cateid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>&gt;</span>所有分类<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">volist</span> <span class="attr">name</span>=<span class="string">"cate_list"</span> <span class="attr">id</span>=<span class="string">"v"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">"$v.tid eq 1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"&#123;$v.name&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">volist</span> <span class="attr">name</span>=<span class="string">"cate_list"</span> <span class="attr">id</span>=<span class="string">"vo"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 注意这里 这里用的是数组形式 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">"$vo['tid'] == $v['id']"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;$vo.id&#125;"</span>&gt;</span>&#123;$vo.name&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">volist</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">volist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各个浏览器隐藏滚动条]]></title>
      <url>http://elickzhao.github.io/2018/02/%E5%90%84%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1%20/</url>
      <content type="html"><![CDATA[<p><strong>注意:</strong><br>html是可以替换成别的任何类名的<br>还有就是 火狐是只能隐藏 却不能滚动  剩下两个都可以<br>有的说这么写 <code>::-webkit-scrollbar{display:none}</code> 但是完全不好使<br>至于火狐滚动的问题 以后再想办法吧</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*隐藏滚动条，当IE下溢出，仍然可以滚动*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">-ms-overflow-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*火狐下隐藏滚动条*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">overflow</span><span class="selector-pseudo">:-moz-scrollbars-none</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*Chrome下隐藏滚动条，溢出可以透明滚动*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span><span class="selector-pseudo">::-webkit-scrollbar</span>&#123;<span class="attribute">width</span>:<span class="number">0px</span>&#125;</span></span><br><span class="line"><span class="undefined">    //也可以这么写</span></span><br><span class="line"><span class="css">    <span class="selector-pseudo">::-webkit-scrollbar</span>&#123;<span class="attribute">width</span>:<span class="number">0px</span>&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>http://elickzhao.github.io/2018/02/php%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6%20phpcs%20php-cs-fixer%20phpmd/</url>
      <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在用IDE开发的时候,验证php代码的错误和标准格式化.</p>
<p>这是遇到了几个插件.在用VSCode的时候安装了 <code>php-cs-fixer</code><br><code>composer global require friendsofphp/php-cs-fixer</code><br>这个配置很简单只要用 <code>composer</code> 安装  <code>php-cs-fixer</code>  然后配置 php.exe 的位置就可以使用了 </p>
<p>在使用 <code>sublime</code> 的时候 安装了 <code>phpcs</code> 和 <code>phpmd</code><br>安装也是用 <code>composer</code><br><code>composer global require &quot;squizlabs/php_codesniffer=*&quot;</code></p>
<p>这个配置(php code sniffer)就繁琐点了  配置如下</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Plugin settings</span><br><span class="line"></span><br><span class="line">    // Turn the debug output on/off</span><br><span class="line">    &quot;show_debug&quot;: false,</span><br><span class="line"></span><br><span class="line">    // Which file types (file extensions), do you want the plugin to</span><br><span class="line">    // execute for</span><br><span class="line">    &quot;extensions_to_execute&quot;: [&quot;php&quot;],</span><br><span class="line"></span><br><span class="line">    // Do we need to blacklist any sub extensions from extensions_to_execute</span><br><span class="line">    // An example would be [&quot;twig.php&quot;]</span><br><span class="line">    &quot;extensions_to_blacklist&quot;: [],</span><br><span class="line"></span><br><span class="line">    // Execute the sniffer on file save</span><br><span class="line">    &quot;phpcs_execute_on_save&quot;: true,</span><br><span class="line"></span><br><span class="line">    // Show the error list after save.</span><br><span class="line">    &quot;phpcs_show_errors_on_save&quot;: true,</span><br><span class="line"></span><br><span class="line">    // Show the errors in the gutter</span><br><span class="line">    &quot;phpcs_show_gutter_marks&quot;: true,</span><br><span class="line"></span><br><span class="line">    // Show outline for errors</span><br><span class="line">    &quot;phpcs_outline_for_errors&quot;: true,</span><br><span class="line"></span><br><span class="line">    // Show the errors in the status bar</span><br><span class="line">    &quot;phpcs_show_errors_in_status&quot;: true,</span><br><span class="line"></span><br><span class="line">    // Show the errors in the quick panel so you can then goto line</span><br><span class="line">    &quot;phpcs_show_quick_panel&quot;: true,</span><br><span class="line"></span><br><span class="line">    // The path to the php executable.</span><br><span class="line">    // Needed for windows, or anyone who doesn&apos;t/can&apos;t make phars</span><br><span class="line">    // executable. Avoid setting this if at all possible</span><br><span class="line">    &quot;phpcs_php_prefix_path&quot;: &quot;F:\\phpStudy\\php\\php-7.1.12-nts\\php.exe&quot;,</span><br><span class="line"></span><br><span class="line">    // Options include:</span><br><span class="line">    // - Sniffer</span><br><span class="line">    // - Fixer</span><br><span class="line">    // - MessDetector</span><br><span class="line">    // - CodeBeautifier</span><br><span class="line">    //</span><br><span class="line">    // This will prepend the application with the path to php</span><br><span class="line">    // Needed for windows, or anyone who doesn&apos;t/can&apos;t make phars</span><br><span class="line">    // executable. Avoid setting this if at all possible</span><br><span class="line">    &quot;phpcs_commands_to_php_prefix&quot;: [],</span><br><span class="line"></span><br><span class="line">    // What color to stylise the icon</span><br><span class="line">    // https://www.sublimetext.com/docs/3/api_reference.html#sublime.View</span><br><span class="line">    // add_regions</span><br><span class="line">    &quot;phpcs_icon_scope_color&quot;: &quot;comment&quot;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // PHP_CodeSniffer settings</span><br><span class="line"></span><br><span class="line">    // Do you want to run the phpcs checker?</span><br><span class="line">    &quot;phpcs_sniffer_run&quot;: true,</span><br><span class="line"></span><br><span class="line">    // Execute the sniffer on file save</span><br><span class="line">    &quot;phpcs_command_on_save&quot;: true,</span><br><span class="line"></span><br><span class="line">    // It seems python/sublime cannot always find the phpcs application</span><br><span class="line">    // If empty, then use PATH version of phpcs, else use the set value</span><br><span class="line">    &quot;phpcs_executable_path&quot;: &quot;C:\\Users\\elick\\AppData\\Roaming\\Composer\\vendor\\bin\\phpcs.bat&quot;,</span><br><span class="line"></span><br><span class="line">    // Additional arguments you can specify into the application</span><br><span class="line">    //</span><br><span class="line">    // Example:</span><br><span class="line">    // &#123;</span><br><span class="line">    //     &quot;--standard&quot;: &quot;PEAR&quot;,</span><br><span class="line">    //     &quot;-n&quot;</span><br><span class="line">    // &#125;</span><br><span class="line">    &quot;phpcs_additional_args&quot;: &#123;</span><br><span class="line">        &quot;--standard&quot;: &quot;PSR2&quot;,</span><br><span class="line">        &quot;-n&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // PHP-CS-Fixer settings</span><br><span class="line"></span><br><span class="line">    // Fix the issues on save</span><br><span class="line">    &quot;php_cs_fixer_on_save&quot;: false,</span><br><span class="line"></span><br><span class="line">    // Show the quick panel</span><br><span class="line">    &quot;php_cs_fixer_show_quick_panel&quot;: false,</span><br><span class="line"></span><br><span class="line">    // Path to where you have the php-cs-fixer installed</span><br><span class="line">    &quot;php_cs_fixer_executable_path&quot;: &quot;C:\\Users\\elick\\AppData\\Roaming\\Composer\\vendor\\bin\\php-cs-fixer.bat&quot;,</span><br><span class="line"></span><br><span class="line">    // Additional arguments you can specify into the application</span><br><span class="line">    &quot;php_cs_fixer_additional_args&quot;: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // phpcbf settings</span><br><span class="line"></span><br><span class="line">    // Fix the issues on save</span><br><span class="line">    &quot;phpcbf_on_save&quot;: false,</span><br><span class="line"></span><br><span class="line">    // Show the quick panel</span><br><span class="line">    &quot;phpcbf_show_quick_panel&quot;: false,</span><br><span class="line"></span><br><span class="line">    // Path to where you have the phpcbf installed</span><br><span class="line">    &quot;phpcbf_executable_path&quot;: &quot;&quot;phpcbf_executable_path&quot;: &quot;C:\\Users\\elick\\AppData\\Roaming\\Composer\\vendor\\bin\phpcbf.bat&quot;,</span><br><span class="line"></span><br><span class="line">    // Additional arguments you can specify into the application</span><br><span class="line">    //</span><br><span class="line">    // Example:</span><br><span class="line">    // &#123;</span><br><span class="line">    //     &quot;--level&quot;: &quot;all&quot;</span><br><span class="line">    // &#125;</span><br><span class="line">    &quot;phpcbf_additional_args&quot;: &#123;</span><br><span class="line">        &quot;--standard&quot;: &quot;PSR2&quot;,</span><br><span class="line">        &quot;-n&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // PHP Linter settings</span><br><span class="line"></span><br><span class="line">    // Are we going to run php -l over the file?</span><br><span class="line">    &quot;phpcs_linter_run&quot;: true,</span><br><span class="line"></span><br><span class="line">    // Execute the linter on file save</span><br><span class="line">    &quot;phpcs_linter_command_on_save&quot;: true,</span><br><span class="line"></span><br><span class="line">    // It seems python/sublime cannot always find the php application</span><br><span class="line">    // If empty, then use PATH version of php, else use the set value</span><br><span class="line">    &quot;phpcs_php_path&quot;: &quot;F:\\phpStudy\\php\\php-7.1.12-nts\\php.exe&quot;,</span><br><span class="line"></span><br><span class="line">    // What is the regex for the linter? Has to provide a named match for &apos;message&apos; and &apos;line&apos;</span><br><span class="line">    &quot;phpcs_linter_regex&quot;: &quot;(?P&lt;message&gt;.*) on line (?P&lt;line&gt;\\d+)&quot;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // PHP Mess Detector settings</span><br><span class="line"></span><br><span class="line">    // Execute phpmd</span><br><span class="line">    &quot;phpmd_run&quot;: false,</span><br><span class="line"></span><br><span class="line">    // Execute the phpmd on file save</span><br><span class="line">    &quot;phpmd_command_on_save&quot;: true,</span><br><span class="line"></span><br><span class="line">    // It seems python/sublime cannot always find the phpmd application</span><br><span class="line">    // If empty, then use PATH version of phpmd, else use the set value</span><br><span class="line">    &quot;phpmd_executable_path&quot;: &quot;C:\\Users\\elick\\AppData\\Roaming\\Composer\\vendor\\bin\\phpmd.bat&quot;,</span><br><span class="line"></span><br><span class="line">    // Additional arguments you can specify into the application</span><br><span class="line">    //</span><br><span class="line">    // Example:</span><br><span class="line">    // &#123;</span><br><span class="line">    //     &quot;codesize,unusedcode&quot;</span><br><span class="line">    // &#125;</span><br><span class="line">    &quot;phpmd_additional_args&quot;: &#123;</span><br><span class="line">        &quot;codesize,unusedcode,naming&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // PHP Scheck settings</span><br><span class="line"></span><br><span class="line">    // Execute scheck</span><br><span class="line">    &quot;scheck_run&quot;: false,</span><br><span class="line"></span><br><span class="line">    // Execute the scheck on file save</span><br><span class="line">    &quot;scheck_command_on_save&quot;: false,</span><br><span class="line"></span><br><span class="line">    // It seems python/sublime cannot always find the scheck application</span><br><span class="line">    // If empty, then use PATH version of scheck, else use the set value</span><br><span class="line">    &quot;scheck_executable_path&quot;: &quot;&quot;,</span><br><span class="line"></span><br><span class="line">    // Additional arguments you can specify into the application</span><br><span class="line">    //</span><br><span class="line">    //Example:</span><br><span class="line">    //&#123;</span><br><span class="line">    //  &quot;-php_stdlib&quot; : &quot;/path/to/pfff&quot;,</span><br><span class="line">    //  &quot;-strict&quot; : &quot;&quot;</span><br><span class="line">    //&#125;</span><br><span class="line">    &quot;scheck_additional_args&quot;: &#123;</span><br><span class="line">        &quot;-strict&quot; : &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>说一下 <code>phpcs</code> <code>php-cs-fixer</code> <code>phpmd</code> 都是干什么用的</p>
<p><strong>phpcs :</strong>该包的作用是用指定的代码规范（默认使用PEAR规范，可指定使用PSR1，PSR2或自己制定的规范）来检查代码是否符合规范</p>
<p><strong>phpcbf :</strong> phpcs自带了PHP Code Beautifier（phpcbf）用来修复不规范的代码 等同于 <code>php-cs-fixer</code></p>
<p><strong>php-cs-fixer :</strong> 修复不规范代码 作用等同于 <code>phpcbf</code> 只不过规则好像稍有区别</p>
<p><strong>phpmd :</strong>  提示潜在的BUG, 有待改进的代码（比如过短变量名长度等）, 过于复杂的表达式, 定义但未使用的变量、方法、属性）, 使用未定义的变量</p>
<p><strong>sublime-phpcs :</strong> sublime-phpcs 插件中各种功能（错误提示，代码格式化) 提供了把这些功能包在sublime中使用的界面。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/cyaspnet/article/details/51773331" target="_blank" rel="noopener">PHP代码规范与质量检查工具PHPCS,PHPMD的安装与配置</a><br><a href="http://blog.csdn.net/he426100/article/details/76573038" target="_blank" rel="noopener">sublime安装PHPcs（PHPcodesniffer）代码规范提示插件</a><br><a href="http://www.uedbox.com/macos-install-sublime-phpcs/" target="_blank" rel="noopener">MacOS Sublime Text 3 安装使用 sublime-phpcs 插件指南</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[layui表单验证 自定义验证 select验证方法]]></title>
      <url>http://elickzhao.github.io/2018/02/layui%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%20%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%20select%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>这个东西还真是浪费了不少时间,网上一些文章写的吧 不知道是原来版本那么做 还是以讹传讹 反正都不太好用<br>只能大致参考下  好了 进入整体</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  注意这里 lay-filter 是监听时 或者其他操作时用的 选取用的字段 类似jq的 $('#id')--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  注意这里 lay-verify 是你自定义的验证规则名称 这个是必须 如果是简单验证 就写上预设值 就好了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">lay-filter</span>=<span class="string">"city"</span> <span class="attr">lay-verify</span>=<span class="string">"city-verify"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"010"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"021"</span> <span class="attr">disabled</span>&gt;</span>上海（禁用效果）<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0571"</span> <span class="attr">selected</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以是submit提交按钮 也可以是普通按钮 但是呢 必须加上 lay-submit lay-filter="*" 其中 lay-submit 也是不可少的  要不就检测不到提交事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">lay-submit</span> <span class="attr">lay-filter</span>=<span class="string">"*"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//第一步 写自定义规则</span></span></span><br><span class="line"><span class="undefined">form.verify(&#123;</span></span><br><span class="line"><span class="javascript">    cateid: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (value == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">"必须选择一级栏目"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    contact: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (value.length &lt; <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">'内容请输入至少4个字符'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    phone: [<span class="regexp">/^1[3|4|5|7|8]\d&#123;9&#125;$/</span>, <span class="string">'手机必须11位，只能是数字！'</span>],</span></span><br><span class="line"><span class="javascript">    email: [<span class="regexp">/^[a-z0-9._%-]+@([a-z0-9-]+\.)+[a-z]&#123;2,4&#125;$|^1[3|4|5|7|8]\d&#123;9&#125;$/</span>, <span class="string">'邮箱格式不对'</span>]</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//第二部 提交监听事件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//只有这样 验证才会执行  submit(*) 就是提交按钮的 lay-filter="*" 这个可以自行更改</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//其实回调函数 只是有其他操作要做的时候用的 如果只是验证的话 第二个参数可以不写</span></span></span><br><span class="line"><span class="javascript">form.on(<span class="string">'submit(*)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    params = data.field;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//alert(JSON.stringify(params))</span></span></span><br><span class="line"><span class="javascript">    submit($, params);  <span class="comment">//这个是提交按钮 当验证通过后就提交</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">//其实可以直接这么用</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//form.on('submit(*)');</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<p><strong>唠叨几句</strong></p>
<p>原本没打算用 <strong>layui</strong> 的验证,原本是用 <strong>jquery.validate</strong> ,可是因为 <strong>layui</strong> 改变了select外观<br>所以根本检测不到. 这里顺便把 <strong>jquery.validate</strong> 也简单说一下吧</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#commentForm"</span>).validate(&#123;</span><br><span class="line">        rules: &#123;    <span class="comment">//这一定不要忘记 有个 rules 对象 而不是把验证规则直接放里</span></span><br><span class="line">            name: &#123;</span><br><span class="line">                minlength: <span class="string">"2"</span>,</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            cateid: &#123;</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            cid: &#123;</span><br><span class="line">                required: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onkeyup: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//focusCleanup:true //当错误元素,获得焦点时,就把错误提示去掉.这个不太好,应该是失去焦点在去掉</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.zybuluo.com/mdeditor#1038324" target="_blank" rel="noopener">文本框，手机，邮箱，textarea等格式的验证</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SyntaxError-> Unexpected token "{" 注意chrome插件]]></title>
      <url>http://elickzhao.github.io/2018/02/SyntaxError%20Unexpected%20token%20%E6%B3%A8%E6%84%8Fchrome%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>今天遇到个奇葩问题,有个<code>js</code>报错 结果出现位置居然在 <code>&lt;!DOCTYPE HTML&gt;</code> 这里.</p>
<p>真是凌乱了.找了半天,把整个页面都删除了,还是报错了. 感觉可能并不是自己的问题.</p>
<p>拿出火狐再看页面就没有错了. 后来发现居然是chrome的错 而且莫名的今天就坏了 前两天都没问题啊</p>
<p>可能他们这个插件更新 然后浏览器 自己就更新吧 总之就是插件的问题 </p>
<p>把文件名扔到百度 根本查不出是啥 幸好眼尖发现了 logo  一看知道是啥插件  删掉后问题解决</p>
<p>其实就是没经验 英语差 <code>chrome-extension</code> 一看就应该知道是 插件的问题</p>
<p><code>lcbgjpbhnnjajgjlpdemhadfceacidme</code> 这就是那个插件名 就是该死的 夜间模式</p>
<p>当然这次是这个出问题了 下次有可能是别的 因为在论坛里看到 有人说 有道词典 有这个问题.</p>
<p>所以注意下 以后遇到就看看是那个插件吧 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span> <span class="keyword">in</span> event handler <span class="keyword">for</span> (unknown): <span class="built_in">SyntaxError</span>: Unexpected token &#123;</span><br><span class="line">    at <span class="built_in">eval</span> (<span class="built_in">eval</span> at Updater.check (chrome-extension:<span class="comment">//lcbgjpbhnnjajgjlpdemhadfceacidme/js/gmWrapper.js:4:3244), &lt;anonymous&gt;:1:327)</span></span><br><span class="line">    at Updater.check (chrome-extension:<span class="comment">//lcbgjpbhnnjajgjlpdemhadfceacidme/js/gmWrapper.js:4:3244)</span></span><br><span class="line">    at init (chrome-extension:<span class="comment">//lcbgjpbhnnjajgjlpdemhadfceacidme/js/jquery-1.7.2.js:1:3311)</span></span><br><span class="line">    at onReadyGM (chrome-extension:<span class="comment">//lcbgjpbhnnjajgjlpdemhadfceacidme/js/jquery-1.7.2.js:1:76)</span></span><br><span class="line">    at <span class="built_in">Object</span>.onInitializedGM (chrome-extension:<span class="comment">//lcbgjpbhnnjajgjlpdemhadfceacidme/js/gmWrapper.js:4:636)</span></span><br><span class="line">    at <span class="built_in">Object</span>.callbackResponse (chrome-extension:<span class="comment">//lcbgjpbhnnjajgjlpdemhadfceacidme/js/gmWrapper.js:4:331)</span></span><br><span class="line">    at chrome-extension:<span class="comment">//lcbgjpbhnnjajgjlpdemhadfceacidme/js/gmWrapper.js:4:3378</span></span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery 滚动到指定元素位置]]></title>
      <url>http://elickzhao.github.io/2018/02/jquery%20%E6%BB%9A%E5%8A%A8%E5%88%B0%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>今天做表单验证,验证后想要跳到错误位置.原本打算用 <strong>focus()</strong> 可是用了 <strong>layui</strong> 根本定位不到<br>这也是 <strong>layui</strong> 一个很大的弊端.  于是想到根据元素来跳转.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'html, body'</span>).scrollTop(<span class="number">100</span>);  <span class="comment">//跳到指定位置   前面的参数也可以是id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动画跳转</span></span><br><span class="line">$(<span class="string">'html, body'</span>).animate(&#123;</span><br><span class="line">    scrollTop: $(<span class="string">"#comment2"</span>).offset().top</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>但是我这个用不了动画跳转,可能是因为 <strong>iframe</strong> 的原因,高度总是不对.所以直接用了指定位置.<br>而不是根据元素来跳转.</p>
<iframe width="100%" height="450" src="http://code.hcharts.cn/blog-demo/rJFXza/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[layui的 select组件二级联动]]></title>
      <url>http://elickzhao.github.io/2018/02/layui%E7%9A%84%20select%E7%BB%84%E4%BB%B6%E4%BA%8C%E7%BA%A7%E8%81%94%E5%8A%A8/</url>
      <content type="html"><![CDATA[<p><strong>我自己的 因为和h-ui合用 所以有点问题 一些网上的写法不奏效</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = layui.form;</span><br><span class="line">form.on(<span class="string">'select(cid_1)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cateid = $(<span class="string">'#cateid'</span>).val();</span><br><span class="line">    $(<span class="string">"cid"</span>).val(cateid); </span><br><span class="line">    $.post(<span class="string">'&#123;:U("getcid")&#125;'</span>, &#123;</span><br><span class="line">        cateid: cateid,</span><br><span class="line">        <span class="keyword">async</span> :<span class="literal">false</span>,</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.catelist != <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> htmls = <span class="string">'&lt;option value=""&gt;二级分类&lt;/option&gt;'</span>;</span><br><span class="line">            <span class="keyword">var</span> cate = data.catelist;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cate.length; i++) &#123;</span><br><span class="line">                htmls += <span class="string">'&lt;option value="'</span> + cate[i].id + <span class="string">'"&gt;-- '</span> + cate[i].name + <span class="string">'&lt;/option&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">'#cid'</span>).html(htmls);</span><br><span class="line">            $(<span class="string">'#catedesc'</span>).html(<span class="string">'&amp;nbsp;&amp;nbsp; * 必选项'</span>);</span><br><span class="line">            form.render();  <span class="comment">//这里只有这么写才可以 看来某些东西冲突了</span></span><br><span class="line">            <span class="comment">//form.render();// form.render('select', 'cid_2');  //其他渲染方式都无法渲染出内容来 虽然 select 里已经有东西了</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">'#cid'</span>).html(<span class="string">'&lt;option value=""&gt;二级分类&lt;/option&gt;'</span>);</span><br><span class="line">            $(<span class="string">'#catedesc'</span>).html(<span class="string">'&amp;nbsp;&amp;nbsp; * 该分类下还没有二级分类，请先添加'</span>);</span><br><span class="line">            form.render();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"json"</span>);</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>这是别人比较简洁的写法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下拉框  </span></span><br><span class="line"><span class="keyword">var</span> form = layui.form();  </span><br><span class="line"><span class="comment">//lay-filter="mch_id" 的值。 select()里的参数就是这个  lay-filter是放在select里的一个属性</span></span><br><span class="line">form.on(<span class="string">'select(mch_id)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> mch_id = data.value;  </span><br><span class="line">    $.ajax(&#123;  </span><br><span class="line">        type:<span class="string">"POST"</span>,  </span><br><span class="line">        url:<span class="string">"&#123;:url('get_store')&#125;"</span>,  </span><br><span class="line">        dataType:<span class="string">"json"</span>,  </span><br><span class="line">        data:&#123;<span class="string">'mch_id'</span>:mch_id&#125;,  </span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;  </span><br><span class="line">            <span class="comment">//empty() 方法从被选元素移除所有内容  </span></span><br><span class="line">            $(<span class="string">"select[name='store_id']"</span>).empty();  </span><br><span class="line">            <span class="keyword">var</span> html = <span class="string">"&lt;option value='0'&gt;请选择所属门店&lt;/option&gt;"</span>;  </span><br><span class="line">            $(e).each(<span class="function"><span class="keyword">function</span> (<span class="params">v, k</span>) </span>&#123;  </span><br><span class="line">                html += <span class="string">"&lt;option value='"</span> + k.id + <span class="string">"'&gt;"</span> + k.username + <span class="string">"&lt;/option&gt;"</span>;  </span><br><span class="line">            &#125;);  </span><br><span class="line">            <span class="comment">//把遍历的数据放到select表里面  </span></span><br><span class="line">            $(<span class="string">"select[name='store_id']"</span>).append(html);  </span><br><span class="line">            <span class="comment">//从新刷新了一下下拉框  </span></span><br><span class="line">            form.render(<span class="string">'select'</span>);      <span class="comment">//重新渲染</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://fly.layui.com/jie/4875/" target="_blank" rel="noopener">基于 Layui form 组件的省市区级联的实现</a><br><a href="http://blog.csdn.net/weixin_39973810/article/details/78852130" target="_blank" rel="noopener">tp5与layui框架实现二级联动加分页效果</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css文件报错Uncaught SyntaxError Unexpected token]]></title>
      <url>http://elickzhao.github.io/2018/01/css%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99Uncaught%20SyntaxError/</url>
      <content type="html"><![CDATA[<p><strong>有时图省事 直接复制改写就会出现这个问题 所以要注意</strong></p>
<p>错误原因：<br>错误代码<script src="${ctxStatic}/app/common/css/dropload.css"></script><br>改成</p>
<p><link rel="stylesheet" href="${ctxStatic}/app/common/css/dropload.css"><br>复制粘贴害人不浅啊T_T</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/sunranword/article/details/78892562" target="_blank" rel="noopener">css文件报错Uncaught SyntaxError: Unexpected token .</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Echarts 多表根据窗口大小自动缩放]]></title>
      <url>http://elickzhao.github.io/2018/01/Echarts%20%E5%A4%9A%E8%A1%A8%E6%A0%B9%E6%8D%AE%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F%E8%87%AA%E5%8A%A8%E7%BC%A9%E6%94%BE/</url>
      <content type="html"><![CDATA[<p>当只有一个图表的时候很简单只要这么写就搞定了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onresize = orderCharts.myChart.resize;</span><br></pre></td></tr></table></figure>
<p>当多个图表的时候,就会出现只有一个图表能自动缩放,这时就要这么写了.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    orderCharts.myChart.resize(); <span class="comment">//图表自适应窗口大小</span></span><br><span class="line">    userCharts.myChart.resize(); <span class="comment">//图表自适应窗口大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样写就ok了 下面这个写法也是等效的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(orderCharts);</span><br><span class="line">    orderCharts.myChart.resize(); <span class="comment">//图表自适应窗口大小</span></span><br><span class="line">    userCharts.myChart.resize(); <span class="comment">//图表自适应窗口大小</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong><br>当一个图标的时候 <code>resize</code>是没有括号的, 而多个图标的时候是有括号的. 这个要小心,他们不能互换着用.用时一定要仔细.</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> Echarts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery 获取onclick() 当前点击对象]]></title>
      <url>http://elickzhao.github.io/2018/01/jquery%20%E8%8E%B7%E5%8F%96onclick()%20%E5%BD%93%E5%89%8D%E7%82%B9%E5%87%BB%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>必须传入this. <strong>而且在方法内使用时 记住不能用this</strong><br>这样就可以使用<code>$</code>获取当前对象了</p>
<p>```js<br><span class="btn btn-primary radius" onclick="t(this)">今日</span> </p>
<p>function t(obj) {<br>    changeGroupBtn(obj);<br>    option.xAxis.data = dayArray;<br>    option.series[0].data = getDate(getUrl, ‘today’);<br>    myChart.setOption(option);<br>}</p>
<p>/<em>=============================================<br>=            按钮组切换按钮                    =<br>=============================================</em>/<br>function changeGroupBtn(obj) {<br>    $(obj).siblings().removeClass(“btn-primary”).addClass(“btn-default”);   //同胞元素<br>    $(obj).removeClass(“btn-default”).addClass(“btn-primary”);<br>}<br>/<em>=====  End of 按钮组切换按钮  ======</em>/</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/catherian/article/details/53906978" target="_blank" rel="noopener">onclick中，获取不了$(this)</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过ajax给js成员变量赋值问题]]></title>
      <url>http://elickzhao.github.io/2018/01/%E9%80%9A%E8%BF%87ajax%E7%BB%99js%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">'GET'</span>,</span><br><span class="line">        <span class="keyword">async</span> :<span class="literal">false</span>,<span class="comment">//取消异步 否则result赋值失败 </span></span><br><span class="line">        url: <span class="string">'/index.php/Admin/Page/orderChartsData.html'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log(res);</span></span><br><span class="line">            result = res;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/u014225431/article/details/51451498" target="_blank" rel="noopener">通过ajax给js成员变量赋值问题</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[THINKPHP 清空数据缓存方法]]></title>
      <url>http://elickzhao.github.io/2018/01/THINKPHP%20%E6%B8%85%E7%A9%BA%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$cache = <span class="keyword">new</span> \Think\Cache;</span><br><span class="line"><span class="comment">//第一个参数为 缓存类型 这里是从配置里读取  第二个参数为清理的文件夹 因为默认清理的是 Temp 这里修改成Cache</span></span><br><span class="line"><span class="keyword">echo</span> $cache-&gt;getInstance(C(<span class="string">'DATA_CACHE_TYPE'</span>), [<span class="string">'temp'</span>=&gt;CACHE_PATH])-&gt;clear();</span><br><span class="line"><span class="comment">//如果是清理Temp 直接不用参数就可以用了 不用这么麻烦</span></span><br><span class="line"><span class="comment">//$cache-&gt;getInstance()-&gt;clear();</span></span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/chenzhuyu/article/details/51713966" target="_blank" rel="noopener">THINKPHP 清空数据缓存方法</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[momentjs 自己使用例子]]></title>
      <url>http://elickzhao.github.io/2018/01/momentjs%20%E8%87%AA%E5%B7%B1%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>下面例子是我用到的一些方法,其他的看文档吧 全的很<br>这里主要说下怎么使用中文显示<br>按下面引入 而且顺序不能变 还有就是注意moment引入的js 不是原版那个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//cdn.bootcss.com/moment.js/2.20.1/moment-with-locales.min.js</span></span><br><span class="line">https:<span class="comment">//cdn.bootcss.com/moment.js/2.20.1/locale/zh-cn.js</span></span><br></pre></td></tr></table></figure></p>
<p>//这是例子</p>
<iframe width="100%" height="450" src="http://code.hcharts.cn/test123/S9Z6a7/share/result,js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p><a href="http://momentjs.cn/" target="_blank" rel="noopener">momentjs中文网</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于微信退款出现错误代码 52的解决方法]]></title>
      <url>http://elickzhao.github.io/2018/01/%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E9%80%80%E6%AC%BE%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%2052%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<pre><code>在做微信支付的过程中，微信支付可以实现，然后微信退款总是出现错误代码:52。最后发现证书路径为相对路径。 解决方法：扎到文件Wxpay.api.php。在该文件中找到 “postXmlCurl”这个方法，然后将证书路径修改为绝对路径即可。 
</code></pre><p>下面说明修改内容：<br>将证书路径替换为绝对路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//使用证书：cert 与 key 分别属于两个.pem文件   </span><br><span class="line">curl_setopt($ch, CURLOPT_SSLCERT, WxPayConfig::SSLCERT_PATH);   </span><br><span class="line">curl_setopt($ch, CURLOPT_SSLKEY, WxPayConfig::SSLKEY_PATH);</span><br></pre></td></tr></table></figure>
<p>修改为(这里的代码指的是PHP代码，如果是其他语言请进行相应的修改)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl_setopt($ch,CURLOPT_SSLCERT, dirname(__FILE__).&apos;/&apos;.WxPayConfig::SSLCERT_PATH);  </span><br><span class="line">  </span><br><span class="line">curl_setopt($ch,CURLOPT_SSLKEY, dirname(__FILE__).&apos;/&apos;.WxPayConfig::SSLKEY_PATH);</span><br></pre></td></tr></table></figure>
<p>用的是 <strong>WeiXinpay</strong> 这个插件 修改的文件是 <strong>lib/WxPay.Api.php</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序地图API使用]]></title>
      <url>http://elickzhao.github.io/2018/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9C%B0%E5%9B%BEAPI%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>这次用的比较简单,因为企业名片的项目.需要地图显示标点.<br>这里只用到了 <code>wx.openLocation</code> 其他几个API也比较简单<br>这里这个会直接打开坐标点,并会标注名车和地址 还会有导航去这里.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getlocation: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  wx.openLocation(&#123;</span><br><span class="line">    latitude: that.data.latitude,     <span class="comment">//经度</span></span><br><span class="line">    longitude: that.data.longitude,   <span class="comment">//纬度</span></span><br><span class="line">    name: that.data.name,</span><br><span class="line">    address: that.data.address,</span><br><span class="line">    scale: <span class="number">28</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/qq_31383345/article/details/53080503" target="_blank" rel="noopener">微信小程序开发之真机测试 地图定位 map API 无法获取当前位置的问题</a><br><a href="http://blog.csdn.net/crazy1235/article/details/55004841" target="_blank" rel="noopener">微信小程序之地图功能</a><br><a href="https://github.com/baidumapapi/wxapp-jsapi" target="_blank" rel="noopener">百度地图微信小程序JavaScript API v1.0</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在改写H-UI.admin所用到的插件]]></title>
      <url>http://elickzhao.github.io/2018/01/%E5%9C%A8%E6%94%B9%E5%86%99H-UI.admin%E6%89%80%E7%94%A8%E5%88%B0%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">插件名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://mishengqiang.com/sweetalert/" target="_blank" rel="noopener">sweetAlert</a></td>
<td>Alert 美化插件</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/sweetalert2/sweetalert2" target="_blank" rel="noopener">sweetAlert2</a></td>
<td>这是2代 效果更华丽些</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://layer.layui.com/" target="_blank" rel="noopener">layer</a></td>
<td>弹出框 这个和上面的 alert其实效果是差不多的</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://aui.github.io/artDialog/" target="_blank" rel="noopener">artDialog</a></td>
<td>这个是我好久以前就知道的,都忘记了 居然今天又看到了</td>
</tr>
<tr>
<td style="text-align:center"><a href="">tipDialog</a></td>
<td>这个居然不知道 原作者在哪里找到的 网上搜不到 也许自己写的?</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.jq22.com/yanshi8850" target="_blank" rel="noopener">Simple Switch</a></td>
<td>Simple Switch一个简单的开关 样子很好看适合用在pc端</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.bootcss.com/p/bootstrap-switch/" target="_blank" rel="noopener">bootstrapSwitch</a></td>
<td>另一个开关 样子和bootstrap比较统一</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://jquerytimer.com/" target="_blank" rel="noopener">jQuery Timers</a></td>
<td>jquery的一个定时器 这里有个<a href="http://www.jq22.com/jquery-info148" target="_blank" rel="noopener">简介事例</a>这个中文的比较清楚</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql查找固定时间端数据 本周 上周...]]></title>
      <url>http://elickzhao.github.io/2018/01/mysql%E6%9F%A5%E6%89%BE%E5%9B%BA%E5%AE%9A%E6%97%B6%E9%97%B4%E7%AB%AF%E6%95%B0%E6%8D%AE%20%E6%9C%AC%E5%91%A8%20%E4%B8%8A%E5%91%A8/</url>
      <content type="html"><![CDATA[<p>mysql有很多关于时间截取的方法,不过呢数据格式必须date形式的,不过我现在用的int保存时间戳的方式.<br>以前记得好像date形式有什么缺点 现在给忘记了 以后遇到再记录下吧.</p>
<p>函数类似这种 这次是没法测试 以后数据库可以参考下 好像这种更优化一些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 5 DAY) AS SubtractDate FROM Orders</span><br></pre></td></tr></table></figure></p>
<p><a href="https://www.w3cschool.cn/mysql/func-date-sub.html" target="_blank" rel="noopener">MySQL DATE_SUB() 函数</a><br><a href="http://blog.csdn.net/wocjj/article/details/7415253" target="_blank" rel="noopener">mysql获取昨天的时间</a><br><a href="http://www.thinkphp.cn/topic/47049.html" target="_blank" rel="noopener">MySQL查询本周、上周、本月、上个月份数据的sql代码</a></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECharts x坐标系使用 time 形式]]></title>
      <url>http://elickzhao.github.io/2018/01/ECharts%20x%E5%9D%90%E6%A0%87%E7%B3%BB%E4%BD%BF%E7%94%A8%20time%20%E5%BD%A2%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>xAxis.type string<br>[ default: ‘category’ ]<br>坐标轴类型。<br>可选：<br>‘value’ 数值轴，适用于连续数据。<br>‘category’ 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。<br>‘time’ 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。<br>‘log’ 对数轴。适用于对数数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一般情况都会使用`category` 因为比较简单 直接传入数据就能用</span><br><span class="line">**例如这样**</span><br></pre></td></tr></table></figure></p>
<p>option = {<br>    title: {<br>        text: ‘未来一周气温变化’,<br>        subtext: ‘纯属虚构’<br>    },<br>    tooltip: {<br>        trigger: ‘axis’<br>    },<br>    toolbox: {<br>        show: true,<br>        feature: {<br>            dataZoom: {<br>                yAxisIndex: ‘none’<br>            },<br>            dataView: {readOnly: false},<br>            magicType: {type: [‘line’, ‘bar’]},<br>            restore: {},<br>            saveAsImage: {}<br>        }<br>    },<br>    xAxis:  {<br>        type: ‘category’,<br>        boundaryGap: false,<br>        data: [‘周一’,’周二’,’周三’,’周四’,’周五’,’周六’,’周日’]<br>    },<br>    yAxis: {<br>        type: ‘value’,<br>        axisLabel: {<br>            formatter: ‘{value} °C’<br>        }<br>    },<br>    series: [<br>        {<br>            name:’最高气温’,<br>            type:’line’,<br>            data:[11, 11, 15, 13, 12, 13, 10],<br>            markPoint: {<br>                data: [<br>                    {type: ‘max’, name: ‘最大值’},<br>                    {type: ‘min’, name: ‘最小值’}<br>                ]<br>            },<br>            markLine: {<br>                data: [<br>                    {type: ‘average’, name: ‘平均值’}<br>                ]<br>            }<br>        }<br>    ]<br>};</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">但是time呢 他的文档里没有说的特别清楚 这里给出个例子</span><br><span class="line">传入的数据必须带一个时间的item 而且好像光是日期还不行 必须是完整的</span><br><span class="line">还有就是必须是value字段 好像是这个样子</span><br><span class="line">```js</span><br><span class="line">var data = [</span><br><span class="line">    &#123;value:[&apos;2016/12/18 6:38:08&apos;, 80]&#125;,</span><br><span class="line">    &#123;value:[&apos;2016/12/18 16:18:18&apos;, 60]&#125;,</span><br><span class="line">    &#123;value:[&apos;2016/12/18 19:18:18&apos;, 90]&#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: &apos;未来一周气温变化&apos;,</span><br><span class="line">        subtext: &apos;纯属虚构&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: &apos;axis&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        show: true,</span><br><span class="line">        feature: &#123;</span><br><span class="line">            dataZoom: &#123;</span><br><span class="line">                yAxisIndex: &apos;none&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            dataView: &#123;readOnly: false&#125;,</span><br><span class="line">            magicType: &#123;type: [&apos;line&apos;, &apos;bar&apos;]&#125;,</span><br><span class="line">            restore: &#123;&#125;,</span><br><span class="line">            saveAsImage: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis:  &#123;</span><br><span class="line">        type: &apos;time&apos;,</span><br><span class="line">        boundaryGap: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: &apos;value&apos;,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">            formatter: &apos;&#123;value&#125; °C&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name:&apos;最高气温&apos;,</span><br><span class="line">            type:&apos;line&apos;,</span><br><span class="line">            data:data,</span><br><span class="line">            markPoint: &#123;</span><br><span class="line">                data: [</span><br><span class="line">                    &#123;type: &apos;max&apos;, name: &apos;最大值&apos;&#125;,</span><br><span class="line">                    &#123;type: &apos;min&apos;, name: &apos;最小值&apos;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            markLine: &#123;</span><br><span class="line">                data: [</span><br><span class="line">                    &#123;type: &apos;average&apos;, name: &apos;平均值&apos;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>好了更多具体使用看文档 他的文档还是比较详细的</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://echarts.baidu.com/option.html#xAxis.type" target="_blank" rel="noopener">Echarts文档</a><br><a href="https://www.2cto.com/kf/201612/577871.html" target="_blank" rel="noopener">ECharts显示24小时时间数据的一种办法</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TP 3.2加载第三方库文件]]></title>
      <url>http://elickzhao.github.io/2018/01/TP%203.2%E5%8A%A0%E8%BD%BD%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>今天用到Carbon这个时间类,不过<strong>TP3.2</strong>不使用 <code>composer</code> 所以加载起来比较费劲.<br>按<a href="https://www.kancloud.cn/manual/thinkphp/1701" target="_blank" rel="noopener">官方说法</a>放在 <code>/thinkphp/Library</code> 下的都可以自动加载.<br>其实呢,需要命名空间与目录一致,而且文件名必须是 <code>*.class.php</code> 这大多数第三方库是满足不了的<br>所以只好手动加载了</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Admin</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="comment">//import("Vendor.Carbon.Carbon");   //这两种加载文件的方法都可以</span></span><br><span class="line">vendor(<span class="string">"Carbon.Carbon"</span>);</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;  <span class="comment">//使用了 Carbon 命名空间 那么下面使用的时候 就不需要每次都加了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">PublicController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//***********************************</span></span><br><span class="line">    <span class="comment">// iframe式显示菜单和index页</span></span><br><span class="line">    <span class="comment">//**********************************</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这是另一个第三方库 微信支付 </span></span><br><span class="line">        <span class="comment">//不过呢 这个库比较早 没有命名空间</span></span><br><span class="line">        <span class="comment">//所以使用的时候 必须用\空间  也就是 \WxPayUnifiedOrder() 这种形式使用</span></span><br><span class="line">        <span class="comment">//这是需要注意的地方 没有命名空间都得这么使用</span></span><br><span class="line">        $b = vendor(<span class="string">"wxpay.wxpay"</span>);</span><br><span class="line">        $input = <span class="keyword">new</span> \WxPayUnifiedOrder();</span><br><span class="line">        dump($input);</span><br><span class="line"></span><br><span class="line">        printf(<span class="string">"Now: %s"</span>, Carbon::now());   <span class="comment">//这里因为上面使用 use 可以这么简写</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果头部没有用use的话,在这里使用必须写完整的命名空间才行</span></span><br><span class="line">        vendor(<span class="string">"Carbon.Carbon"</span>);</span><br><span class="line">        printf(<span class="string">"Now: %s"</span>, \Carbon\Carbon::now());</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序使用自定义icon]]></title>
      <url>http://elickzhao.github.io/2018/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89icon/</url>
      <content type="html"><![CDATA[<p>使用阿里巴巴的iconfont最简单.<br>直接下载下来,把压缩包里的css改成wxss 引用就能用了</p>
<p><strong>wxss</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"/dist/weui-grid.wxss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字体加粗  */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.font-bold</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p>
<p><strong>wxml</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"iconfont icon-map zan-c-gray"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://jingyan.baidu.com/article/14bd256e4bd36bbb6c26126e.html" target="_blank" rel="noopener">微信小程序如何引用iconfont图标</a><br><a href="https://jingyan.baidu.com/article/14bd256e4bd36bbb6c26126e.html" target="_blank" rel="noopener">Ionic使用Iconfont-阿里巴巴矢量图标库</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[头部固定的布局]]></title>
      <url>http://elickzhao.github.io/2018/01/%E5%A4%B4%E9%83%A8%E5%9B%BA%E5%AE%9A%E7%9A%84%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>需要做一个滚动后,头部固定的页面<br>这个用到 css 里的 fixed 就可以实现了<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.headDiv</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="comment">/*固定定位*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后监听页面滚动,  当滚动到一定数值时  切换logo 并改变 底的颜色即可<br>这是zanUI 官网的效果  这里拿来代码说明一下<br><strong>滚动前的</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.zanui-nav &#123;</span><br><span class="line">    z-index: 3;</span><br><span class="line">    height: 80px;</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 100%;</span><br><span class="line">    min-width: 1024px;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: 20px;</span><br><span class="line">    background: rgba(0,0,0,.2) url(https://img.yzcdn.cn/v2/image/youzanyun/zanui/pc/pc_shouye_logo1_v2.png) no-repeat 20px/76px 20px;</span><br><span class="line">    background: #000 url(https://img.yzcdn.cn/v2/image/youzanyun/zanui/pc/pc_shouye_logo1_v2.png) no-repeat 20px/76px 20px\0;</span><br><span class="line">    -webkit-transition: all 1.2s;</span><br><span class="line">    -moz-transition: all 1.2s;</span><br><span class="line">    transition: all 1.2s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>滚动后的</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//这里多加了个类</span><br><span class="line"><span class="selector-class">.zanui-nav</span><span class="selector-class">.scrolled</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(0,0,0,.1);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(0,0,0,.1);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbfbfb</span> <span class="built_in">url</span>(https://img.yzcdn.cn/v2/image/youzanyun/zanui/pc/pc_shouye_logo2_v2.png) no-repeat <span class="number">20px</span>/<span class="number">76px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all <span class="number">1.2s</span>;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all <span class="number">1.2s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zanui-nav</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1024px</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,.2) <span class="built_in">url</span>(https://img.yzcdn.cn/v2/image/youzanyun/zanui/pc/pc_shouye_logo1_v2.png) no-repeat <span class="number">20px</span>/<span class="number">76px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span> <span class="built_in">url</span>(https://img.yzcdn.cn/v2/image/youzanyun/zanui/pc/pc_shouye_logo1_v2.png) no-repeat <span class="number">20px</span>/<span class="number">76px</span> <span class="number">20px</span>\<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all <span class="number">1.2s</span>;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all <span class="number">1.2s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.cnblogs.com/weiqinl/p/6806767.html" target="_blank" rel="noopener">web知识-平时工作生活中的总结</a><br><a href="http://blog.csdn.net/qazxbjp2010/article/details/56670972" target="_blank" rel="noopener">基于flex弹性布局实现“头尾固定，中间滚动”的页面（纯CSS实现）</a><br><a href="https://www.jianshu.com/p/f49d5b6475a9" target="_blank" rel="noopener">如何优雅的实现内联滚动条（前端底部固定方法 ）</a></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js的Object.assign()复制属性详解]]></title>
      <url>http://elickzhao.github.io/2018/01/js%E7%9A%84Object.assign()%E5%A4%8D%E5%88%B6%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="简单描述"><a href="#简单描述" class="headerlink" title="简单描述"></a>简单描述</h2><p><strong>Object.assign()</strong> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, ...sources)</span><br><span class="line"><span class="comment">//target 目标对象</span></span><br><span class="line"><span class="comment">//...sources 源对象</span></span><br><span class="line"><span class="comment">//返回 目标对象</span></span><br></pre></td></tr></table></figure>
<p><strong>描述:</strong></p>
<blockquote>
<p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。</p>
<p>Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。</p>
<p>String类型和 Symbol 类型的属性都会被拷贝。</p>
<p>在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象。</p>
<p>注意，Object.assign 会跳过那些值为 null 或 undefined 的源对象。</p>
</blockquote>
<a id="more"></a>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>简单实例</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>深拷贝问题</strong><br>针对深拷贝，需要使用其他方法，因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line">  </span><br><span class="line">  obj1.a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line">  </span><br><span class="line">  obj2.a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line">  </span><br><span class="line">  obj2.b.c = <span class="number">3</span>; <span class="comment">//主要问题在这里 从这里看出对象是个引用 而不同于其他属性 所以不是深度拷贝</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 3&#125;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 3&#125;&#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Deep Clone</span></span><br><span class="line">  obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">let</span> obj3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));  <span class="comment">//这是深度拷贝 也就是个完全复制 建立个新的</span></span><br><span class="line">  obj1.a = <span class="number">4</span>;</span><br><span class="line">  obj1.b.c = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj3)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p>
<p><strong>合并对象</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3);    <span class="comment">//这样使用的话 是会把第一个参数当成目标对象了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></span><br><span class="line"><span class="built_in">console</span>.log(o2);  <span class="comment">// &#123;b: 2 &#125;, 只是第一个改变了</span></span><br><span class="line"><span class="built_in">console</span>.log(o3);  <span class="comment">// &#123;c: 3 &#125;, 只是第一个改变了</span></span><br></pre></td></tr></table></figure></p>
<p><strong>合并具有相同属性的对象</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>更多内容参考下面 MDN文档吧 那里实在是太全了 没必要都复制一遍了</strong></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">MDN Object.assign()</a><br><a href="http://blog.csdn.net/waiterwaiter/article/details/50267787" target="_blank" rel="noopener">javascript之Object.assign()痛点</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序转发功能]]></title>
      <url>http://elickzhao.github.io/2018/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>小程序有两种转发形式,一种是右上角点击转发,另一种是通过按钮转发.</p>
<p><strong>右上角形式</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//onload里设置这句 就会接收shareTicket 当然没有也会转发</span></span><br><span class="line">wx.showShareMenu(&#123;</span><br><span class="line">    withShareTicket: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//只要在js定义了 onShareAppMessage 那么页面的右上角就会出现转发按钮 否则是没有转发的</span></span><br><span class="line">onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">'自定义转发标题'</span>,</span><br><span class="line">      path: <span class="string">'/page/user?id=123'</span>,    <span class="comment">//这个可以不设 不设的话就是当前页面地址</span></span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> shareTickets = res.shareTickets;</span><br><span class="line">        <span class="keyword">if</span> (shareTickets.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这个是接收分享到所在群的的信息 这个需要解密等一些操作 下面只是简单演示 这个必须配合上面的 withShareTicket: true</span></span><br><span class="line">        <span class="comment">// 但是这个有啥用现在还没想清楚.</span></span><br><span class="line">        wx.getShareInfo(&#123;</span><br><span class="line">            shareTicket: shareTickets[<span class="number">0</span>];</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> encryptedData = res.encryptedData;</span><br><span class="line">                <span class="keyword">var</span> iv = res.iv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 转发失败</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>按钮形式</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在wxml页面定义button</span></span><br><span class="line">&lt;button open-type=<span class="string">"share"</span>&gt;  <span class="string">"转发"</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/点击就会触发js的 onShareAppMessage()</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/就会达到转发的效果</span></span><br><span class="line"><span class="regexp">onShareAppMessage: function () &#123;</span></span><br><span class="line"><span class="regexp">    ....</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.wxappclub.com/topic/1264" target="_blank" rel="noopener">微信小程序之转发流程详解</a><br><a href="http://blog.csdn.net/mushui0633/article/details/74999346" target="_blank" rel="noopener">微信小程序页面内转发 按钮 转发</a><br><a href="http://www.jb51.net/article/120391.htm" target="_blank" rel="noopener">微信小程序 转发功能的实现</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序下拉刷新及上滑加载更多]]></title>
      <url>http://elickzhao.github.io/2018/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%8F%8A%E4%B8%8A%E6%BB%91%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/</url>
      <content type="html"><![CDATA[<p>参考了下别的文章,很多人都用<code>scroll-view</code>来做.当然这完全可以,而且也是比较简单,但是效果不是那么特别满意.<br>因为是使用的是触及底边才加载,看上去不是那么美.<br>我希望的效果是,距离底边一段距离就开始加载了.<br>仔细研究了小程序的文档,有了方案. 但是这里先讲一下 <code>scroll-view</code> 容易跌入的坑.</p>
<p><code>scroll-view</code> 有几个常用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bindscrolltoupper   //滚动顶边触发</span><br><span class="line">bindscrolltolower   //滚动到底边触发</span><br><span class="line"></span><br><span class="line">//这两个比较特殊 因为有滚动方向问题 向下滚动只会触发 距离底边 向上滚动只能触发距离顶边</span><br><span class="line">//于是就不是我想要的效果了 我想的是 向下滚动距离多少 就触发一个效果 所以只能用下面的 bindscroll</span><br><span class="line">//还有就是他们触发的是 bindscrolltoupper和bindscrolltolower 所绑定的事件 而没有自己的方法</span><br><span class="line">upper-threshold     //距离顶边触发 参数是数字</span><br><span class="line">lower-threshold     //距离底边触发 参数是数字</span><br><span class="line"></span><br><span class="line">//这个比较简单了 实时监听滚动距离</span><br><span class="line">bindscroll</span><br><span class="line"></span><br><span class="line">//wxml中使用中的事例</span><br><span class="line">//&lt;scroll-view scroll-y style=&quot;height: 200px;&quot; bindscrolltoupper=&quot;upper&quot; bindscrolltolower=&quot;lower&quot; bindscroll=&quot;scroll&quot; scroll-into-view=&quot;&#123;&#123;toView&#125;&#125;&quot; scroll-top=&quot;&#123;&#123;scrollTop&#125;&#125;&quot; upper-threshold=&quot;1000&quot; lower-threshold=&quot;500&quot;&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//其他一些不主要的方法</span><br><span class="line">scroll-into-view        //滚动到指定id元素的位置</span><br><span class="line">scroll-top              //滚动到距离头部的指定位置</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>好了说会本体</p>
<p>小程序里有个设置 可以使 <code>view</code> 能监听滚动到底边的距离.但是这里需要在 页面的 <code>json</code> 里设置开启</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//这个可以全局设置 也可以单个页面设置</span><br><span class="line">&#123;</span><br><span class="line">  &quot;enablePullDownRefresh&quot;: true,    //开启下拉刷新</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,     //下拉刷新底部也没的颜色</span><br><span class="line">  &quot;backgroundTextStyle&quot;: &quot;dark&quot;,    //字体样式 只有 dark和light</span><br><span class="line">  &quot;onReachBottomDistance&quot;: 60       // 就是这个了 监听距离底边多少px 执行方法 onReachBottom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">//然后在js里写方法就可以了</span><br><span class="line">  onReachBottom: function () &#123;</span><br><span class="line">    console.log(&quot;触底效果!&quot;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/michael_ouyang/article/details/56846185" target="_blank" rel="noopener"> 微信小程序之加载更多（分页加载）实例 —— 微信小程序实战系列（2）</a><br><a href="http://blog.csdn.net/qq_19558705/article/details/61414164" target="_blank" rel="noopener"> 微信小程序入门五上滑加载下拉刷新</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序使用模块]]></title>
      <url>http://elickzhao.github.io/2017/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p><strong>模块定义</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// common.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span> !`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayGoodbye</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Goodbye <span class="subst">$&#123;name&#125;</span> !`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要用module.exports暴露出来</span></span><br><span class="line"><span class="built_in">module</span>.exports.sayHello = sayHello</span><br></pre></td></tr></table></figure>
<p><strong>模块使用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> common = <span class="built_in">require</span>(<span class="string">'common.js'</span>)</span><br><span class="line">Page(&#123;</span><br><span class="line">  helloMINA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    common.sayHello(<span class="string">'MINA'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  goodbyeMINA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    common.sayGoodbye(<span class="string">'MINA'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>以上是最简单的使用方法.这个方法有个好处就是那个函数知道出自那里.<br>下面的方法更现代一些,不过有个问题是,方法出自那里不会那么清晰.所以用的时候看着办吧.</p>
<a id="more"></a>
<p>这个举例是多模块一起引入</p>
<p><strong>a模块 a.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发现个情况 这里方法没有使用对象, 可能是简单只有一个方法的模块可以这样定义 这个还没验证</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    function_a(content = <span class="string">''</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"function_a"</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong> b模块 b.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module_b = &#123;</span><br><span class="line">    <span class="comment">//这里可能存在一个问题,重名的问题,如果以简单引入使用的方法是没问题的,</span></span><br><span class="line">    <span class="comment">//不过这次的引入是直接引入到参数里使用this直接使用,所以重名可能会出现问题</span></span><br><span class="line">    <span class="comment">//这个有待验证</span></span><br><span class="line">    function_a:<span class="function"><span class="keyword">function</span>(<span class="params">content = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"function_a"</span>+content);</span><br><span class="line">    &#125;,</span><br><span class="line">    function_b:<span class="function"><span class="keyword">function</span>(<span class="params">content = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"function_b"</span>+content);</span><br><span class="line">    &#125;,</span><br><span class="line">    function_c:<span class="function"><span class="keyword">function</span>(<span class="params">content = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"function_c"</span>+content);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = module_b;</span><br></pre></td></tr></table></figure>
<p><strong>模块工厂 modules.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这可以多个模块组合使用了,而不用在页面引入一大堆</span></span><br><span class="line"><span class="comment">//exports 是 module.exports 的一个引用,但因为存在差异,在这种简单的页面可以使用.</span></span><br><span class="line"><span class="comment">//复杂的定义还是使用module.exports</span></span><br><span class="line">exports.a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line">exports.b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br></pre></td></tr></table></figure>
<p><strong>使用模块</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> modules = <span class="built_in">require</span>(<span class="string">'modules.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.assign(&#123;&#125;,...,...) 使用扩展参数的方式,增加方法</span></span><br><span class="line"></span><br><span class="line">Page(<span class="built_in">Object</span>.assign(&#123;&#125;, modules.a,modules.b, &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//因为使用了扩展参数的方式,所以直接用this的方法调用</span></span><br><span class="line">    <span class="comment">//不过这里就有上面说道 重名的问题 还有就是从那里引入来的模糊问题</span></span><br><span class="line">    <span class="keyword">this</span>.function_a(<span class="string">'我是a模块输出'</span>);   <span class="comment">//~~谁输出呢? 会被b模块覆盖么?~~    // 会覆盖通过Object.assign()文档里的说明了这些 参考文档在下面</span></span><br><span class="line">    <span class="keyword">this</span>.function_b(<span class="string">'我是b模块输出'</span>);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>新心得</strong><br>如果是小程序的自带的监听函数,也可以使用模块写法.也会在页面加载后就持续监听.<br>不过只能用上面第二种写法,就是扩展参数的办法才行,这也是这种方式的优势吧.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MD5加密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMD5Encode</span>(<span class="params">toEncode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> MD5Encode.hexMD5(toEncode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onReachBottom</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果有更多商品就使用加载功能,否则就不加在</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.data.more) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getMore();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(this.data.more);</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//console.log("触底效果!")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  isStringEmpty: isStringEmpty,</span><br><span class="line">  sentHttpRequestToServer: sentHttpRequestToServer,</span><br><span class="line">  mapToJson: mapToJson,</span><br><span class="line">  toastSuccess: toastSuccess,</span><br><span class="line">  doWechatPay: doWechatPay,</span><br><span class="line">  onReachBottom: onReachBottom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> common = <span class="built_in">require</span>(<span class="string">'../../utils/common.js'</span>);</span><br><span class="line">Page(<span class="built_in">Object</span>.assign(&#123;&#125;, common,&#123;</span><br><span class="line"></span><br><span class="line">  .....</span><br><span class="line"></span><br><span class="line">&#125;));  </span><br><span class="line"></span><br><span class="line"><span class="comment">//这里要注意下,这次不是工厂那样的写法,所以不能 Page(Object.assign(&#123;&#125;, common.onReachBottom ,&#123;  这样写.</span></span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">MDN Web Docs Object.assign() </a></p>
<blockquote>
<p>Object.assign(target, …sources)<br>参数<br><strong>target:</strong>      目标对象。<br><strong>sources:</strong>     源对象。</p>
<p><strong>返回值:</strong><br>目标对象</p>
<p><strong>描述:</strong><br>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序动画效果使用]]></title>
      <url>http://elickzhao.github.io/2017/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E4%BD%BF%E7%94%A8%20/</url>
      <content type="html"><![CDATA[<p>这个动画能实现基本功能.不过还是挺费劲的.<br>但现在还有个问题没有解决.<br>就是循环的时候 每个items加上动画 如何让他单个执行 这个还没想好</p>
<p><strong>js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    markers: [&#123;</span><br><span class="line">      id: 0,</span><br><span class="line">      latitude: 28.0369400000,</span><br><span class="line">      longitude: 120.6492300000,</span><br><span class="line">      width: 20,</span><br><span class="line">      height: 20,</span><br><span class="line">      title: &quot;欧美佳化妆美甲祛斑纹绣店&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    animationData: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: function () &#123;</span><br><span class="line">    // 页面渲染完成</span><br><span class="line">    //实例化一个动画</span><br><span class="line">    this.animation = wx.createAnimation(&#123;</span><br><span class="line">      // 动画持续时间，单位ms，默认值 400</span><br><span class="line">      duration: 1000,</span><br><span class="line">      /**</span><br><span class="line">       * http://cubic-bezier.com/#0,0,.58,1  </span><br><span class="line">       *  linear  动画一直较为均匀</span><br><span class="line">       *  ease    从匀速到加速在到匀速</span><br><span class="line">       *  ease-in 缓慢到匀速</span><br><span class="line">       *  ease-in-out 从缓慢到匀速再到缓慢</span><br><span class="line">       * </span><br><span class="line">       *  http://www.tuicool.com/articles/neqMVr</span><br><span class="line">       *  step-start 动画一开始就跳到 100% 直到动画持续时间结束 一闪而过</span><br><span class="line">       *  step-end   保持 0% 的样式直到动画持续时间结束        一闪而过</span><br><span class="line">       */</span><br><span class="line">      timingFunction: &apos;ease&apos;,</span><br><span class="line">      // 延迟多长时间开始</span><br><span class="line">      delay: 100,</span><br><span class="line">      /**</span><br><span class="line">       * 以什么为基点做动画  效果自己演示</span><br><span class="line">       * left,center right是水平方向取值，对应的百分值为left=0%;center=50%;right=100%</span><br><span class="line">       * top center bottom是垂直方向的取值，其中top=0%;center=50%;bottom=100%</span><br><span class="line">       */</span><br><span class="line">      transformOrigin: &apos;center top 0&apos;,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">      this.rotate();</span><br><span class="line">    &#125;.bind(this), 200)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line"> * 放大显示</span><br><span class="line"> */</span><br><span class="line">  rotate: function () &#123;</span><br><span class="line">    //放大显示后并恢复</span><br><span class="line">    //  //现在唯一的问题是 如果在循环里绑定相同的动画 却是单一执行呢 唉....</span><br><span class="line">    // this.animation.rotate(150).step()</span><br><span class="line">    this.animation.opacity(1).scale(1.5, 1.5).step().scale(1, 1).step();</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      //输出动画</span><br><span class="line">      animation: this.animation.export()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>wxml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;view animation=&quot;&#123;&#123;animation&#125;&#125;&quot; style=&apos;opacity:0&apos; class=&quot;view&quot;&gt;我在做动画&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;rotate&quot;&gt;旋转&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/u014360817/article/details/52712205" target="_blank" rel="noopener">微信小程序把玩（四十）animation API</a><br><a href="https://www.cnblogs.com/JinJi-Jary/archive/2017/01/12/6278301.html" target="_blank" rel="noopener">微信小程序的动画效果</a><br><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-animation.html#wxcreateanimationobject" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sublime text 插件 PlainTasks 任务计划]]></title>
      <url>http://elickzhao.github.io/2017/12/sublime%20text%20%E6%8F%92%E4%BB%B6%20PlainTasks%20%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>还没正式开始使用 所以先记录几篇文章</p>
<p>哦 对了 因为字体原因 会造成图标不显示的问题 下面有具体解决方法 <code>Sublime Text 3的PlainTasks插件</code> 这篇文章.</p>
<p>这里简单说下,一 是改字体,改系统字体或者插件字体. 二 是把option后面能看到的图标 放到前面使用</p>
<p>说一下问题 自定义设置 <code>open_tasks_bullet</code> 和 <code>done_tasks_bullet</code> 如果这两个改了,就会出现 进度条无法显示的问题, 因为每次完成一个任务会直接把任务当作取消来算了.<br>但是问题在于有时系统不会显示默认的字体.<br>这里就必须改写 <code>&quot;font_face&quot;: &quot;Microsoft YaHei&quot;,</code> 雅黑还算好看点,所以现在暂且用这个.并用默认图标</p>
<p>已经用了sublime的同步设置,下面保存这个其实没什么太多意义,不过还是保存一份吧<br><strong>自己的配置</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"open_tasks_bullet"</span>: <span class="string">"☐"</span>, <span class="comment">// options: - | ❍ | ❑ | ■ | □ | ☐ | ▪ | ▫ | – | — | ≡ | → | › | [ ]</span></span><br><span class="line">  <span class="string">"done_tasks_bullet"</span>: <span class="string">"✔"</span>, <span class="comment">// options: + | ✓ | ✔ | √ | [x]</span></span><br><span class="line">  <span class="string">"cancelled_tasks_bullet"</span>: <span class="string">"✘"</span>, <span class="comment">// options: x | ✘ | [-]</span></span><br><span class="line">  <span class="string">"before_tasks_bullet_margin"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"date_format"</span>: <span class="string">"(%y-%m-%d %H:%M)"</span>,</span><br><span class="line">  <span class="string">"done_tag"</span>: <span class="literal">true</span>, <span class="comment">// related to @cancelled as well</span></span><br><span class="line">  <span class="string">"project_tag"</span>: <span class="literal">true</span>, <span class="comment">// if true - postfix archived task with project tag, if false - prefix</span></span><br><span class="line">  <span class="string">"archive_name"</span>: <span class="string">"Archive:"</span>, <span class="comment">// make sure it is the unique project name within your todo files</span></span><br><span class="line">  <span class="string">"new_on_top"</span>: <span class="literal">true</span>, <span class="comment">// how to sort archived tasks</span></span><br><span class="line">  <span class="string">"show_remain_due"</span>: <span class="literal">false</span>, <span class="comment">// in Sublime 3, show remain or overdue time under due tags</span></span><br><span class="line">  <span class="comment">//按理说这是这进度条设计啊</span></span><br><span class="line">  <span class="string">"stats_format"</span>:<span class="string">"$n/$a done ($percent%) $progress Last task @done $last"</span>,</span><br><span class="line">  <span class="comment">//"stats_format":"□$o [√]$d  ≡$a",</span></span><br><span class="line">  <span class="string">"bar_full"</span>: <span class="string">"■"</span>,</span><br><span class="line">  <span class="string">"bar_empty"</span>: <span class="string">"□"</span>, <span class="comment">// empty cell for progress-bar in status-bar, for more details see Custom Statistics in README</span></span><br><span class="line">  <span class="string">"replace_stats_chars"</span>: [[<span class="string">" ■"</span>, <span class="string">" [="</span>], [<span class="string">"■"</span>, <span class="string">"="</span>], [<span class="string">"▫"</span>, <span class="string">" ] "</span>], [<span class="string">"▫"</span>, <span class="string">" "</span>]],</span><br><span class="line">  </span><br><span class="line">  <span class="string">"color_scheme"</span>: <span class="string">"Packages/PlainTasks/tasks.hidden-tmTheme"</span>,</span><br><span class="line">    <span class="comment">// other bundled schemes:</span></span><br><span class="line">    <span class="comment">//   Packages/PlainTasks/tasks-dark.hidden-tmTheme</span></span><br><span class="line">    <span class="comment">//   Packages/PlainTasks/tasks-eighties-colored.hidden-tmTheme</span></span><br><span class="line">    <span class="comment">//   Packages/PlainTasks/tasks-eighties-dark.hidden-tmTheme</span></span><br><span class="line">    <span class="comment">//   Packages/PlainTasks/tasks-gray.hidden-tmTheme</span></span><br><span class="line">    <span class="comment">//   Packages/PlainTasks/tasks-monokai.hidden-tmTheme</span></span><br><span class="line">    <span class="comment">//   Packages/PlainTasks/tasks-solarized-dark.hidden-tmTheme</span></span><br><span class="line">    <span class="comment">//   Packages/PlainTasks/tasks-solarized-light.hidden-tmTheme</span></span><br><span class="line">  <span class="comment">// "font_size": 11,</span></span><br><span class="line">  <span class="comment">// "font_face": "Consolas",</span></span><br><span class="line">  <span class="string">"draw_indent_guides"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"line_numbers"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"gutter"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"margin"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"tab_size"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"translate_tabs_to_spaces"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"use_tab_stops"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"match_brackets"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"fold_buttons"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"fade_fold_buttons"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"extensions"</span>:</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"TODO"</span>,</span><br><span class="line">    <span class="string">"todo"</span>,</span><br><span class="line">    <span class="string">"todolist"</span>,</span><br><span class="line">    <span class="string">"taskpaper"</span>,</span><br><span class="line">    <span class="string">"tasks"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"font_face"</span>: <span class="string">"Microsoft YaHei"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/etimechen/article/details/50730150" target="_blank" rel="noopener">SublimeText 插件 - PlainTasks使用方法</a><br><a href="https://zhuanlan.zhihu.com/p/20832754" target="_blank" rel="noopener">Sublime Text 3的PlainTasks插件</a><br><a href="http://blog.csdn.net/ljw_josie/article/details/73122997" target="_blank" rel="noopener">SublimeText3 插件PlainTasks（Todo-list）的使用方法</a><br><a href="http://blog.csdn.net/yuenushan/article/details/50041283" target="_blank" rel="noopener">SublimeText 插件 - PlainTasks使用方法</a></p>
]]></content>
      
        
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序本地存储实例]]></title>
      <url>http://elickzhao.github.io/2017/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p><strong>test.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="comment">// text:"这是一个页面"</span></span><br><span class="line">    storageContent: <span class="string">''</span>,</span><br><span class="line">    storageSyncContent: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面初始化 options为页面跳转所带来的参数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 异步存储</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  listenerStorageSave: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//以键值对的形式存储 传进去的是个对象</span></span><br><span class="line">    wx.setStorage(&#123;</span><br><span class="line">      key: <span class="string">'key'</span>,</span><br><span class="line">      data: <span class="string">'我是storeage异步存储的信息'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 异步取信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  listenerStorageGet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.getStorage(&#123;</span><br><span class="line">      <span class="comment">//获取数据的key</span></span><br><span class="line">      key: <span class="string">'key'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          storageContent: res.data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 失败会调用</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 清除数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  listenerStorageClear: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.clearStorage(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          storageContent: <span class="string">''</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 数据同步存储</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  listenerStorageSyncSave: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.setStorageSync(<span class="string">'key'</span>, <span class="string">'我是同步存储的数据'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 数据同步获取</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  listenerStorageSyncGet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var that = this;</span></span><br><span class="line">    <span class="keyword">var</span> value = wx.getStorageSync(<span class="string">'key'</span>)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      storageSyncContent: value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 清除同步存储数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  listenerStorageSyncClear: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.clearStorageSync()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面渲染完成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面隐藏</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面关闭</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>test.wxml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态获取数据--&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;storageContent&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;!--存--&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;listenerStorageSave&quot;&gt;storage存储信息会在text上显示&lt;/button&gt;</span><br><span class="line">&lt;!--取--&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;listenerStorageGet&quot;&gt;获取storage存储的信息&lt;/button&gt;</span><br><span class="line">&lt;!--清--&gt;</span><br><span class="line">&lt;button type=&quot;warn&quot; bindtap=&quot;listenerStorageClear&quot;&gt;清楚异步存储数据&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;text&gt;&#123;&#123;storageSyncContent&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;listenerStorageSyncSave&quot;&gt;storageSync存储信息会在text上显示&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;listenerStorageSyncGet&quot;&gt;获取storageSync存储信息&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;warn&quot; bindtap=&quot;listenerStorageSyncClear&quot;&gt;清除同步存储数据&lt;/button&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序中引用import和include区别]]></title>
      <url>http://elickzhao.github.io/2017/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E5%BC%95%E7%94%A8import%E5%92%8Cinclude%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>先说这两个的主要用法吧<br><strong>import</strong> 引入模版 可以根据固定样式显示数据 所以适合和数据进行组合的<br><strong>include</strong> 引入内容 无法和数据进行组合 所以适合引用固定样式的组件 而没有与数据交换操作的页面</p>
<hr>
<p><del>现在很奇怪的事情是 include的不好使. 只有import是可用的</del><br>已经搞懂include怎么用了,这个文档啊,字句真需要仔细琢磨.要不太有歧义了.</p>
<blockquote>
<p>include可以将目标文件除了<template>的整个代码引入，相当于是拷贝到include位</template></p>
</blockquote>
<p>应该是 除了<code>&lt;template/&gt;</code>代码块内的,其余内容全部引入.</p>
<p><strong>include</strong>这么用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;include src=&quot;/pages/template/tabbar.wxml&quot; /&gt;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">  &lt;view class=&quot;weui-tabbars&quot;&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/index/index&quot; open-type=&apos;switchTab&apos; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/a.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot;&gt;首页&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/category/index&quot; open-type=&apos;switchTab&apos; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/b.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot;&gt;分类&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/cart/cart&quot; open-type=&apos;switchTab&apos; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/c.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot;&gt;购物车&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/user/user&quot; open-type=&apos;switchTab&apos; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/dd.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot; style=&apos;color: #FF8140&apos;&gt;我的&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">  &lt;/view&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>import</strong>这么用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    &lt;import src=&quot;../template/tabbar.wxml&quot; /&gt;</span><br><span class="line">    &lt;template is=&quot;tabbar&quot; /&gt;</span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">&lt;template name=&quot;tabbar&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;weui-tabbars&quot;&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/index/index&quot; open-type=&amp;#39;switchTab&amp;#39; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/a.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot;&gt;首页&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/category/index&quot; open-type=&amp;#39;switchTab&amp;#39; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/b.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot;&gt;分类&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/cart/cart&quot; open-type=&amp;#39;switchTab&amp;#39; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/c.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot;&gt;购物车&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">    &lt;navigator url=&quot;/pages/user/user&quot; open-type=&amp;#39;switchTab&amp;#39; class=&quot;weui-tabbar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;weui-tabbar__icon&quot; src=&quot;../../images/icons/dd.png&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-tabbar__label&quot; style=&amp;#39;color: #FF8140&amp;#39;&gt;我的&lt;/view&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/sinat_39343982/article/details/74095205" target="_blank" rel="noopener">小程序中引用import和include区别</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[composer 删不掉的全局包]]></title>
      <url>http://elickzhao.github.io/2017/12/composer%20%E5%88%A0%E4%B8%8D%E6%8E%89%E7%9A%84%E5%85%A8%E5%B1%80%E5%8C%85%20/</url>
      <content type="html"><![CDATA[<p>今天安装 <code>php-cs-fixer</code> 遇到个讨厌的情况.一直提示我需要卸载 <code>symfony/console</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Problem 1</span><br><span class="line">    - Installation request for friendsofphp/php-cs-fixer ^2.9 -&gt; satisfiable by friendsofphp/php-cs-fixer[v2.9.0].</span><br><span class="line">    - Conclusion: remove symfony/console v2.8.32</span><br><span class="line">    - Conclusion: don&apos;t install symfony/console v2.8.32</span><br><span class="line">    - friendsofphp/php-cs-fixer v2.9.0 requires symfony/console ^3.2 || ^4.0 -&gt; satisfiable by symfony/console[v3.2.0, v3.2.1, v3.2.10, v3.2.11, v3.2.12, v3.2.13, v3.2.14, v3.2.2, v3.2.3, v3.2.4, v3.2.5, v3.2.6, v3.2.7, v3.2.8, v3.2.9, v3.3.0, v3.3.1, v3.3.10, v3.3.11, v3.3.12, v3.3.13, v3.3.14, v3.3.2, v3.3.3, v3.3.4, v3.3.5, v3.3.6, v3.3.7, v3.3.8, v3.3.9, v3.4.0, v3.4.1, v3.4.2, v4.0.0, v4.0.1, v4.0.2].</span><br></pre></td></tr></table></figure>
<p>可是 <code>composer remove symfony/console -g</code> 却提示说根本没有安装<br>而且在<code>C:\Users\elick\AppData\Roaming\Composer</code>的 <code>composer.json</code> 也确实没有啊 这就晕了</p>
<p>最后无奈更新了下 <code>composer update</code> 结果在更新的信息里的确发现了 <code>symfony/console</code></p>
<p>后来才终于找到 原来在这里安装着呢 <code>C:\Users\elick\AppData\Roaming\Composer\vendor\composer</code>的 <code>installed.json</code> </p>
<p>这可能是<code>composer</code>自带的插件或者依赖的插件吧 可能我用了好久一直没更新 于是出现了这个错误 </p>
<p>看来以后安装插件的时候,提前更新下 是个好操作啊.</p>
]]></content>
      
        
        <tags>
            
            <tag> composer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让人遭心的  MySql enum字段使用问题]]></title>
      <url>http://elickzhao.github.io/2017/12/%E8%AE%A9%E4%BA%BA%E9%81%AD%E5%BF%83%E7%9A%84%20%20MySql%20enum%E5%AD%97%E6%AE%B5%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天在改程序的时候遇到了 enum字段 这个东西果真奇葩.怎么搜索都搜索不到.<br>后来查了资料才搞懂.<br>这个字段是 mysql独有 其他数据库都没有的 所以用了他就别想换了<br>他的唯一优点就是控制大小,因为他是类似数组形式保存的 所以数量是可控的<br>但也造成了搜索时候的问题. 直接搜索的时候有可能搜索的是按key来搜不是保存在字段里value 唉…</p>
<p>据下面文档说 他的key是从1开始 所以搜不到0<br><del>但是我遇到更奇葩的事 就算我按key=1 来搜索也搜不到 0 这个值. 而其他两个 1 和 2 全能搜到</del><br>妈蛋 原来人家说的是对的 只不过数据库形式我没仔细看错了 搜索3就出来了<br>数据库形式 是这样的  [‘1’=&gt;1,’2’=&gt;’2’,’3’=&gt;0]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM lr_order WHERE back = 3;  //这是按key搜索 匹配出来的 全是 back=0</span><br></pre></td></tr></table></figure></p>
<p>如果想按值搜索怎么做? 加上单引号就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM lr_order WHERE back = &apos;0&apos;;  //这是按value搜索 匹配出来的 全是 back=0</span><br></pre></td></tr></table></figure></p>
<p>这个破东西的确烦,可能框架都没法用.所以建立数据库的时候,还是用tinyint算了</p>
<p>##参考文档<br><a href="http://blog.csdn.net/kkikiako/article/details/49746791" target="_blank" rel="noopener">MySql enum字段使用问题</a><br><a href="http://www.jb51.net/article/53426.htm" target="_blank" rel="noopener">要慎用mysql的enum字段的原因</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php自动加载原理]]></title>
      <url>http://elickzhao.github.io/2017/11/php%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><strong>目录结构</strong></p>
<blockquote>
<p>F:.<br>│  Power.php<br>│  Superman.php<br>│<br>└─IoC<br>        Power.php</p>
</blockquote>
<p><strong>Superman.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IoC</span>;</span><br><span class="line"><span class="comment">//use Power\Power; //定义了命名空间也需要引入???? 不能用use自动加载?</span></span><br><span class="line"><span class="comment">//已经确定了 必须的引入 框架里都是使用了自动加载程序 所以无需引用</span></span><br><span class="line"><span class="comment">//比如composer</span></span><br><span class="line"><span class="comment">//include_once 'Power.php';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两点需要注意的</span></span><br><span class="line"><span class="comment">//一 autoload不能在有命名空间下使用</span></span><br><span class="line"><span class="comment">//二 函数是不能再类里面写的 要么写在之前 要么写在方法里</span></span><br><span class="line"><span class="comment">//spl_autoload_register现在建议用这个函数 不建议使用__autoload了 好像7.2就要把他删掉了</span></span><br><span class="line"><span class="comment">//这两个存在哪一个都可以</span></span><br><span class="line"><span class="comment">//不过这是加载相同命名空间下的文件</span></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span><span class="params">($class)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($class)&#123;</span><br><span class="line">        $file = $class.<span class="string">'.php'</span>;</span><br><span class="line">        <span class="keyword">if</span>(file_exists($file))&#123;</span><br><span class="line">            <span class="keyword">include_once</span> $file;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $power;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// spl_autoload_register(function($class)&#123;</span></span><br><span class="line">        <span class="comment">//     if($class)&#123;</span></span><br><span class="line">        <span class="comment">//         $file = $class.'.php';</span></span><br><span class="line">        <span class="comment">//         if(file_exists($file))&#123;</span></span><br><span class="line">        <span class="comment">//             include_once $file;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="comment">//所以这个是IoC/下的Power 而不是和Superman同目录下的Power  因注册的是相同命名空间IoC下的文件    </span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;power = <span class="keyword">new</span> Power(<span class="number">999</span>,<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public function makeNew()&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;power = new Power(999,100);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPower</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//var_dump($this-&gt;power);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//明白了这个函数链是怎么回事了</span></span><br><span class="line">$man = <span class="keyword">new</span> Superman;</span><br><span class="line"><span class="keyword">echo</span> $man-&gt;getPower()-&gt;getAbility();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="comment">//这个class的用法 必须没经过实例化的类 经过实例化的类是动态的会报错</span></span><br><span class="line"><span class="keyword">echo</span> Power::class;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>Power.php</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IoC</span>;</span><br><span class="line"><span class="comment">//namespace Power;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ability;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $range;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ability,$range)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ability = $ability;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;range = $range;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAbility</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ability;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自动加载使用的是<code>spl_autoload_register()</code>现在不建议使用<code>__autoload()</code>了<br><code>spl_autoload_register(&#39;类名&#39;)</code>这个函数可以多次加载这比<code>__autoload()</code>只能用一次方便很多利于扩展<br>而且可以在类中使用就想上面那个例子,而’__autoload()’就不可以了<br>下面这个例子更好的说明了使用方式<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: chengtao</span></span><br><span class="line"><span class="comment"> * Date: 14-7-3</span></span><br><span class="line"><span class="comment"> * Time: 上午11:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">define(<span class="string">'BASE_PATH'</span>,dirname(<span class="keyword">__FILE__</span>).<span class="string">'/'</span>) ;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cron_autoload1</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">    $file = BASE_PATH.<span class="string">'lib1/'</span>.$name.<span class="string">'.class.php'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($file))&#123;</span><br><span class="line">        <span class="keyword">include_once</span>($file);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cron_autoload2</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">    $file = BASE_PATH.<span class="string">'lib2/'</span>.$name.<span class="string">'.class.php'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($file))&#123;</span><br><span class="line">        <span class="keyword">include_once</span>($file);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">'cron_autoload1'</span>);</span><br><span class="line">spl_autoload_register(<span class="string">'cron_autoload2'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> Class1();</span><br><span class="line"><span class="keyword">new</span> Class2();</span><br></pre></td></tr></table></figure></p>
<p>所以只要有个单独的文件写这些注册的类的地址,然后只要引入这一个文件就好了<br>以后可以扩展那个文件了<br>这样就可以实现所有的自动加载.<br>也就是我最初的疑问,还以为只要use 类 就能自己加载呢 其实是两码事 没那么智能 呵呵<br>而且命名空间和存放文件地址也未必是一定相对应的,比如最上面第一个例子 Superman的命名空间和地址就不是对应的</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nuxt.js - Vue.js 通用应用框架]]></title>
      <url>http://elickzhao.github.io/2017/09/Nuxt.js%20-%20Vue.js%20%E9%80%9A%E7%94%A8%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p>其实主要看官方文档就可以了,非常之详尽而且是中文.<br>以后遇到问题,或者容易忘记的点再记录下吧</p>
<p>##参考文档<br><a href="https://zh.nuxtjs.org/guide" target="_blank" rel="noopener">官方文档</a><br><a href="https://segmentfault.com/a/1190000007933349" target="_blank" rel="noopener">Vue 基于 NUXT 的 SSR</a></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些vue的文章打算读一下]]></title>
      <url>http://elickzhao.github.io/2017/09/%E4%B8%80%E4%BA%9Bvue%E7%9A%84%E6%96%87%E7%AB%A0%E6%89%93%E7%AE%97%E8%AF%BB%E4%B8%80%E4%B8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/27679211" target="_blank" rel="noopener">Vue 全家桶 + Electron 开发的一个跨三端的应用</a><br><a href="http://www.cnblogs.com/woodk/p/6048890.html" target="_blank" rel="noopener">饿了么基于Vue2.0的通用组件开发之路（分享会记录）</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> vue </tag>
            
            <tag> 待读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端图标插件总结]]></title>
      <url>http://elickzhao.github.io/2017/09/%E5%89%8D%E7%AB%AF%E5%9B%BE%E6%A0%87%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://echarts.baidu.com/examples.html" target="_blank" rel="noopener">ECharts </a></td>
<td>百度出品,免费且十分强大,各种图表都有,唯一可能造成的问题就是因为支持的太多可能体积大些</td>
</tr>
<tr>
<td><a href="http://www.chartjs.org/" target="_blank" rel="noopener">sChart.js </a></td>
<td>简单且易用,基本图表都有了.不过现在好像改名了叫<code>chartjs</code><a href="http://www.bootcss.com/p/chart.js/docs/" target="_blank" rel="noopener">中文文档</a>,这个可以使用npm方式安装</td>
</tr>
<tr>
<td><a href="https://www.hcharts.cn/" target="_blank" rel="noopener">Highcharts</a></td>
<td>这个的确很吊,但是呢收费,虽然说个人用户免费,但还不如用百度的Echarts比较安心</td>
</tr>
<tr>
<td><a href="https://github.com/xianrendzw/EasyReport" target="_blank" rel="noopener">EasyReport</a></td>
<td>这个也很牛逼,这个是直接通过数据库形成列表形式的表单.这个用的时候复杂点,不过之后只要管理数据库就行了.这点很赞. <strong><a href="http://easyreport.hzpicc.com.cn/" target="_blank" rel="noopener">示例</a></strong></td>
</tr>
<tr>
<td><a href="https://www.metricsgraphicsjs.org/" target="_blank" rel="noopener">metrics-graphics</a></td>
<td>这个的优势是可以用json文件来导入数据,而且使用上很简洁明了,几乎看一眼就会用了.但是支持格式少点</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue一些特别有用的插件]]></title>
      <url>http://elickzhao.github.io/2017/08/vue%E4%B8%80%E4%BA%9B%E7%89%B9%E5%88%AB%E6%9C%89%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="Vue相关网站参考："><a href="#Vue相关网站参考：" class="headerlink" title="Vue相关网站参考："></a>Vue相关网站参考：</h2><p>　　<strong>Vue中文帮助网站</strong>：<a href="http://cn.vuejs.org/" target="_blank" rel="noopener">http://cn.vuejs.org/</a></p>
<p>　　<strong>Vue github开源地址</strong>：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a></p>
<p>　　<strong>Vue.js专业中文社区</strong>：<a href="http://www.vue-js.com/" target="_blank" rel="noopener">http://www.vue-js.com/</a></p>
<p>　　<strong>前端开发Vue相关</strong>：<a href="http://www.opendigg.com/tags/front-vue" target="_blank" rel="noopener">http://www.opendigg.com/tags/front-vue</a></p>
<p>　　<strong>本文开源地址</strong>：<a href="https://github.com/yonghu86/awesome-github-vue" target="_blank" rel="noopener">https://github.com/yonghu86/awesome-github-vue</a></p>
<p>　　本文主要是收集与整理Vue相关的开源资料，以供需要的朋友参考。主要包含以下几方面的内容：</p>
<p>　　UI组件、开发框架、实用库、服务端、辅助工具、应用实例、Demo示例</p>
<h2 id="构建插件"><a href="#构建插件" class="headerlink" title="构建插件"></a>构建插件</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/annnhan/vue-spa-template" target="_blank" rel="noopener">vue-spa-template</a></td>
<td>构建vue全家桶,Github说明很详细.<a href="http://www.cnblogs.com/axl234/p/6808599.html" target="_blank" rel="noopener">参考文档:基于 vue 全家桶的 spa 项目脚手架</a></td>
</tr>
<tr>
<td><a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">electron-vue</a></td>
<td>构建electron时用的</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/cooking/blob/master/README_zh-cn.md" target="_blank" rel="noopener">cooking</a></td>
<td>vue特别简单的构建工具,不过东西可能没有上面vue-spa-template那么全. <a href="https://cookingjs.github.io/zh-cn/intro.html" target="_blank" rel="noopener">中文文档</a></td>
</tr>
<tr>
<td><a href="https://github.com/Metnew/vue-element-starter" target="_blank" rel="noopener">Vue-Element-Starter</a></td>
<td>vue启动页.这个已经有了个后台框架的样子了.基本的东西已经弄好,可以快速开发了</td>
</tr>
<tr>
<td><a href="https://github.com/cristijora/vue-paper-dashboard" target="_blank" rel="noopener">Vue Paper Dashboard</a></td>
<td>这个真的很漂亮 就是不能用作大型后台</td>
</tr>
<tr>
<td><a href="https://github.com/vue-bulma/vue-admin" target="_blank" rel="noopener">Vue Admin Panel Framework</a></td>
<td>vue和buluma的后台好像是重复两个啊</td>
</tr>
<tr>
<td><a href="https://github.com/misterGF/CoPilot" target="_blank" rel="noopener">CoPilot  </a></td>
<td>这个也不错 是AdminLTE模板做的</td>
</tr>
<tr>
<td><a href="https://github.com/mrholek/CoreUI-Free-Bootstrap-Admin-Template" target="_blank" rel="noopener">CoreUI-Free-Bootstrap-Admin-Template</a></td>
<td>这个也不错 是CoreUI模板做的</td>
</tr>
<tr>
<td><a href="https://github.com/epicmaxco/vuestic-admin" target="_blank" rel="noopener">Vuestic Admin Dashboard</a></td>
<td>这个也不错 是 Bootstrap 4.模板做的</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element</a>   ★9305</td>
<td>饿了么出品的Vue2的web UI工具套件</td>
</tr>
<tr>
<td><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">Vux</a> ★6802</td>
<td>基于Vue和WeUI的组件库</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui</a> ★4776</td>
<td>- Vue 2的移动UI元素</td>
</tr>
<tr>
<td><a href="https://github.com/iview/iview" target="_blank" rel="noopener">iview</a> ★4458</td>
<td>- 基于 Vuejs 的开源 UI 组件库</td>
</tr>
<tr>
<td><a href="https://github.com/JosephusPaye/Keen-UI" target="_blank" rel="noopener">Keen-UI</a> ★2363</td>
<td>- 轻量级的基本UI组件合集</td>
</tr>
<tr>
<td><a href="https://github.com/vuematerial/vue-material" target="_blank" rel="noopener">vue-material</a> ★2207</td>
<td>- 通过Vue Material和Vue 2建立精美的app应用</td>
</tr>
<tr>
<td><a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">muse-ui</a> ★1992</td>
<td>- 三端样式一致的响应式 UI 库</td>
</tr>
<tr>
<td><a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">vuetify</a> ★1678</td>
<td>- 为移动而生的Vue JS 2组件框架</td>
</tr>
<tr>
<td><a href="https://github.com/wangdahoo/vonic" target="_blank" rel="noopener">vonic</a> ★1494</td>
<td>- 快速构建移动端单页应用</td>
</tr>
<tr>
<td><a href="https://github.com/egoist/eme" target="_blank" rel="noopener">eme</a> ★1390</td>
<td>- 优雅的Markdown编辑器</td>
</tr>
<tr>
<td><a href="https://github.com/monterail/vue-multiselect" target="_blank" rel="noopener">vue-multiselect</a> ★1166</td>
<td>- Vue.js选择框解决方案</td>
</tr>
<tr>
<td><a href="https://github.com/ratiw/vue-table" target="_blank" rel="noopener">vue-table</a> ★824</td>
<td>- 简化数据表格</td>
</tr>
<tr>
<td><a href="https://github.com/OYsun/VueCircleMenu" target="_blank" rel="noopener">VueCircleMenu</a> ★776</td>
<td>- 漂亮的vue圆环菜单</td>
</tr>
<tr>
<td><a href="https://github.com/Coffcer/vue-chat" target="_blank" rel="noopener">vue-chat</a> ★748</td>
<td>- vuejs和vuex及webpack的聊天示例</td>
</tr>
<tr>
<td><a href="https://github.com/luojilab/radon-ui" target="_blank" rel="noopener">radon-ui</a> ★633</td>
<td>- 快速开发产品的Vue组件库</td>
</tr>
<tr>
<td><a href="https://github.com/MopTym/vue-waterfall" target="_blank" rel="noopener">vue-waterfall</a> ★605</td>
<td>- Vue.js的瀑布布局组件</td>
</tr>
<tr>
<td><a href="https://github.com/myronliu347/vue-carbon" target="_blank" rel="noopener">vue-carbon</a> ★595</td>
<td>- 基于 vue 开发MD风格的移动端</td>
</tr>
<tr>
<td><a href="https://github.com/FE-Driver/vue-beauty" target="_blank" rel="noopener">vue-beauty</a> ★569</td>
<td>- 由vue和ant design创建的优美UI组件</td>
</tr>
<tr>
<td><a href="https://github.com/chenz24/vue-blu" target="_blank" rel="noopener">vue-blu</a> ★557</td>
<td>- 帮助你轻松创建web应用</td>
</tr>
<tr>
<td><a href="https://github.com/taylorchen709/vueAdmin" target="_blank" rel="noopener">vueAdmin</a> ★556</td>
<td>- 基于vuejs2和element的简单的管理员模板</td>
</tr>
<tr>
<td><a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="noopener">vue-syntax-highlight</a> ★551</td>
<td>- Sublime Text语法高亮</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/vue-infinite-scroll" target="_blank" rel="noopener">vue-infinite-scroll</a> ★524</td>
<td>- VueJS的无限滚动指令</td>
</tr>
<tr>
<td><a href="https://github.com/David-Desmaisons/Vue.Draggable" target="_blank" rel="noopener">Vue.Draggable</a> ★493</td>
<td>- 实现拖放和视图模型数组同步</td>
</tr>
<tr>
<td><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a> ★476</td>
<td>- vue.js触摸滑动组件</td>
</tr>
<tr>
<td><a href="https://github.com/jinzhe/vue-calendar" target="_blank" rel="noopener">vue-calendar</a> ★465</td>
<td>- 日期选择插件</td>
</tr>
<tr>
<td><a href="https://github.com/pi0/bootstrap-vue" target="_blank" rel="noopener">bootstrap-vue</a> ★458</td>
<td>- 应用于Vuejs2的Twitter的Bootstrap 4组件</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/vue-swipe" target="_blank" rel="noopener">vue-swipe</a> ★361</td>
<td>- VueJS触摸滑块</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/vue-amap" target="_blank" rel="noopener">vue-amap</a> ★346</td>
<td>- 基于Vue 2和高德地图的地图组件</td>
</tr>
<tr>
<td><a href="https://github.com/apertureless/vue-chartjs" target="_blank" rel="noopener">vue-chartjs</a> ★333</td>
<td>- vue中的Chartjs的封装</td>
</tr>
<tr>
<td><a href="https://github.com/hilongjw/vue-datepicker" target="_blank" rel="noopener">vue-datepicker</a> ★331</td>
<td>- 日历和日期选择组件</td>
</tr>
<tr>
<td><a href="https://github.com/jrainlau/markcook" target="_blank" rel="noopener">markcook</a> ★318</td>
<td>- 好看的markdown编辑器</td>
</tr>
<tr>
<td><a href="https://github.com/GuillaumeLeclerc/vue-google-maps" target="_blank" rel="noopener">vue-google-maps</a> ★287</td>
<td>- 带有双向数据绑定Google地图组件</td>
</tr>
<tr>
<td><a href="https://github.com/hilongjw/vue-progressbar" target="_blank" rel="noopener">vue-progressba</a>r ★248</td>
<td>- vue轻量级进度条</td>
</tr>
<tr>
<td><a href="https://github.com/alessiomaffeis/vue-picture-input" target="_blank" rel="noopener">vue-picture-input</a> ★236</td>
<td>- 移动友好的图片文件输入组件</td>
</tr>
<tr>
<td><a href="https://github.com/PeachScript/vue-infinite-loading" target="_blank" rel="noopener">vue-infinite-loading</a> ★224</td>
<td>- VueJS的无限滚动插件</td>
</tr>
<tr>
<td><a href="https://github.com/lian-yue/vue-upload-component" target="_blank" rel="noopener">vue-upload-component</a> ★204</td>
<td>- Vuejs文件上传组件</td>
</tr>
<tr>
<td><a href="https://github.com/Haixing-Hu/vue-datetime-picker" target="_blank" rel="noopener">vue-datetime-picker</a> ★197</td>
<td>- 日期时间选择控件</td>
</tr>
<tr>
<td><a href="https://github.com/wangdahoo/vue-scroller" target="_blank" rel="noopener">vue-scroller</a> ★196</td>
<td>- Vonic UI的功能性组件</td>
</tr>
<tr>
<td><a href="https://github.com/icai/vue2-calendar" target="_blank" rel="noopener">vue2-calendar</a> ★181</td>
<td>- 支持lunar和日期事件的日期选择器</td>
</tr>
<tr>
<td><a href="https://github.com/surmon-china/vue-video-player" target="_blank" rel="noopener">vue-video-playe</a>r ★178</td>
<td>- VueJS视频及直播播放器</td>
</tr>
<tr>
<td><a href="https://github.com/Wanderxx/vue-fullcalendar" target="_blank" rel="noopener">vue-fullcalendar</a> ★176</td>
<td>- 基于vue.js的全日历组件</td>
</tr>
<tr>
<td><a href="https://github.com/ccforward/rubik" target="_blank" rel="noopener">rubik</a> ★170</td>
<td>- 基于Vuejs2的开源 UI 组件库</td>
</tr>
<tr>
<td><a href="https://github.com/OYsun/VueStar" target="_blank" rel="noopener">VueStar</a> ★169</td>
<td>- 带星星动画的vue点赞按钮</td>
</tr>
<tr>
<td><a href="https://github.com/egoist/vue-mugen-scroll" target="_blank" rel="noopener">vue-mugen-scroll</a> ★167</td>
<td>- 无限滚动组件</td>
</tr>
<tr>
<td><a href="https://github.com/mint-ui/mint-loadmore" target="_blank" rel="noopener">mint-loadmore</a> ★167</td>
<td>- VueJS的双向下拉刷新组件</td>
</tr>
<tr>
<td><a href="https://github.com/matfish2/vue-tables-2" target="_blank" rel="noopener">vue-tables-2 </a>★162</td>
<td>- 显示数据的bootstrap样式网格</td>
</tr>
<tr>
<td><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noopener">vue-virtual-scroller</a> ★158</td>
<td>- 带任意数目数据的顺畅的滚动</td>
</tr>
<tr>
<td><a href="https://github.com/SimonZhangITer/DataVisualization" target="_blank" rel="noopener">DataVisualization</a> ★149</td>
<td>- 数据可视化</td>
</tr>
<tr>
<td><a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">vue-quill-editor</a> ★149</td>
<td>- 基于Quill适用于Vue2的富文本编辑器</td>
</tr>
<tr>
<td><a href="https://github.com/hifarer/Vueditor" target="_blank" rel="noopener">Vueditor</a> ★138</td>
<td>- 所见即所得的编辑器</td>
</tr>
<tr>
<td><a href="https://github.com/PeakTai/vue-html5-editor" target="_blank" rel="noopener">vue-html5-editor</a> ★132</td>
<td>- html5所见即所得编辑器</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/vue-msgbox" target="_blank" rel="noopener">vue-msgbox</a> ★127</td>
<td>- vuejs的消息框</td>
</tr>
<tr>
<td><a href="https://github.com/warpcgd/vue-slider" target="_blank" rel="noopener">vue-slider</a> ★126</td>
<td>- vue 滑动组件</td>
</tr>
<tr>
<td><a href="https://github.com/Vanthink-UED/vue-core-image-upload" target="_blank" rel="noopener">vue-core-image-upload</a> ★124</td>
<td>- 轻量级的vue上传插件</td>
</tr>
<tr>
<td><a href="https://github.com/hilongjw/vue-slide" target="_blank" rel="noopener">vue-slide</a> ★121</td>
<td>- vue轻量级滑动组件</td>
</tr>
<tr>
<td><a href="https://github.com/JALBAA/vue-lazyload-img" target="_blank" rel="noopener">vue-lazyload-img</a> ★118</td>
<td>- 移动优化的vue图片懒加载插件</td>
</tr>
<tr>
<td><a href="https://github.com/Alex-fun/vue-drag-and-drop-list" target="_blank" rel="noopener">vue-drag-and-drop-list</a> ★114</td>
<td>- 创建排序列表的</td>
<td>Vue指令</td>
</tr>
<tr>
<td><a href="https://github.com/MatteoGabriele/vue-progressive-image" target="_blank" rel="noopener">vue-progressive-image</a> ★107</td>
<td>- Vue的渐进图像加载插件</td>
</tr>
<tr>
<td><a href="https://github.com/vuwe/vuwe" target="_blank" rel="noopener">vuwe</a> ★107</td>
<td>- 基于微信WeUI所开发的专用于Vue2的组件库</td>
</tr>
<tr>
<td><a href="https://github.com/rowanwins/vue-dropzone" target="_blank" rel="noopener">vue-dropzone</a> ★105</td>
<td>- 用于文件上传的Vue组件</td>
</tr>
<tr>
<td><a href="https://github.com/hchstera/vue-charts" target="_blank" rel="noopener">vue-charts</a> ★101</td>
<td>- 轻松渲染一个图表</td>
</tr>
<tr>
<td><a href="https://github.com/weilao/vue-swiper" target="_blank" rel="noopener">vue-swiper</a> ★95</td>
<td>- 易于使用的滑块组件</td>
</tr>
<tr>
<td><a href="https://github.com/littlewin-wang/vue-images" target="_blank" rel="noopener">vue-images</a> ★93</td>
<td>- 显示一组图片的lightbox组件</td>
</tr>
<tr>
<td><a href="https://github.com/Wlada/vue-carousel-3d" target="_blank" rel="noopener">vue-carousel-3d</a> ★91</td>
<td>- VueJS的3D轮播组件</td>
</tr>
<tr>
<td><a href="https://github.com/QingWei-Li/vue-region-picker" target="_blank" rel="noopener">vue-region-picker</a> ★89</td>
<td>- 选择中国的省份市和地区</td>
</tr>
<tr>
<td><a href="https://github.com/cngu/vue-typer" target="_blank" rel="noopener">vue-typer</a> ★89</td>
<td>- 模拟用户输入选择和删除文本的</td>
<td>Vue组件</td>
</tr>
<tr>
<td><a href="https://github.com/NewDadaFE/vue-impression" target="_blank" rel="noopener">vue-impression</a> ★88</td>
<td>- 移动Vuejs2 UI元素</td>
</tr>
<tr>
<td><a href="https://github.com/galenyuan/vue-datatable" target="_blank" rel="noopener">vue-datatable</a> ★87</td>
<td>- 使用Vuejs创建的DataTableView</td>
</tr>
<tr>
<td><a href="https://github.com/santiblanko/vue-instant" target="_blank" rel="noopener">vue-instant</a> ★86</td>
<td>- 轻松创建自动提示的自定义搜索控件</td>
</tr>
<tr>
<td><a href="https://github.com/hilongjw/vue-dragging" target="_blank" rel="noopener">vue-dragging</a> ★86</td>
<td>- 使元素可以拖拽</td>
</tr>
<tr>
<td><a href="https://github.com/NightCatSama/vue-slider-component" target="_blank" rel="noopener">vue-slider-component</a> ★85</td>
<td>- 在vue1和vue2中使用滑块</td>
</tr>
<tr>
<td><a href="https://github.com/BosNaufal/vue2-loading-bar" target="_blank" rel="noopener">vue2-loading-bar</a> ★76</td>
<td>- 最简单的仿Youtube加载条视图</td>
</tr>
<tr>
<td><a href="https://github.com/weifeiyue/vue-datepicker" target="_blank" rel="noopener">vue-datepicker</a> ★75</td>
<td>- 漂亮的Vue日期选择器组件</td>
</tr>
<tr>
<td><a href="https://github.com/hilongjw/vue-video" target="_blank" rel="noopener">vue-video</a> ★70</td>
<td>- Vue.js的HTML5视频播放器</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/vue-toast-mobile" target="_blank" rel="noopener">vue-toast-mobile</a> ★68</td>
<td>- VueJS的toast插件</td>
</tr>
<tr>
<td><a href="https://github.com/dai-siki/vue-image-crop-upload" target="_blank" rel="noopener">vue-image-crop-upload</a> ★67</td>
<td>- vue图片剪裁上传组件</td>
</tr>
<tr>
<td><a href="https://github.com/Akryum/vue-tooltip" target="_blank" rel="noopener">vue-tooltip</a> ★66</td>
<td>- 带绑定信息提示的提示工具</td>
</tr>
<tr>
<td><a href="https://github.com/weizhenye/vue-highcharts" target="_blank" rel="noopener">vue-highcharts</a> ★66</td>
<td>- HighCharts组件</td>
</tr>
<tr>
<td><a href="https://github.com/surmon-china/vue-touch-ripple" target="_blank" rel="noopener">vue-touch-ripple</a> ★62</td>
<td>- vuejs的触摸ripple组件,点击后的效果</td>
</tr>
<tr>
<td><a href="https://github.com/Kocisov/coffeebreak" target="_blank" rel="noopener">coffeebreak</a> ★61</td>
<td>- 实时编辑CSS组件工具</td>
</tr>
<tr>
<td><a href="https://github.com/coderdiaz/vue-datasource" target="_blank" rel="noopener">vue-datasource</a> ★60</td>
<td>- 创建VueJS动态表格</td>
</tr>
<tr>
<td><a href="https://github.com/phoenixwong/vue2-timepicker" target="_blank" rel="noopener">vue2-timepicker</a> ★60</td>
<td>- 下拉时间选择器</td>
</tr>
<tr>
<td><a href="https://github.com/Bubblings/vue-date-picker" target="_blank" rel="noopener">vue-date-picker</a> ★59</td>
<td>- VueJS日期选择器组件</td>
</tr>
<tr>
<td><a href="https://github.com/BosNaufal/vue-scrollbar" target="_blank" rel="noopener">vue-scrollbar</a> ★58</td>
<td>- 最简单的滚动区域组件</td>
</tr>
<tr>
<td><a href="https://github.com/CroudSupport/vue-quill" target="_blank" rel="noopener">vue-quill</a> ★56</td>
<td>- vue组件构建quill编辑器</td>
</tr>
<tr>
<td><a href="https://github.com/phanan/vue-google-signin-button" target="_blank" rel="noopener">vue-google-signin-button</a> ★55</td>
<td>- 导入谷歌登录按钮</td>
</tr>
<tr>
<td><a href="https://github.com/MMF-FE/vue-svgicon" target="_blank" rel="noopener">vue-svgico</a>n ★53</td>
<td>- 创建svg图标组件的工具</td>
</tr>
<tr>
<td><a href="https://github.com/bkzl/vue-float-label" target="_blank" rel="noopener">vue-float-label</a> ★49</td>
<td>- VueJS浮动标签模式</td>
</tr>
<tr>
<td><a href="https://github.com/Dafrok/vue-baidu-map" target="_blank" rel="noopener">vue-baidu-map</a> ★46</td>
<td>- 基于 Vue 2的百度地图组件库</td>
</tr>
<tr>
<td><a href="https://github.com/nicolasbeauvais/vue-social-sharing" target="_blank" rel="noopener">vue-social-sharing</a> ★45</td>
<td>- 社交分享组件</td>
</tr>
<tr>
<td><a href="https://github.com/davidroyer/vue2-editor" target="_blank" rel="noopener">vue2-editor</a> ★44</td>
<td>- HTML编辑器</td>
</tr>
<tr>
<td><a href="https://github.com/Ginhing/vue-tagsinput" target="_blank" rel="noopener">vue-tagsinput</a> ★41</td>
<td>- 基于VueJS的标签组件</td>
</tr>
<tr>
<td><a href="https://github.com/shhdgit/vue-easy-slider" target="_blank" rel="noopener">vue-easy-slider</a> ★41</td>
<td>- Vue 2.x的滑块组件</td>
</tr>
<tr>
<td><a href="https://github.com/vue-bulma/datepicker" target="_blank" rel="noopener">datepicker</a> ★38</td>
<td>- 基于flatpickr的时间选择组件</td>
</tr>
<tr>
<td><a href="https://github.com/miaolz123/vue-chart" target="_blank" rel="noopener">vue-chart</a> ★37</td>
<td>- 强大的高速的vue图表解析</td>
</tr>
<tr>
<td><a href="https://github.com/yunyi1895/vue-music-master" target="_blank" rel="noopener">vue-music-master</a> ★37</td>
<td>- vue手机端网页音乐播放器</td>
</tr>
<tr>
<td><a href="https://github.com/vue-bulma/handsontable" target="_blank" rel="noopener">handsontable</a> ★35</td>
<td>- 网页表格组件</td>
</tr>
<tr>
<td><a href="https://github.com/F-loat/vue-simplemde" target="_blank" rel="noopener">vue-simplemde</a> ★35</td>
<td>- VueJS的Markdown编辑器组件</td>
</tr>
<tr>
<td><a href="https://github.com/myronliu347/vue-popup-mixin" target="_blank" rel="noopener">vue-popup-mixin</a> ★35</td>
<td>- 用于管理弹出框的遮盖层</td>
</tr>
<tr>
<td><a href="https://github.com/fangyongbao/cubeex" target="_blank" rel="noopener">cubeex</a> ★33</td>
<td>- 包含一套完整的移动UI</td>
</tr>
<tr>
<td><a href="https://github.com/CroudSupport/vue-fullcalendar" target="_blank" rel="noopener">vue-fullcalendar</a> ★32</td>
<td>- vue FullCalendar封装</td>
</tr>
<tr>
<td><a href="https://github.com/loujiayu/vue-material-design" target="_blank" rel="noopener">vue-material-design</a> ★32</td>
<td>- Vue MD风格组件</td>
</tr>
<tr>
<td><a href="https://github.com/bbonnin/vue-morris" target="_blank" rel="noopener">vue-morris</a> ★31</td>
<td>- Vuejs组件封装Morrisjs库</td>
</tr>
<tr>
<td><a href="https://github.com/tianyong90/we-vue" target="_blank" rel="noopener">we-vue</a> ★30</td>
<td>- Vue2及weui1开发的组件</td>
</tr>
<tr>
<td><a href="https://github.com/legeneek/vue-image-clip" target="_blank" rel="noopener">vue-image-clip</a> ★29</td>
<td>- 基于vue的图像剪辑组件</td>
</tr>
<tr>
<td><a href="https://github.com/jbaysolutions/vue-bootstrap-table" target="_blank" rel="noopener">vue-bootstrap-table</a> ★29</td>
<td>- 可排序可检索的表格</td>
</tr>
<tr>
<td><a href="https://github.com/wyzant-dev/vue-radial-progress" target="_blank" rel="noopener">vue-radial-progress</a> ★28</td>
<td>- Vue.js放射性进度条组件</td>
</tr>
<tr>
<td><a href="https://github.com/staskjs/vue-slick" target="_blank" rel="noopener">vue-slick</a> ★28</td>
<td>- 实现流畅轮播框的vue组件</td>
</tr>
<tr>
<td><a href="https://github.com/bajian/vue-pull-to-refresh" target="_blank" rel="noopener">vue-pull-to-refresh</a> ★27</td>
<td>- Vue2的上拉下拉</td>
</tr>
<tr>
<td><a href="https://github.com/matfish2/vue-form-2" target="_blank" rel="noopener">vue-form-2</a> ★26</td>
<td>- 全面的HTML表单管理的解决方案</td>
</tr>
<tr>
<td><a href="https://github.com/vue-comps/vue-side-nav" target="_blank" rel="noopener">vue-side-nav</a> ★26</td>
<td>- 响应式的侧边导航 (这个一般)</td>
</tr>
<tr>
<td><a href="https://github.com/mint-ui/mint-indicator" target="_blank" rel="noopener">mint-indicator</a> ★26</td>
<td>- VueJS移动加载指示器插件 (没有demo不知道干啥的)</td>
</tr>
<tr>
<td><a href="https://github.com/vue-bulma/chartjs" target="_blank" rel="noopener">chartjs</a> ★24</td>
<td>- Vue Bulma的chartjs组件 (这是组件之一 很少单独用)</td>
</tr>
<tr>
<td><a href="https://github.com/suguangwen/vue-scroll" target="_blank" rel="noopener">vue-scroll</a> ★24</td>
<td>- vue滚动</td>
</tr>
<tr>
<td><a href="https://github.com/BosNaufal/vue-ripple" target="_blank" rel="noopener">vue-ripple</a> ★24</td>
<td>- 制作谷歌MD风格涟漪效果的Vue组件 (这跟上面的点击效果一样)</td>
</tr>
<tr>
<td><a href="https://github.com/icebob/vue-touch-keyboard" target="_blank" rel="noopener">vue-touch-keyboard</a> ★22</td>
<td>- VueJS虚拟键盘组件 (这个有点意思)</td>
</tr>
<tr>
<td><a href="https://github.com/ankane/vue-chartkick" target="_blank" rel="noopener">vue-chartkick</a> ★22</td>
<td>- VueJS一行代码实现优美图表</td>
</tr>
<tr>
<td><a href="https://github.com/lisiyizu/vue-ztree" target="_blank" rel="noopener">vue-ztree</a> ★21</td>
<td>- 用 vue 写的树层级组件</td>
</tr>
<tr>
<td><a href="https://github.com/shiye515/vue-m-carousel" target="_blank" rel="noopener">vue-m-carousel</a> ★20</td>
<td>- vue 移动端轮播组件 (这个很一般 参考学习还行)</td>
</tr>
<tr>
<td><a href="https://github.com/dai-siki/vue-datepicker-simple" target="_blank" rel="noopener">vue-datepicker-simple</a> ★20</td>
<td>- 基于Vue的日期选择器</td>
</tr>
<tr>
<td><a href="https://github.com/alexqdjay/vue-tabs" target="_blank" rel="noopener">vue-tabs</a> ★20</td>
<td>- 多tab页轻型框架</td>
</tr>
<tr>
<td><a href="https://github.com/aweiu/vue-verify-pop" target="_blank" rel="noopener">vue-verify-pop</a> ★19</td>
<td>- 带气泡提示的Vue校验插件</td>
</tr>
<tr>
<td><a href="https://github.com/vue-comps/vue-parallax" target="_blank" rel="noopener">vue-parallax</a> ★15</td>
<td>- 整洁的视觉效果</td>
</tr>
<tr>
<td><a href="https://github.com/JackGit/vue-img-loader" target="_blank" rel="noopener">vue-img-loader</a> ★14</td>
<td>- 图片加载UI组件 (应该是不好用)</td>
</tr>
<tr>
<td><a href="https://github.com/eduardostuart/vue-typewriter" target="_blank" rel="noopener">vue-typewriter</a> ★13</td>
<td>- vue组件类型</td>
</tr>
<tr>
<td><a href="https://github.com/Teddy-Zhu/vue-smoothscroll" target="_blank" rel="noopener">vue-smoothscrol</a>l ★12</td>
<td>- smoothscroll的VueJS版本</td>
</tr>
<tr>
<td><a href="https://github.com/xinxingyu/vue-city" target="_blank" rel="noopener">vue-city</a> ★10</td>
<td>- 城市选择器 (这个不错)</td>
</tr>
<tr>
<td><a href="https://github.com/weibangtuo/vue-tree" target="_blank" rel="noopener">vue-tree</a> ★10</td>
<td>- vue树视图组件 (这个不错)</td>
</tr>
<tr>
<td><a href="https://github.com/Treri/vue-ios-alertview" target="_blank" rel="noopener">vue-ios-alertview</a> ★8</td>
<td>- iOS7+ 风格的alertview服务</td>
</tr>
<tr>
<td><a href="https://github.com/ibufu/dd-vue-component" target="_blank" rel="noopener">dd-vue-component</a> ★7</td>
<td>- 订单来了的公共组件库</td>
</tr>
<tr>
<td><a href="https://github.com/yeseason/paco-ui-vue" target="_blank" rel="noopener">paco-ui-vue</a> ★7</td>
<td>- PACOUI的vue组件</td>
</tr>
<tr>
<td><a href="https://github.com/doodlewind/vue-cmap" target="_blank" rel="noopener">vue-cmap</a> ★5</td>
<td>- Vue China map可视化组件</td>
</tr>
<tr>
<td><a href="https://github.com/steven5538/vue-button" target="_blank" rel="noopener">vue-button</a> ★4</td>
<td>- Vue按钮组件</td>
</tr>
</tbody>
</table>
<h2 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue.js</a> ★45466</td>
<td>- 流行的轻量高效的前端组件化方案</td>
</tr>
<tr>
<td><a href="https://github.com/fundon/vue-admin" target="_blank" rel="noopener">vue-admin</a> ★3222</td>
<td>- Vue管理面板框架</td>
</tr>
<tr>
<td><a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">electron-vue</a> ★1273</td>
<td>- Electron及VueJS快速启动样板</td>
</tr>
<tr>
<td><a href="https://github.com/petervmeijgaard/vue-2.0-boilerplate" target="_blank" rel="noopener">vue-2.0-boilerplate</a> ★241</td>
<td>- Vue2单页应用样板​</td>
</tr>
<tr>
<td><a href="https://github.com/hanan198501/vue-spa-template" target="_blank" rel="noopener">vue-spa-template</a> ★223</td>
<td>- 前后端分离后的单页应用开发</td>
</tr>
<tr>
<td><a href="https://github.com/nolimits4web/Framework7-Vue" target="_blank" rel="noopener">Framework7-Vue</a> ★210</td>
<td>- VueJS与Framework7结合</td>
</tr>
<tr>
<td><a href="https://github.com/wangxg2016/vue-bulma" target="_blank" rel="noopener">vue-bulma</a> ★132</td>
<td>- 轻量级高性能MVVM Admin UI框架</td>
</tr>
<tr>
<td><a href="https://github.com/rodzzlessa24/vue-webgulp" target="_blank" rel="noopener">vue-webgulp</a> ★100</td>
<td>- 仿VueJS Vue loader示例</td>
</tr>
<tr>
<td><a href="https://github.com/Metnew/vue-element-starter" target="_blank" rel="noopener">vue-element-starter</a> ★34</td>
<td>- vue启动页</td>
</tr>
</tbody>
</table>
<h2 id="实用库"><a href="#实用库" class="headerlink" title="实用库"></a>实用库</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">vuex</a> ★5997</td>
<td>- 专为 Vue.js 应用程序开</td>
<td>发的状态管理模式</td>
</tr>
<tr>
<td><a href="https://github.com/monterail/vuelidate" target="_blank" rel="noopener">vuelidate</a> ★750</td>
<td>- 简单轻量级的基于模块的Vue.js验证</td>
</tr>
<tr>
<td><a href="https://github.com/zerqu/qingcheng" target="_blank" rel="noopener">qingcheng</a> ★677</td>
<td>- qingcheng主题 (不知道这个是干啥用的)</td>
</tr>
<tr>
<td><a href="https://github.com/ElemeFE/vue-desktop" target="_blank" rel="noopener">vue-desktop</a> ★461</td>
<td>- 创建管理面板网站的UI库 (演示网站都没了 唉)</td>
</tr>
<tr>
<td><a href="https://github.com/declandewet/vue-meta" target="_blank" rel="noopener">vue-meta</a> ★257</td>
<td>- 管理app的meta信息</td>
</tr>
<tr>
<td><a href="https://github.com/imcvampire/vue-axios" target="_blank" rel="noopener">vue-axios</a> ★209</td>
<td>- 将axios整合到</td>
<td>VueJS的封装</td>
</tr>
<tr>
<td><a href="https://github.com/cenkai88/vue-svg-icon" target="_blank" rel="noopener">vue-svg-icon</a> ★116</td>
<td>- vue2的可变彩色svg图标方案</td>
</tr>
<tr>
<td><a href="https://github.com/eddyerburgh/avoriaz" target="_blank" rel="noopener">avoriaz</a> ★110</td>
<td>- VueJS测试实用工具库</td>
</tr>
<tr>
<td><a href="https://github.com/lmk123/vue-framework7" target="_blank" rel="noopener">vue-framework7</a> ★83</td>
<td>- 结合VueJS使用的Framework7组件</td>
</tr>
<tr>
<td><a href="https://github.com/Coffcer/vue-bootstrap-modal" target="_blank" rel="noopener">vue-bootstrap-modal</a> ★78</td>
<td>- vue的Bootstrap样式组件</td>
</tr>
<tr>
<td><a href="https://github.com/QingWei-Li/vuep" target="_blank" rel="noopener">vuep</a> ★72</td>
<td>- 用实时编辑和预览来渲染Vue组件</td>
</tr>
<tr>
<td><a href="https://github.com/Sopamo/vue-online" target="_blank" rel="noopener">vue-online</a> ★67</td>
<td>- reactive的在线和离线组件</td>
</tr>
<tr>
<td><a href="https://github.com/yeyuqiudeng/vue-lazy-render" target="_blank" rel="noopener">vue-lazy-render</a> ★66</td>
<td>- 用于Vue组件的延迟渲染</td>
</tr>
<tr>
<td><a href="https://github.com/apertureless/vue-password-strength-meter" target="_blank" rel="noopener">vue-password-strength-meter</a> ★65</td>
<td>- 交互式密码强度计 (这个不错)</td>
</tr>
<tr>
<td><a href="https://github.com/lynzz/element-admin" target="_blank" rel="noopener">element-admin</a> ★57</td>
<td>- 支持 vuecli 的 Element UI 的后台模板</td>
</tr>
<tr>
<td><a href="https://github.com/SimulatedGREG/vue-electron" target="_blank" rel="noopener">vue-electron</a> ★55</td>
<td>- 将选择的API封装到Vue对象中的插件</td>
</tr>
<tr>
<td><a href="https://github.com/vue-bulma/cleave" target="_blank" rel="noopener">vue-cleave</a> ★55</td>
<td>- 基于cleave.js的Cleave组件 <a href="http://nosir.github.io/cleave.js/" target="_blank" rel="noopener">cleave.js演示</a></td>
</tr>
<tr>
<td><a href="https://github.com/cklmercer/vue-events" target="_blank" rel="noopener">vue-events</a> ★54</td>
<td>- 简化事件的VueJS插件</td>
</tr>
<tr>
<td><a href="https://github.com/iFgR/vue-shortkey" target="_blank" rel="noopener">vue-shortkey</a> ★53</td>
<td>- 应用于Vue.js的Vue-ShortKey 插件</td>
</tr>
<tr>
<td><a href="https://github.com/kartsims/vue-cordova" target="_blank" rel="noopener">vue-cordova</a> ★50</td>
<td>- Cordova的VueJS插件</td>
</tr>
<tr>
<td><a href="https://github.com/mlyknown/vue-gesture" target="_blank" rel="noopener">vue-gesture</a> ★48</td>
<td>- VueJS的手势事件插件</td>
</tr>
<tr>
<td><a href="https://github.com/FranckFreiburger/http-vue-loader" target="_blank" rel="noopener">http-vue-loader</a> ★46</td>
<td>- 从html及js环境加载vue文件</td>
</tr>
<tr>
<td><a href="https://github.com/superman66/vue-qart" target="_blank" rel="noopener">vue-qart</a> ★46</td>
<td>- 用于qartjs的Vue2指令 生成二维码的</td>
</tr>
<tr>
<td><a href="https://github.com/gocanto/vuemit" target="_blank" rel="noopener">vuemit</a> ★44</td>
<td>- 处理VueJS事件</td>
</tr>
<tr>
<td><a href="https://github.com/icebob/vue-websocket" target="_blank" rel="noopener">vue-websocket</a> ★42</td>
<td>- VueJS的Websocket插件</td>
</tr>
<tr>
<td><a href="https://github.com/pinguinjkeke/vue-local-storage" target="_blank" rel="noopener">vue-local-storage</a> ★41</td>
<td>- 具有类型支持的Vuejs本地储存插件</td>
</tr>
<tr>
<td><a href="https://github.com/ropbla9/vue-reactive-storage" target="_blank" rel="noopener">vue-reactive-storage</a> ★35</td>
<td>- vue插件的Reactive层,也是处理storage的</td>
</tr>
<tr>
<td><a href="https://github.com/se-panfilov/vue-notifications" target="_blank" rel="noopener">vue-notifications</a> ★32</td>
<td>- 非阻塞 通知提示信息 库</td>
</tr>
<tr>
<td><a href="https://github.com/Coffcer/vue-lazy-component" target="_blank" rel="noopener">vue-lazy-component</a> ★32</td>
<td>- 懒加载组件或者元素的Vue指令</td>
</tr>
<tr>
<td><a href="https://github.com/AStaroverov/v-media-query" target="_blank" rel="noopener">v-media-query</a> ★32</td>
<td>- vue中添加用于配合媒体查询的方法,  (其实是检测屏幕是否改变做出相应动作)</td>
</tr>
<tr>
<td><a href="https://github.com/dkfbasel/vuex-i18n" target="_blank" rel="noopener">vuex-i18n</a> ★26</td>
<td>- 定位插件  (这应该是多语言话的工具)</td>
</tr>
<tr>
<td><a href="https://github.com/David-Desmaisons/Vue.resize" target="_blank" rel="noopener">Vue.resize</a> ★26</td>
<td>- 检测HTML调整大小事件的vue指令</td>
</tr>
<tr>
<td><a href="https://github.com/xanf/vuex-shared-mutations" target="_blank" rel="noopener">vuex-shared-mutations</a> ★25</td>
<td>- 分享某种Vuex mutations (这不太懂)</td>
</tr>
<tr>
<td><a href="https://github.com/BosNaufal/vue-file-base64" target="_blank" rel="noopener">vue-file-base64</a> ★16</td>
<td>- 将文件转换为Base64的vue组件</td>
</tr>
<tr>
<td><a href="https://github.com/imcvampire/vue-truncate-filter" target="_blank" rel="noopener">vue-truncate-filter</a> ★9</td>
<td>- 截断字符串的VueJS过滤器</td>
</tr>
<tr>
<td><a href="https://github.com/syropian/vue-input-autowidth" target="_blank" rel="noopener">vue-input-autowidth</a> ★5</td>
<td>- 基于内容自动调整文本输入的大小</td>
</tr>
<tr>
<td><a href="https://github.com/yodfz/vue-lazyloadImg/blob/master/README.CN.md" target="_blank" rel="noopener">vue-lazyloadImg</a> ★3</td>
<td>- 图片懒加载插件</td>
</tr>
</tbody>
</table>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">nuxt.js</a> ★2743</td>
<td>- 用于服务器渲染Vue app的最小化框架</td>
</tr>
<tr>
<td><a href="https://github.com/danmademe/express-vue" target="_blank" rel="noopener">express-vue</a> ★137</td>
<td>- 简单的使用服务器端渲染vue.js</td>
</tr>
<tr>
<td><a href="https://github.com/ccforward/vue-ssr" target="_blank" rel="noopener">Vue.js SSR Template</a> ★67</td>
<td>- 非常简单的VueJS服务器端渲染模板</td>
</tr>
</tbody>
</table>
<h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/MiCottOn/DejaVue" target="_blank" rel="noopener">DejaVue</a> ★543</td>
<td>- Vuejs可视化及压力测试</td>
</tr>
<tr>
<td><a href="https://github.com/vue-play/vue-play" target="_blank" rel="noopener">vue-play</a> ★445</td>
<td>- 展示Vue组件的最小化框架</td>
</tr>
<tr>
<td><a href="https://github.com/OYsun/vscode-VueHelper" target="_blank" rel="noopener">vscode-VueHelper</a> ★185</td>
<td>- 目前vscode最好的vue代码提示插件</td>
</tr>
<tr>
<td><a href="https://github.com/NetanelBasal/vue-generate-component" target="_blank" rel="noopener">vue-generate-component</a> ★39</td>
<td>- 轻松生成Vue js组件的CLI工具</td>
</tr>
<tr>
<td><a href="https://github.com/xwpongithub/vue-multipage-cli" target="_blank" rel="noopener">vue-multipage-cli</a> ★33</td>
<td>- 简单的多页CLI</td>
</tr>
</tbody>
</table>
<h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/phanan/koel" target="_blank" rel="noopener">koel</a> ★7175</td>
<td>- 基于网络的个人音频流媒体服务</td>
</tr>
<tr>
<td><a href="https://github.com/pagekit/pagekit" target="_blank" rel="noopener">pagekit</a> ★4021</td>
<td>- 轻量级的CMS建站系统</td>
</tr>
<tr>
<td><a href="https://github.com/Vuedo/vuedo" target="_blank" rel="noopener">vuedo</a> ★1040</td>
<td>- 博客平台</td>
</tr>
<tr>
<td><a href="https://github.com/jackhutu/jackblog-vue" target="_blank" rel="noopener">jackblog-vue</a> ★943</td>
<td>- 个人博客系统</td>
</tr>
<tr>
<td><a href="https://github.com/lzxb/vue-cnode" target="_blank" rel="noopener">vue-cnode</a> ★597</td>
<td>- 重写vue版cnode社区</td>
</tr>
<tr>
<td><a href="https://github.com/ycwalker/CMS-of-Blog" target="_blank" rel="noopener">CMS-of-Blog</a> ★405</td>
<td>- 博客内容管理器</td>
</tr>
<tr>
<td><a href="https://github.com/ciqulover/CMS-of-Blog" target="_blank" rel="noopener">rss-reader</a> ★326</td>
<td>- 简单的rss阅读器</td>
</tr>
<tr>
<td><a href="https://github.com/ciqulover/CMS-of-Blog" target="_blank" rel="noopener">vue-ghpages-blog</a> ★208</td>
<td>- 依赖GitHub Pages无需本地生成的静态博客</td>
</tr>
<tr>
<td><a href="https://github.com/wh469012917/swoole-vue-webim" target="_blank" rel="noopener">swoole-vue-webim</a> ★97</td>
<td>- Web版的聊天应用</td>
</tr>
<tr>
<td><a href="https://github.com/surmon-china/surmon.me" target="_blank" rel="noopener">vue-blog</a> ★33</td>
<td>- 使用Vue2.0 和Vuex的vue-blog</td>
</tr>
</tbody>
</table>
<h2 id="Demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/shinygang/Vue-cnodejs" target="_blank" rel="noopener">Vue-cnodejs</a> ★2113</td>
<td>- 基于vue重写Cnodejs.org的webapp</td>
</tr>
<tr>
<td><a href="https://github.com/javaSwing/NeteaseCloudWebApp" target="_blank" rel="noopener">NeteaseCloudWebApp</a> ★1154</td>
<td>- 高仿网易云音乐的webapp</td>
</tr>
<tr>
<td><a href="https://github.com/hilongjw/vue-zhihu-daily" target="_blank" rel="noopener">vue-zhihu-daily</a> ★875</td>
<td>- 知乎日报 with Vuejs</td>
</tr>
<tr>
<td><a href="https://github.com/useryangtao/vue-wechat" target="_blank" rel="noopener">vue-wechat</a> ★732</td>
<td>- vue.js开发微信app界面</td>
</tr>
<tr>
<td><a href="https://github.com/lzxb/vue2-demo" target="_blank" rel="noopener">vue2-demo</a> ★699</td>
<td>- 从零构建vue2 + vue-router + vuex 开发环境</td>
</tr>
<tr>
<td><a href="https://github.com/liangxiaojuan/eleme" target="_blank" rel="noopener">eleme</a> ★612</td>
<td>- 高仿饿了么app商家详情</td>
</tr>
<tr>
<td><a href="https://github.com/kenberkeley/vue-demo" target="_blank" rel="noopener">vue-demo</a> ★575</td>
<td>- vue简易留言板</td>
</tr>
<tr>
<td><a href="https://github.com/zhengguorong/maizuo" target="_blank" rel="noopener">maizuo</a> ★498</td>
<td>- vue/vuex/redux仿卖座网</td>
</tr>
<tr>
<td><a href="https://github.com/Sioxas/vue-music" target="_blank" rel="noopener">vue-music</a> ★485</td>
<td>- Vue 音乐搜索播放</td>
</tr>
<tr>
<td><a href="https://github.com/liangxiaojuan/vue-Meizi" target="_blank" rel="noopener">vue-Meizi</a> ★394</td>
<td>- vue最新实战项目</td>
</tr>
<tr>
<td><a href="https://github.com/yatessss/zhihudaily-vue" target="_blank" rel="noopener">zhihudaily-vue</a> ★386</td>
<td>- 知乎日报web版</td>
</tr>
<tr>
<td><a href="https://github.com/lavyun/vue-demo-kugouom/yatessss/zhihudaily-vue" target="_blank" rel="noopener">vue-demo-kugou</a> ★310</td>
<td>- vuejs仿写酷狗音乐webapp</td>
</tr>
<tr>
<td><a href="https://github.com/canfoo/vue2.0-taopiaopiao" target="_blank" rel="noopener">vue2.0-taopiaopiao</a> ★246</td>
<td>- vue2.0与express构建淘票票页面</td>
</tr>
<tr>
<td><a href="https://github.com/jiangjiu/vue-leancloud-blogom/canfoo/vue2.0-taopiaopiao" target="_blank" rel="noopener">vue-leancloud-blog</a> ★239</td>
<td>- 一个前后端完全分离的单页应用</td>
</tr>
<tr>
<td><a href="https://github.com/superman66/vue2.x-douban" target="_blank" rel="noopener">vue2.x-douban</a> ★188</td>
<td>- Vue2实现简易豆瓣电影webApp</td>
</tr>
<tr>
<td><a href="https://github.com/ChuckCZC/vue-demo-maizuo" target="_blank" rel="noopener">vue-demo-maizuo</a> ★188</td>
<td>- 使用Vue2全家桶仿制卖座电影</td>
</tr>
<tr>
<td><a href="https://github.com/liujians/vue-adminLte-vue-router" target="_blank" rel="noopener">vue-adminLte-vue-router</a> ★162</td>
<td>- vue和adminLte整合应用</td>
</tr>
<tr>
<td><a href="https://github.com/superman66/vue-axios-github" target="_blank" rel="noopener">vue-axios-github</a> ★157</td>
<td>- 登录拦截登出功能</td>
</tr>
<tr>
<td><a href="https://github.com/pomelo-chuan/Zhihu-Daily-Vue.js" target="_blank" rel="noopener">Zhihu-Daily-Vue.js</a> ★134</td>
<td>- Vuejs单页网页应用</td>
</tr>
<tr>
<td><a href="https://github.com/CommanderXL/x-blog" target="_blank" rel="noopener">x-blog</a> ★100</td>
<td>- 开源的个人blog项目</td>
</tr>
<tr>
<td><a href="https://github.com/xrr2016/vue-express-mongodb" target="_blank" rel="noopener">vue-express-mongodb</a> ★96</td>
<td>- 简单的前后端分离案例</td>
</tr>
<tr>
<td><a href="https://github.com/secreter/websocket_chat" target="_blank" rel="noopener">websocket_chat</a> ★91</td>
<td>- 基于vue和websocket的多人在线聊天室</td>
</tr>
<tr>
<td><a href="https://github.com/beidan/photoShare" target="_blank" rel="noopener">photoShare</a> ★85</td>
<td>- 基于图片分享的社交平台</td>
</tr>
<tr>
<td><a href="https://github.com/lin-xin/notepad" target="_blank" rel="noopener">notepad</a> ★77</td>
<td>- 本地存储的记事本</td>
</tr>
<tr>
<td><a href="https://github.com/elva2596/vueBlog" target="_blank" rel="noopener">vueBlog</a> ★75</td>
<td>- 前后端分离博客</td>
</tr>
<tr>
<td><a href="https://github.com/hql123/vue-ruby-china" target="_blank" rel="noopener">vue-ruby-china</a> ★70</td>
<td>- VueJS框架搭建的rubychina平台</td>
</tr>
<tr>
<td><a href="https://github.com/littlewin-wang/Zhihu_Daily" target="_blank" rel="noopener">Zhihu_Daily</a> ★70</td>
<td>- 基于Vue和Nodejs的Web单页应用</td>
</tr>
<tr>
<td><a href="https://github.com/Molunerfinn/vue-koa-demo" target="_blank" rel="noopener">vue-koa-demo</a> ★60</td>
<td>- 使用Vue2和Koa1的全栈demo</td>
</tr>
<tr>
<td><a href="https://github.com/vincentSea/vue2.x-Cnode" target="_blank" rel="noopener">vue2.x-Cnode</a> ★50</td>
<td>- 基于vue全家桶的Cnode社区</td>
</tr>
<tr>
<td><a href="https://github.com/WebCodeFarmer/houtai" target="_blank" rel="noopener">houtai</a> ★44</td>
<td>- 基于vue和Element的后台管理系统</td>
</tr>
<tr>
<td><a href="https://github.com/zhoou/vue-cli-multipage-bootstrap" target="_blank" rel="noopener">vue-cli-multipage-bootstrap</a> ★36</td>
<td>- 将vue官方在线示例整合到组件中</td>
</tr>
<tr>
<td><a href="https://github.com/GitaiQAQ/HyaReader" target="_blank" rel="noopener">HyaReader</a> ★30</td>
<td>- 移动友好的阅读器</td>
</tr>
<tr>
<td><a href="https://github.com/xrr2016/zhihu-daily" target="_blank" rel="noopener">zhihu-daily</a> ★28</td>
<td>- 轻松查看知乎日报内容</td>
</tr>
<tr>
<td><a href="https://github.com/Alex-xd/seeMusic" target="_blank" rel="noopener">seeMusic</a> ★27</td>
<td>- 跨平台云音乐播放器</td>
</tr>
<tr>
<td><a href="https://github.com/Damonlw/vue-cnode" target="_blank" rel="noopener">vue-cnode</a> ★22</td>
<td>- 使用cNode社区提供的接口</td>
</tr>
<tr>
<td><a href="https://github.com/sailengsi/sls-vuex2-demo" target="_blank" rel="noopener">sls-vuex2-demo</a> ★20</td>
<td>- vuex2商城购物车demo</td>
</tr>
<tr>
<td><a href="https://github.com/youknowznm/vue-memo" target="_blank" rel="noopener">vue-memo</a> ★7</td>
<td>- 用 vue写的记事本应用</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[电商产品的SKU是什么意思]]></title>
      <url>http://elickzhao.github.io/2017/08/%E7%94%B5%E5%95%86%E4%BA%A7%E5%93%81%E7%9A%84SKU%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
      <content type="html"><![CDATA[<p>spu 和 sku 都是属性值的集合, 举个栗子</p>
<p>一部 6S, 它身上有很多的属性和值. 比如 :</p>
<ul>
<li>毛重: 420.00 g</li>
<li>产地: 中国大陆</li>
<li>容量: 16G, 64G, 128G</li>
<li>颜色: 银, 白, 玫瑰金</li>
</ul>
<p>你跑进苏宁顺电, 说想要一台 6S, 店员也会再继续问: 你想要什么 6S? 16G 银色? 64G 白色?</p>
<blockquote>
<p>每一台 6S 的毛重都是 420.00 g, 产地也都是 中国大陆. 这两个属性就属于 spu 属性.</p>
<p>而容量和颜色, 这种会影响价格和库存的(比如 16G 与 64G 的价格不同, 16G 银色还有货, 金色卖完了)属性就是 sku 属性.</p>
</blockquote>
<p><strong>spu 属性(不会影响到库存和价格的属性, 又叫关键属性)</strong></p>
<ul>
<li>毛重: 420.00 g</li>
<li>产地: 中国大陆</li>
</ul>
<p><strong>sku 属性(会影响到库存和价格的属性, 又叫销售属性)</strong></p>
<ul>
<li>容量: 16G, 64G, 128G</li>
<li>颜色: 银, 白, 玫瑰金</li>
</ul>
<p>sku 在生成时, 会根据 属性生成 相应的 笛卡尔积.<br>想像一下扑克牌的黑红梅方和 A-K, 扑克牌是这样的 sku 属性:</p>
<ul>
<li>牌面: A - K</li>
<li>花色: 黑红梅方</li>
</ul>
<p><strong>最终会生成 13 <em> 4 = 52 张牌, 上面的 6S 则会生成 3 </em> 3 = 9 个</strong></p>
<blockquote>
<p>SKU商品 : iphone 6s<br>spu : 包含在每一部 6s 的属性集合, 与商品是一对一的关系(产地:中国, 毛重:420g…)<br>sku : 影响价格和库存的 属性集合, 与商品是多对一的关系<br>单品 : 同 sku. 国人的另一种叫法!</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 小百科,杂学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端动画及绘画插件总结]]></title>
      <url>http://elickzhao.github.io/2017/08/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E5%8F%8A%E7%BB%98%E7%94%BB%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://two.js.org/" target="_blank" rel="noopener">two.js</a></td>
<td>一个渲染器无关的适用于 web 的二维绘图 api 。</td>
</tr>
<tr>
<td><a href="https://two.js.org/" target="_blank" rel="noopener">paper.js</a></td>
<td>是矢量图形脚本中的瑞士军刀 —— 使用 HTML5 Canvas 将 Scriptographer 移植到 JavaScript和浏览器</td>
</tr>
<tr>
<td><a href="https://threejs.org/" target="_blank" rel="noopener">three.js</a></td>
<td>这没的说了,js里绘制3D的老大,只要技术强可以绘制各种东西,并且能做小游戏</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SPA和SSR开发模式简介]]></title>
      <url>http://elickzhao.github.io/2017/08/SPA%E5%92%8CSSR%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><strong>SPA:</strong> SPA (Single-Page App) 单页面应用模式<br><strong>SSR:</strong> 意为 Server Side Rendering（服务端渲染）前后端都各自有自己的开发流程，构建工具，测试集合等等。前后端仅仅通过接口来编程，这个接口可能是JSON格式的RESTFul的接口，也可能是XML的，重点是后台只负责数据的提供和计算，而完全不处理展现。而前端则负责拿到数据，组织数据并展现的工作。这样结构清晰，关注点分离，前后端会变得相对独立并松耦合。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://icodeit.org/2015/06/whats-next-after-separate-frontend-and-backend/" target="_blank" rel="noopener">前后端分离了，然后呢？</a><br><a href="http://blog.jobbole.com/65513/" target="_blank" rel="noopener">前后端分离的思考与实践（一）</a></p>
<hr>
<p><a href="http://web.jobbole.com/86558/" target="_blank" rel="noopener">如何快速开发SPA应用</a><br><a href="https://segmentfault.com/a/1190000000607661" target="_blank" rel="noopener">一种SPA（单页面应用）架构</a><br><a href="https://www.zhihu.com/question/25273968/answer/54004216" target="_blank" rel="noopener">单页面(SPA)开发会不会比多页面有更多的安全问题？</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[API开发接口管理及mock数据]]></title>
      <url>http://elickzhao.github.io/2017/08/API%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%8F%8Amock%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>这里总结了一些开发前后端分离,对于开发API的管理.不仅可以在没有后端搭建成的时候mock数据.<br>而且可以管理接口及版本,并生成文档.这为开发及后续整理提供很大的方便.</p>
<table>
<thead>
<tr>
<th>网站</th>
<th>具有的特色</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://doclever.cn/project/project.html" target="_blank" rel="noopener">DOClever</a></td>
<td>这个平台有很好的介绍用的都是视频真是太贴心了<a href="http://doclever.cn/help/help.html" target="_blank" rel="noopener">教程</a>.而且可以管理团队,项目分配,模拟数据,测试接口,版本管理.真的是功能十分丰富,这个也可以导入<a href="http://editor.swagger.io/" target="_blank" rel="noopener">Swagger</a>,只要导出json文件 当创建项目时导入就可以了,但现在只能复制导入,导入文件总说错</td>
</tr>
<tr>
<td><a href="http://www.easy-mock.com/project/5995ae24059b9c566dc5145f" target="_blank" rel="noopener">Easy Mock</a></td>
<td>这个也很好,虽然没有那么多功能.但是对于开发是测试数据已经足够了.还可以配合<a href="https://www.gitbook.com/book/huangwenchao/swagger/details" target="_blank" rel="noopener">Swagger</a>来管理API接口</td>
</tr>
<tr>
<td><a href="http://eoapi.coobar.cn/#/home/project/api" target="_blank" rel="noopener">eoApi</a></td>
<td>是简化版的eolinker.也是同样的不清不楚.可能他们有自己一套API开发逻辑吧,搞不懂.有数据字典结果跟接口一毛钱关系没有.而且没有mock数据.这个都不如上面两个好用</td>
</tr>
<tr>
<td><a href="https://www.eolinker.com/#/home/project/api" target="_blank" rel="noopener">eolinker</a></td>
<td>这个也还行,自带数据库管理.可能会根据数据库来对接口进行操作吧.功能也是十分强大.但是模拟数据这一块让人摸不着头脑.还有就是本地测试需要插件,文档教程不清.上手复杂一些.还有一点是收费,以后可能功能受到限制.但是有接口市场可以简化一些操作比如连接微信什么的</td>
</tr>
<tr>
<td><a href="http://rapapi.org/org/index.do" target="_blank" rel="noopener">RAP</a></td>
<td>功能也非常强大,但是操作有点反人类,还有就是服务器不是独立的经常会慢或者崩溃.不太推荐</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些应该知道的php框架]]></title>
      <url>http://elickzhao.github.io/2017/08/%E4%B8%80%E4%BA%9B%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84php%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://laravel-china.org/" target="_blank" rel="noopener">laravel/lumen</a></td>
<td>这是我目前在研究和用的 laravel擅长主流网站 lumen是微框架适合做API后台</td>
</tr>
<tr>
<td><a href="http://www.swoole.com/" target="_blank" rel="noopener">Swoole</a></td>
<td>C扩展实现的PHP异步并行网络通信框架，可以重新定义PHP。过去PHP只能做Web项目，现在有了Swoole。任意服务器端程序都可以用PHP来写。</td>
</tr>
<tr>
<td><a href="http://www.workerman.net/" target="_blank" rel="noopener">workerman</a></td>
<td>类似swoole，不过是纯PHP实现的，官网有很多示例项目。底层功能比swoole少一些，但相对简单，应用层面的功能比swoole丰富。</td>
</tr>
<tr>
<td><a href="http://www.slimphp.net/" target="_blank" rel="noopener">Slim</a></td>
<td>Slim是一款 PHP 微框架，可以帮助你快速编写简单但功能强大的 web 应用和 API</td>
</tr>
<tr>
<td><a href="https://silex.symfony.com/" target="_blank" rel="noopener">silex</a></td>
<td>Silex:基于Symfony组件的微型框架</td>
</tr>
</tbody>
</table>
<h2 id="一些文章"><a href="#一些文章" class="headerlink" title="一些文章"></a>一些文章</h2><p><a href="https://my.oschina.net/matyhtf/blog/338800" target="_blank" rel="noopener">PHP的异步Web服务器+异步Redis客户端</a><br><a href="http://www.jianshu.com/p/bba4239c7c03" target="_blank" rel="noopener">《使用php轻框架－lumen搭建api服务》</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swagger简介]]></title>
      <url>http://elickzhao.github.io/2017/08/Swagger%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>主要看这篇文章就行了 <a href="https://www.gitbook.com/book/huangwenchao/swagger/details" target="_blank" rel="noopener">Swagger从入门到精通</a> 虽然可能有些地方可能有老了,没讲到不过还是很实用,而且非常细致.</p>
<p>剩下的看编辑器事例就好了,一下子就能看懂了 <a href="http://editor.swagger.io/" target="_blank" rel="noopener">官方在线编辑器</a></p>
<p><strong>记录点一:</strong></p>
<p>当请求操作时,有两种方式一种是路径请求,另一种是参数请求.两种表现形式不同.</p>
<p><strong>参数请求</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get(请求方式) /persons?pageSize=20&amp;pageNumber=2</span></span><br><span class="line">      parameters:</span><br><span class="line">       - name: pageSize</span><br><span class="line">         <span class="keyword">in</span>: query      <span class="comment">//就是这里,这里query表示参数请求</span></span><br><span class="line">         description: <span class="built_in">Number</span> <span class="keyword">of</span> persons returned</span><br><span class="line">         type: integer</span><br><span class="line">       - name: pageNumber</span><br><span class="line">         <span class="keyword">in</span>: query</span><br><span class="line">         description: Page number</span><br><span class="line">         type: integer</span><br></pre></td></tr></table></figure></p>
<p><strong>路径请求</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get(请求方式) /persons/&#123;username&#125;</span></span><br><span class="line">      parameters:</span><br><span class="line">        - name: username</span><br><span class="line">          <span class="keyword">in</span>: path          <span class="comment">//这里path表示路径请求</span></span><br><span class="line">          required: <span class="literal">true</span>    <span class="comment">//这个表示路径参数必须填写,默认为false表示这个路径是可选填的</span></span><br><span class="line">          description: The person<span class="string">'s username</span></span><br><span class="line"><span class="string">          type: string</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>记录点二</strong><br>返回数据形式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">      responses:</span><br><span class="line">        <span class="string">'200'</span>:</span><br><span class="line">          description: successful operation</span><br><span class="line">          schema:</span><br><span class="line">            type: array</span><br><span class="line">            items:</span><br><span class="line">              $ref: <span class="string">'#/definitions/Pet'</span> <span class="comment">//这个是连接底下的数据结构</span></span><br><span class="line">              </span><br><span class="line">              ....</span><br><span class="line">              </span><br><span class="line"></span><br><span class="line"><span class="comment">//其实这就是数据库的结构              </span></span><br><span class="line"> Pet:</span><br><span class="line">    type: object</span><br><span class="line">    required:</span><br><span class="line">      - name</span><br><span class="line">      - photoUrls</span><br><span class="line">    properties:</span><br><span class="line">      id:</span><br><span class="line">        type: integer</span><br><span class="line">        format: int64</span><br><span class="line">      category:</span><br><span class="line">        $ref: <span class="string">'#/definitions/Category'</span>  <span class="comment">//这个还可以关联另一个数据表内容 这样返回时很简单.</span></span><br><span class="line">      name:</span><br><span class="line">        type: string</span><br><span class="line">        example: doggie                 <span class="comment">//这是事例 在测试时就直接显示了</span></span><br><span class="line">      photoUrls:</span><br><span class="line">        type: array</span><br><span class="line">        xml:                            <span class="comment">// 这个xml可能是在选择返回为xml才有用 但一般是json格式 </span></span><br><span class="line">          name: photoUrl</span><br><span class="line">          wrapped: <span class="literal">true</span></span><br><span class="line">        items:                          <span class="comment">//这个才是json正常显示的东西</span></span><br><span class="line">          type: string</span><br><span class="line">      tags:</span><br><span class="line">        type: array</span><br><span class="line">        xml:</span><br><span class="line">          name: tag</span><br><span class="line">          wrapped: <span class="literal">true</span></span><br><span class="line">        items:</span><br><span class="line">          $ref: <span class="string">'#/definitions/Tag'</span></span><br><span class="line">      status:</span><br><span class="line">        type: string</span><br><span class="line">        description: pet status <span class="keyword">in</span> the store</span><br><span class="line">        enum:</span><br><span class="line">          - available</span><br><span class="line">          - pending</span><br><span class="line">          - sold</span><br><span class="line">    xml:</span><br><span class="line">      name: Pet</span><br></pre></td></tr></table></figure>
<p><strong>记录点三</strong><br> 定义消息体参数<br> 接下来我们给 post 方法添加参数，通过 in 属性显式说明参数是在 body 中的。参数的定义参考 get /persons/{username} 的 200 响应消息体参数，也就是包含用户的姓氏、名字、用户名。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">parameters:</span><br><span class="line">  - name: person</span><br><span class="line">    <span class="keyword">in</span>: body</span><br><span class="line">    description: The person to create.</span><br><span class="line">    schema:</span><br><span class="line">      required:</span><br><span class="line">        - username</span><br><span class="line">      properties:</span><br><span class="line">        firstName:</span><br><span class="line">          type: string</span><br><span class="line">        lastName:</span><br><span class="line">          type: string</span><br><span class="line">        username:</span><br><span class="line">          type: string</span><br></pre></td></tr></table></figure></p>
<p><a href="http://editor.swagger.io/" target="_blank" rel="noopener">官方在线编辑器</a><br><a href="http://www.cnblogs.com/whitewolf/p/4686154.html" target="_blank" rel="noopener">Swagger - 前后端分离后的契约</a><br><a href="http://www.cnblogs.com/JoiT/p/6378086.html" target="_blank" rel="noopener">[译]5.41 Swagger tutorial</a><br><a href="https://www.gitbook.com/book/huangwenchao/swagger/details" target="_blank" rel="noopener">Swagger从入门到精通</a><br><a href="http://www.jianshu.com/p/4115f2b53983" target="_blank" rel="noopener">Swagger</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端模拟本地数据 mock 的各种方法]]></title>
      <url>http://elickzhao.github.io/2017/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%8B%9F%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%20mock%20%E7%9A%84%E5%90%84%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong><a href="https://yarnpkg.com/zh-Hans/package/json-server" target="_blank" rel="noopener">json-server</a></strong><br>通过REST路由操作JSON文件数据库</p>
<p><strong><a href="https://yarnpkg.com/zh-Hans/package/jsonplaceholder" target="_blank" rel="noopener">JSONPlaceholder</a></strong><br>用于测试和原型的简单假REST API服务器。</p>
<p><strong><a href="https://yarnpkg.com/zh-Hans/package/fake-api-server" target="_blank" rel="noopener">fake-api-server</a></strong><br>跟JSONPlaceholder一样,是用于测试信息的测试服务器</p>
<p><strong><a href="https://github.com/jaywcjlove/ssr" target="_blank" rel="noopener">ssr</a></strong><br>这个和上面的 <strong>json-server</strong> 异曲同工之妙,这不过这个既可以当作静态网站服务器,也可以提供 <strong>本地数据mock</strong> 用于测试开发 这个可以配合mock.js 利用代理路由 达到模拟数据 这个方法简单些 比上面的写json文件好点</p>
<p><strong><a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">mock.js</a></strong><br>这个有个问题拦截ajax只能是jq,还有个插件是angular的 可惜我不用.<br>我只用vue,虽然也可以手动添加但还是不如插件简单,以后可以考虑自己搞一个.<br>对了可以配合另一个插件 <strong>axios-mock-adapter</strong> 做到拦截并返回模拟数据<br><a href="https://www.zybuluo.com/mdeditor#800670" target="_blank" rel="noopener">我自己的文章说明</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> mock </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各种网页大收藏]]></title>
      <url>http://elickzhao.github.io/2017/08/%E5%90%84%E7%A7%8D%E7%BD%91%E9%A1%B5%E5%A4%A7%E6%94%B6%E8%97%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>因为好多网站呢,放在收藏夹也没什么必要,因为不经常用.但是偶尔也许能用到,所以都记录到这里吧.</p>
</blockquote>
<h2 id="课程网站"><a href="#课程网站" class="headerlink" title="课程网站"></a>课程网站</h2><table>
<thead>
<tr>
<th>网站</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a></td>
<td>这个是最好的,所有都免费.而且各种程序都有.唯一的缺点只是比较入门 不够深入.</td>
</tr>
<tr>
<td><a href="http://www.taikr.com/" target="_blank" rel="noopener">泰课在线</a></td>
<td>主要以游戏开发为主,有一些免费的公开课</td>
</tr>
<tr>
<td><a href="http://www.ucai.cn/home/mission" target="_blank" rel="noopener">优才学院</a></td>
<td>以网页开发为主</td>
</tr>
<tr>
<td><a href="http://www.gbtags.com/gb/gblibrary.htm" target="_blank" rel="noopener">课程库</a></td>
<td>也是以网页开发为主,而且全是免费的,挺不错的</td>
</tr>
<tr>
<td><a href="http://www.hubwiz.com/course/" target="_blank" rel="noopener">汇至网</a></td>
<td>什么开发都有些,不过有一大半是收费的</td>
</tr>
<tr>
<td><a href="http://edu.csdn.net/courses" target="_blank" rel="noopener">CSDN视频学院</a></td>
<td>视频的确很直接,但是免费的不如开始那么多了,我收藏的go语音开发也没了</td>
</tr>
</tbody>
</table>
<h2 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站"></a>资源网站</h2><table>
<thead>
<tr>
<th>网站</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.qiuziti.com/" target="_blank" rel="noopener">求字体</a></td>
<td>前端想要各种字体可以上这里来找</td>
</tr>
<tr>
<td><a href="http://www.popzitizh.com/" target="_blank" rel="noopener">字体转换器</a></td>
<td>可以转换成各种好看的字体 不过下载的是图片而已</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node.js包大收集]]></title>
      <url>http://elickzhao.github.io/2017/08/node.js%E5%8C%85%E5%A4%A7%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">包名</th>
<th>简介</th>
<th style="text-align:center">图片</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/multispinner" target="_blank" rel="noopener">multispinner</a></td>
<td>在CLI模式下进度显示程序</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/codekirei/node-multispinner/master/extras/multispinner.gif" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/cfonts" target="_blank" rel="noopener">cfonts</a></td>
<td>在CLI模式下输出各种拼接文字,只支持英文</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/dominikwilkowski/cfonts/master/img/block.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/chalk" target="_blank" rel="noopener">chalk</a></td>
<td>在CLI模式下,设置字体颜色及背景颜色</td>
<td style="text-align:center"><img src="https://github.com/chalk/ansi-styles/raw/master/screenshot.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/figures" target="_blank" rel="noopener">figures</a></td>
<td>在CLI模式下,输出符号</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/sindresorhus/figures/fee8887d9f776798ae87ff54386443273c92ad97/screenshot.png" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/lowdb" target="_blank" rel="noopener">lowdb</a></td>
<td>lowdb是一个基于lodash API的轻量级本地JSON数据库  (支持 Node.js , 浏览器 和 Electron)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/lodash" target="_blank" rel="noopener">lodash</a></td>
<td>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库 <a href="http://www.css88.com/doc/lodash/#_findcollection-predicate_identity-fromindex0" target="_blank" rel="noopener">中文手册</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/lodash-id" target="_blank" rel="noopener">lodash-id</a></td>
<td>用于js对象数据库.一般配合lowdb使用</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/uuid" target="_blank" rel="noopener">uuid</a></td>
<td>生成UUID的工具包</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/cryptr" target="_blank" rel="noopener">cryptr</a></td>
<td>一个用于加密解密的工具包</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/json-server" target="_blank" rel="noopener">json-server</a></td>
<td>通过REST路由操作JSON文件数据库</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/ramda" target="_blank" rel="noopener">Ramda</a></td>
<td>一款实用的 JavaScript 函数式编程库。<a href="http://ramda.cn/" target="_blank" rel="noopener">Ramda 中文</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/jsonplaceholder" target="_blank" rel="noopener">JSONPlaceholder</a></td>
<td>用于测试和原型的简单假REST API服务器。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/fake-api-server" target="_blank" rel="noopener">fake-api-server</a></td>
<td>跟JSONPlaceholder一样,是用于测试信息的测试服务器</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a></td>
<td>把node程序打包成各平台应用 <a href="https://www.w3cschool.cn/electronmanual/" target="_blank" rel="noopener">Electron中文文档</a></td>
<td style="text-align:center"><img src="https://camo.githubusercontent.com/11e7cfd04eceb1ea7464e99edda0e7000487f343/68747470733a2f2f656c656374726f6e2e61746f6d2e696f2f696d616765732f656c656374726f6e2d6c6f676f2e737667" alt=""></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://yarnpkg.com/zh-Hans/package/uglify-js" target="_blank" rel="noopener">uglify-js</a></td>
<td>加密工具</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://atomiks.github.io/tippyjs/" target="_blank" rel="noopener">Tippy.js</a></td>
<td>一个提示的小插件,有多种效果的</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://bitshadow.github.io/iconate/" target="_blank" rel="noopener">iconate.js</a></td>
<td>图标切换动画效果的插件,用这个插件轻松制作动画切换</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/jaywcjlove/idoc" target="_blank" rel="noopener">idoc</a></td>
<td>用MD文件直接生成文档网站,比如API文档网站<a href="http://jaywcjlove.github.io/idoc/html/%E4%B8%BB%E9%A2%98.html" target="_blank" rel="noopener">网站演示</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/jaywcjlove/ssr" target="_blank" rel="noopener">ssr</a></td>
<td>这个和上面的 <strong>json-server</strong> 异曲同工之妙,这不过这个既可以当作静态网站服务器,也可以提供 <strong>本地数据mock</strong> 用于测试开发 这个可以配合mock.js 利用代理路由 达到模拟数据 这个方法简单些 比上面的写json文件好点</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3之Transition（变换过渡）使用]]></title>
      <url>http://elickzhao.github.io/2017/08/CSS3%E4%B9%8BTransition%EF%BC%88%E5%8F%98%E6%8D%A2%E8%BF%87%E6%B8%A1%EF%BC%89%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">property</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">property：执行过渡的属性        all 或者 width 这些css属性</span></span><br><span class="line"><span class="comment">duration：执行过渡的持续时间    s 或者 ms</span></span><br><span class="line"><span class="comment">timing-function：执行过渡的速率模式   linear：（匀速） ease-in-out （加速然后减速）</span></span><br><span class="line"><span class="comment">delay：延时多久执行 单位为s（秒）或者ms（毫秒），默认就是0，也就是立即执行， 多个动画执行 一个和另一个之间的时间间隔</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子</span><br><span class="line"><span class="selector-class">.ivu-col</span> &#123;</span><br><span class="line">    <span class="comment">/* 修改了速度 和 模式 现在看来没有以前的效果, 不过观感好多  */</span></span><br><span class="line">    <span class="attribute">transition</span>: width .<span class="number">08s</span> ease-out;   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    property：执行过渡的属性  all 或者  width</span></span><br><span class="line"><span class="comment">    duration：执行过渡的持续时间  可以是 s 或是 ms</span></span><br><span class="line"><span class="comment">    timing-function：执行过渡的速率模式  ease-in-out</span></span><br><span class="line"><span class="comment">    delay：延时多久执行</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<iframe width="100%" height="450" src="http://code.hcharts.cn/blog-demo/9KFlli/share/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.jianshu.com/p/5354a9042a2a" target="_blank" rel="noopener">CSS3之Transition（变换过渡）</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Axios 初探]]></title>
      <url>http://elickzhao.github.io/2017/08/Axios%20%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p><strong>简单用法</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 向具有指定ID的用户发出请求 */</span></span><br><span class="line"><span class="comment">//其实和jq的ajax差不多 then 是成功返回执行其后任务,catch捕捉错误</span></span><br><span class="line"><span class="comment">//其实就是 Promise 可以进行并发操作的 axios.all(iterable) 其实就是 promise.all()</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>还有以下用法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.request(config)</span><br><span class="line">axios.get(url [，config])</span><br><span class="line">axios.delete(url [，config])</span><br><span class="line">axios.head(url [，config])</span><br><span class="line">axios.post(url [，data [，config]])</span><br><span class="line">axios.put(url [，data [，config]])</span><br><span class="line">axios.patch(url [，data [，config]])</span><br></pre></td></tr></table></figure></p>
<p><strong>创建实例使用</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ajaxUrl = env === <span class="string">'development'</span> ?</span><br><span class="line">    <span class="string">'http://127.0.0.1:3000'</span> :</span><br><span class="line">    env === <span class="string">'production'</span> ?</span><br><span class="line">    <span class="string">'https://www.url.com'</span> :</span><br><span class="line">    <span class="string">'https://debug.url.com'</span>;</span><br><span class="line"></span><br><span class="line">util.ajax = axios.create(&#123;</span><br><span class="line">    baseURL: ajaxUrl,</span><br><span class="line">    timeout: <span class="number">30000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样使用  这样就不用每次都写那个很长的请求地址了</span></span><br><span class="line">    Util.ajax.get(<span class="string">'users'</span>, &#123;  <span class="comment">//只能用get 是请求 post是创建</span></span><br><span class="line">        params: &#123;</span><br><span class="line">        user: <span class="keyword">this</span>.formInline.user,</span><br><span class="line">        password: <span class="keyword">this</span>.formInline.password</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.tuicool.com/articles/eMb2yuY" target="_blank" rel="noopener">Axios全攻略</a><br><a href="http://www.cnblogs.com/Upton/p/6180512.html" target="_blank" rel="noopener">axios基本用法</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue键盘监听事件]]></title>
      <url>http://elickzhao.github.io/2017/07/vue%E9%94%AE%E7%9B%98%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><strong>聚焦一个焦点,判断键值这么写</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/Vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">'#box'</span>,</span></span><br><span class="line"><span class="undefined">                data: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                methods: &#123;</span></span><br><span class="line"><span class="javascript">                    show: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(ev.keyCode==<span class="number">13</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">'你按了回车键！'</span>)</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup</span>=<span class="string">"show($event)"</span>&gt;</span>    <span class="comment">&lt;!-- 这里 @keydown 也是可行的--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p><strong>简单写法</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/Vue.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">'#box'</span>,</span></span><br><span class="line"><span class="undefined">                data: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">                methods: &#123;</span></span><br><span class="line"><span class="javascript">                    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">'你按了回车！'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    show2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">'你按了回车！'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    show3: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">'你按了上键！'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    show4: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">'你按了下键！'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    show5: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">'你按了左键！'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    show6: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">'你按了右键！'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.13</span>=<span class="string">"show()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"show2()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.up</span>=<span class="string">"show3()"</span>&gt;</span>  <span class="comment">&lt;!-- 这里是方向键的上下左右 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.down</span>=<span class="string">"show4()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.left</span>=<span class="string">"show5()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.right</span>=<span class="string">"show6()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<iframe width="100%" height="450" src="http://code.hcharts.cn/test123/BJBlTx/share/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<hr>
<p>整个页面监听键盘按键<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 用 $nextTick 也不行 应该是这里可以用this 但是 document.onkeyup 里面不行</span></span><br><span class="line">        <span class="comment">// this.$nextTick(function () &#123;</span></span><br><span class="line">        <span class="comment">//     // 代码保证 this.$el 在 document 中</span></span><br><span class="line">        <span class="comment">//     document.onkeyup = function (ev) &#123;</span></span><br><span class="line">        <span class="comment">//         if (ev.keyCode == 13) &#123;</span></span><br><span class="line">        <span class="comment">//             this.handleSubmit('formInline');</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//就是这里了 用钩子在组件加载完毕后 监听按键  这样当页面按下回车就会执行下面方法</span></span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ev.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">                self.handleSubmit(<span class="string">'formInline'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleSubmit(name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs[name].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$Message.success(<span class="string">'登录成功!'</span>);</span><br><span class="line">                    <span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">'/main'</span> &#125;)</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//模拟数据测试</span></span><br><span class="line">                    <span class="keyword">let</span> mock = <span class="keyword">new</span> MockAdapter(axios);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> template = &#123;</span><br><span class="line">                        <span class="string">'people|1-4'</span>: [&#123;</span><br><span class="line">                            <span class="string">'name'</span>: <span class="string">'@name'</span>,</span><br><span class="line">                            <span class="string">'age'</span>: <span class="string">'@integer(10,80)'</span></span><br><span class="line">                        &#125;]</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">let</span> data = Mock.mock(template);</span><br><span class="line"></span><br><span class="line">                    mock.onGet(<span class="string">"www.h.com"</span>).reply(<span class="number">200</span>, data);</span><br><span class="line">                    axios.get(<span class="string">"www.h.com"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">let</span> u = res.data.user;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(res.data, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$Message.error(<span class="string">'表单验证失败!'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="noopener">键值修饰符</a><br><a href="http://blog.csdn.net/h1069495874/article/details/55225284" target="_blank" rel="noopener">Vue键盘事件</a><br><a href="https://segmentfault.com/q/1010000008744464/a-1020000008745797" target="_blank" rel="noopener">vue里面的针对window的键盘监听事件，应该怎么写</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GSAP的TimelineMax时间轴及TweenMax缓动学习]]></title>
      <url>http://elickzhao.github.io/2017/07/GSAP%E7%9A%84TimelineMax%E6%97%B6%E9%97%B4%E8%BD%B4%E5%8F%8ATweenMax%E7%BC%93%E5%8A%A8%E5%AD%A6%E4%B9%A0%20/</url>
      <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.w3cplus.com/blog/tags/522.html" target="_blank" rel="noopener">TimelineMax系列学习文章</a><br><a href="http://www.w3cplus.com/css3/timelinemax-an-introduction-to-tweening.html" target="_blank" rel="noopener">TimelineMax：Tweening简介</a><br><a href="https://greensock.com/docs/#/HTML5/" target="_blank" rel="noopener">GSAP官方参考文档</a><br><a href="https://greensock.com/docs/#/HTML5/GSAP/Easing/" target="_blank" rel="noopener">Easing缓动演示</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue及vue-router程序的title修改]]></title>
      <url>http://elickzhao.github.io/2017/07/vue%E5%8F%8Avue-router%E7%A8%8B%E5%BA%8F%E7%9A%84title%E4%BF%AE%E6%94%B9/</url>
      <content type="html"><![CDATA[<p>因为<code>vue</code>控制的是<code>body</code>部分,所以没法修改<code>header</code>里的<code>title</code>这个比较麻烦而且不美观.</p>
<p>现在新的 <code>vue-router</code> 可以解决这个问题了.用钩子方法来做.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是钩子进入页面之前,就修改title</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = to.meta.title    <span class="comment">//这 to.meta.title 是在router里设置的</span></span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这是vue-router设置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routers = [&#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">'后台登录'</span>   <span class="comment">//这个就是上面设置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/login.vue'</span>], resolve)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    path: <span class="string">'/main'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">'后台管理中心'</span> <span class="comment">//这个是title标题</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/main.vue'</span>], resolve)</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://segmentfault.com/q/1010000007739026?_ea=1441360" target="_blank" rel="noopener">vue-router2.0设置title</a></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-router的学习笔记]]></title>
      <url>http://elickzhao.github.io/2017/07/vue-router%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>模版里链接跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></p>
<p>js跳转方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123; path: &apos;/main&apos; &#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>子页面这么用</strong></p>
<p>router 配置 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const routers = [&#123;</span><br><span class="line">    path: &apos;/&apos;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: &apos;后台登录&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    component: (resolve) =&gt; require([&apos;./views/login.vue&apos;], resolve) //这个resolve原来是懒加载的意思. 不是一次性加载组件,访问哪个加载哪个</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;/main&apos;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: &apos;后台管理中心&apos; //这个是title标题</span><br><span class="line">    &#125;,</span><br><span class="line">    component: (resolve) =&gt; require([&apos;./views/main.vue&apos;], resolve),</span><br><span class="line">    //这就是子页面了</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/&apos;,  //当一开始进入页面转到子页面,避免空页面</span><br><span class="line">            //redirect: &apos;/main/sub1&apos;    //指定路径</span><br><span class="line">            redirect:&#123; name: &apos;goods&apos; &#125;  //指定命名路径</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;sub1&apos;,</span><br><span class="line">            component: (resolve) =&gt; require([&apos;./views/sub1.vue&apos;], resolve),</span><br><span class="line">            name:&apos;sub1&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;sub2&apos;,</span><br><span class="line">            component: (resolve) =&gt; require([&apos;./views/sub2.vue&apos;], resolve),</span><br><span class="line">            name:&apos;sub2&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;sub3&apos;,</span><br><span class="line">            component: (resolve) =&gt; require([&apos;./views/sub3.vue&apos;], resolve),</span><br><span class="line">            name:&apos;sub3&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>模版页面使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">    &lt;i-col :span=&quot;spanLeft&quot; class=&quot;layout-menu-left&quot;&gt;</span><br><span class="line">        &lt;Menu active-name=&quot;1&quot; theme=&quot;light&quot; width=&quot;auto&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;layout-logo-left&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;logo-lg&quot; v-show=&quot;spanLeft == 4&quot;&gt;</span><br><span class="line">                    &lt;b&gt;Admin&lt;/b&gt;LTE</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;logo-mini&quot; v-show=&quot;spanLeft == 1&quot;&gt;</span><br><span class="line">                    &lt;b&gt;LTE&lt;/b&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;Menu-item name=&quot;1&quot;&gt;</span><br><span class="line">                &lt;!-- 这里链接一定是 /main/这个下面的子链接 虽然在配置里没这么写  --&gt;</span><br><span class="line">                &lt;router-link to=&quot;/main/sub1&quot; &gt;   </span><br><span class="line">                    &lt;Icon type=&quot;ios-navigate&quot; :size=&quot;iconSize&quot;&gt;&lt;/Icon&gt;</span><br><span class="line">                    &lt;span class=&quot;layout-text&quot; v-show=&quot;spanLeft == 4&quot;&gt;选项 1选项&lt;/span&gt;</span><br><span class="line">                &lt;/router-link&gt;</span><br><span class="line">            &lt;/Menu-item&gt;</span><br><span class="line">            &lt;Menu-item name=&quot;2&quot;&gt;</span><br><span class="line">                &lt;router-link to=&quot;/main/sub2&quot;&gt;</span><br><span class="line">                    &lt;Icon type=&quot;ios-keypad&quot; :size=&quot;iconSize&quot;&gt;&lt;/Icon&gt;</span><br><span class="line">                    &lt;span class=&quot;layout-text&quot;&gt;选项 2&lt;/span&gt;</span><br><span class="line">                &lt;/router-link&gt;</span><br><span class="line">            &lt;/Menu-item&gt;</span><br><span class="line">            &lt;Menu-item name=&quot;3&quot;&gt;</span><br><span class="line">                &lt;router-link to=&quot;/main/sub3&quot;&gt;</span><br><span class="line">                    &lt;Icon type=&quot;ios-analytics&quot; :size=&quot;iconSize&quot;&gt;&lt;/Icon&gt;</span><br><span class="line">                    &lt;span class=&quot;layout-text&quot;&gt;选项 3&lt;/span&gt;</span><br><span class="line">                &lt;/router-link&gt;</span><br><span class="line">            &lt;/Menu-item&gt;</span><br><span class="line">        &lt;/Menu&gt;</span><br><span class="line">    &lt;/i-col&gt;</span><br><span class="line">    </span><br><span class="line">    ........</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">            &lt;div class=&quot;layout-content-main&quot;&gt;</span><br><span class="line">                &lt;!-- 这里显示子页面 --&gt;</span><br><span class="line">                &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">            &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="noopener">官方文档</a><br><a href="https://segmentfault.com/a/1190000007825106" target="_blank" rel="noopener">Vue-router2.0学习笔记</a><br><a href="https://segmentfault.com/a/1190000007837361" target="_blank" rel="noopener">vue-router带你出坑</a><br><a href="http://blog.csdn.net/sinat_17775997/article/details/52549123" target="_blank" rel="noopener">Vue.js——vue-router 60分钟快速入门</a> <code>这个是老版文章只能做参考了</code><br><a href="http://www.cnblogs.com/wisewrong/p/6277262.html" target="_blank" rel="noopener">Vue 爬坑之路（三）—— 使用 vue-router 跳转页面</a></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node.js 自建简易服务器]]></title>
      <url>http://elickzhao.github.io/2017/07/node.js%20%E8%87%AA%E5%BB%BA%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>废话先不多说,代码就是如下这么简单.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./dist'</span>)) <span class="comment">//指定目录</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//res.send('Hello World')     //这里注意下因为生成的静态页不是index.html标准名称 所以不会显示</span></span><br><span class="line">  res.sendFile( path.join(__dirname,  <span class="string">'./dist/index_prod.html'</span>))    <span class="comment">//这是返回静态页,注意啊一定要绝对路径</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>下面这个是参考文档里的写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(<span class="string">"/public"</span>, express.static(__dirname + <span class="string">'/public'</span>));  <span class="comment">//访问路径写到一起了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务端</span></span><br><span class="line">http.createServer(app).listen(<span class="string">'80'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'启动服务器完成'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>然后执行 <code>node app.js</code> 就可以启动服务器了. app.js 就是上面配置所保存的文件名.</p>
<!--more-->
<p>上面用的是<code>express</code>,用<code>http-server</code>的话就更简单,不需要自己写配置直接用命令就可以启动了.<br>不过这个需要全局安装才行,要不不会有命令的.<br><code>http-server</code>是另一个插件,别搞混了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果你的当前项目中存在 public 文件夹,那么默认静态目录会指定到 public</span></span><br><span class="line"><span class="comment">//如果没有 public 文件夹,那么静态目录就是 根目录</span></span><br><span class="line"><span class="comment">//所以要哪个目录充当静态服务器的根目录 就得进入哪个目录执行下面命令</span></span><br><span class="line">http-server -a <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">7070</span></span><br></pre></td></tr></table></figure>
<p><strong>下面开始唠叨:</strong></p>
<p>因为现在做动静分离的后台程序,所以需要前端的静态服务器.在本地时单击打开静态文件,有时因为所需插件原因.<br>也是无法打开的,必须放在静态服务器.所以这时就需要上面的东西了.</p>
<p><del>还有一点是,我在这个项目里生成的首页名字为 <code>index_prod.html</code> 一定要改成 <code>index.html</code> 一来服务器可以直接显示,二来是如果不改无法正确显示内容.</del>  </p>
<blockquote>
<p><strong>用res.sendFile( path.join(__dirname,  ‘./dist/index_prod.html’))就可以返回指定文件了,但是路径一定要是绝对路径</strong></p>
</blockquote>
<p>关于设置静态服务器的必要性 看看这里 <a href="https://segmentfault.com/q/1010000004050694?_ea=470962" target="_blank" rel="noopener">是否有必要为网站的静态资源设置一个单独的服务器?</a>能了解到不少东西.</p>
<p>这两个搭建服务器的插件 <code>express</code>和 <code>http-server</code> 都得先安装才能用.不过呢 因为项目里有时用到别的插件.<br>比如 <code>webpace</code>的时候 <code>express</code>就不用特别安装了.因为已经包涵在里面.但是<code>http-server</code>使用的范围不是那么广,所以必须安装.</p>
<p>还有就是下面参考文档里说,<code>http-server</code>比<code>express</code>要小巧,不过从下载的包来看,并不是如此.可能指的的是功能上吧. 而且<code>express</code>可以操作数据库,这可能对我要写的程序有点用处.</p>
<p>##参考文档<br><a href="https://my.oschina.net/obullxl/blog/163049" target="_blank" rel="noopener">Node.js用6行代码1个JS文件搭建一个HTTP静态服务器</a><br><a href="http://yijiebuyi.com/blog/b0f6ddc56be457e13879a3ad105f561b.html" target="_blank" rel="noopener">随笔 http-server 快速创建node.js 静态服务器</a><br><a href="http://yijiebuyi.com/blog/359ff66c69934c178dfa8baa32427aef.html" target="_blank" rel="noopener">http-server Angular.js 后端node服务首选 轻量级替换 Express 解决方案</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[multispinner 使用简介]]></title>
      <url>http://elickzhao.github.io/2017/07/multispinner%20%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/codekirei/node-multispinner/master/extras/multispinner.gif" alt=""></p>
<p>multispinner 是在命令行执行时等待的样式,并且能根据结果返回不同的提示信息.</p>
<p><img src="https://raw.githubusercontent.com/codekirei/node-multispinner/master/extras/demo.gif" alt=""></p>
<p>这个node插件使用起来非常简单 在<a href="https://github.com/codekirei/node-multispinner" target="_blank" rel="noopener">multispinner Github</a> 里有例子 不太懂可以看一下.</p>
<!--more--!>

**普通方法使用**
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setup</span></span><br><span class="line"><span class="keyword">const</span> Multispinner = <span class="built_in">require</span>(<span class="string">'Multispinner'</span>)</span><br><span class="line"><span class="keyword">const</span> spinners = [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'qux'</span>]   <span class="comment">//这是设定同时进行几个任务执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// instantiate and start spinners</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Multispinner(spinners)</span><br><span class="line"></span><br><span class="line"><span class="comment">// finish spinners in staggered timeouts</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> m.success(<span class="string">'foo'</span>), <span class="number">1000</span>)    <span class="comment">//这里是任务根据结果返回 信息</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> m.error(<span class="string">'bar'</span>), <span class="number">1500</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> m.success(<span class="string">'baz'</span>), <span class="number">2000</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> m.error(<span class="string">'qux'</span>), <span class="number">2500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// do something on success/error events</span></span><br><span class="line"><span class="comment">// 这里是定义返回信息输出什么内容</span></span><br><span class="line">m.on(<span class="string">'success'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// does not fire in this example because m.error is called</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'done without errors!'</span>)</span><br><span class="line">&#125;).on(<span class="string">'err'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;e&#125;</span> spinner finished with an error`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>自定义样式</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// modules</span></span><br><span class="line"><span class="keyword">const</span> Multispinner = <span class="built_in">require</span>(<span class="string">'Multispinner'</span>)</span><br><span class="line"><span class="keyword">const</span> figures = <span class="built_in">require</span>(<span class="string">'figures'</span>)  <span class="comment">//这一个符号小插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constants</span></span><br><span class="line"><span class="keyword">const</span> spinners = [<span class="string">'task A'</span>, <span class="string">'task B'</span>, <span class="string">'task C'</span>]</span><br><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="string">'interval'</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="string">'preText'</span>: <span class="string">'Completing'</span>,  <span class="comment">// (*) Completing task A</span></span><br><span class="line">  <span class="string">'postText'</span>: <span class="string">'process'</span>,    <span class="comment">//这是后缀</span></span><br><span class="line">  <span class="string">'frames'</span>: [</span><br><span class="line">    <span class="string">'[          ]'</span>,</span><br><span class="line">    <span class="string">'[&gt;         ]'</span>,</span><br><span class="line">    <span class="string">'[)&gt;        ]'</span>,</span><br><span class="line">    <span class="string">'[￣)&gt;      ]'</span>,</span><br><span class="line">    <span class="string">'[3￣)&gt;     ]'</span>,</span><br><span class="line">    <span class="string">'[￣3￣)&gt;   ]'</span>,</span><br><span class="line">    <span class="string">'[(￣3￣)&gt;  ]'</span>,</span><br><span class="line">    <span class="string">'[&lt;(￣3￣)&gt; ]'</span>,</span><br><span class="line">    <span class="string">'[&lt;(≧ □ ≦)&gt;]'</span>,</span><br><span class="line">    <span class="string">'[ &lt;(≧ □ ≦)]'</span>,</span><br><span class="line">    <span class="string">'[  &lt;(≧ □ ≦]'</span>,</span><br><span class="line">    <span class="string">'[   &lt;(≧ □ ]'</span>,</span><br><span class="line">    <span class="string">'[    &lt;(≧ □]'</span>,</span><br><span class="line">    <span class="string">'[     &lt;(≧ ]'</span>,</span><br><span class="line">    <span class="string">'[      &lt;(≧]'</span>,</span><br><span class="line">    <span class="string">'[       &lt;(]'</span>,</span><br><span class="line">    <span class="string">'[        &lt;]'</span>,</span><br><span class="line">    <span class="string">'[         ]'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'symbol'</span>: &#123;</span><br><span class="line">    <span class="string">'success'</span>: <span class="string">' '</span>.repeat(<span class="number">7</span>) + figures.tick</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> opts1 = &#123;</span><br><span class="line">  <span class="string">'interval'</span>: <span class="number">150</span>,  <span class="comment">//数值越大 速度越慢</span></span><br><span class="line">  <span class="string">'preText'</span>: <span class="string">'Completing'</span>,  <span class="comment">//这个是输出信息前,加的前缀内容</span></span><br><span class="line">  <span class="string">'frames'</span>: [</span><br><span class="line">    <span class="string">'[         ]'</span>,</span><br><span class="line">    <span class="string">'[&gt;        ]'</span>,</span><br><span class="line">    <span class="string">'[)&gt;       ]'</span>,</span><br><span class="line">    <span class="string">'[￣)&gt;     ]'</span>,</span><br><span class="line">    <span class="string">'[3￣)&gt;    ]'</span>,</span><br><span class="line">    <span class="string">'[￣3￣)&gt;  ]'</span>,</span><br><span class="line">    <span class="string">'[(￣3￣)&gt; ]'</span>,</span><br><span class="line">    <span class="string">'[&lt;(￣3￣)&gt;]'</span>,</span><br><span class="line">    <span class="string">'[ &lt;(￣3￣)]'</span>,</span><br><span class="line">    <span class="string">'[  &lt;(￣3￣]'</span>,</span><br><span class="line">    <span class="string">'[   &lt;(￣3 ]'</span>,</span><br><span class="line">    <span class="string">'[    &lt;(￣3]'</span>,</span><br><span class="line">    <span class="string">'[     &lt;(￣]'</span>,</span><br><span class="line">    <span class="string">'[      &lt;( ]'</span>,</span><br><span class="line">    <span class="string">'[       &lt;(]'</span>,</span><br><span class="line">    <span class="string">'[        &lt;]'</span>,</span><br><span class="line">    <span class="string">'[         ]'</span>,</span><br><span class="line">    <span class="string">'[         ]'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'symbol'</span>: &#123;<span class="comment">//repeat()是重复字符串几次 前面是空格 也就是重复空格几次</span></span><br><span class="line">    <span class="string">'success'</span>: <span class="string">' '</span>.repeat(<span class="number">7</span>) + figures.circleFilled</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Multispinner(spinners, opts1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// staggered completion</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="number">2500</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    m.success(spinners[i])</span><br><span class="line">    i++</span><br><span class="line">    <span class="keyword">if</span> (i &lt; spinners.length) loop()</span><br><span class="line">  &#125;, t)</span><br><span class="line">&#125;</span><br><span class="line">loop()</span><br></pre></td></tr></table></figure></p>
<p><strong>实际应用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">//实际应用中要配合 Promise 使用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tasks = [<span class="string">'renderer'</span>,<span class="string">'app'</span>]</span><br><span class="line">  <span class="keyword">const</span> m = <span class="keyword">new</span> Multispinner(tasks, &#123;</span><br><span class="line">    preText: <span class="string">'building'</span>,</span><br><span class="line">    postText: <span class="string">'process'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">    m.on(<span class="string">'success'</span>, () =&gt; &#123;</span><br><span class="line">    process.stdout.write(<span class="string">'\x1B[2J\x1B[0f'</span>)</span><br><span class="line">    <span class="comment">//console.log(`\n\n $&#123;results&#125; `)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">` <span class="subst">$&#123;okayLog&#125;</span>take it away <span class="subst">$&#123;chalk.yellow(<span class="string">'`web-builder`'</span>)&#125;</span>\n`</span>)</span><br><span class="line">    process.exit()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    m.success(<span class="string">'app'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">` <span class="subst">$&#123;okayLog&#125;</span>take it away <span class="subst">$&#123;chalk.yellow(<span class="string">'`app-builder`'</span>)&#125;</span>\n`</span>)</span><br><span class="line">    process.exit()</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    m.error(<span class="string">'app'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`\n  <span class="subst">$&#123;errorLog&#125;</span>failed to build app process`</span>)</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">`\n<span class="subst">$&#123;err&#125;</span>\n`</span>)</span><br><span class="line">    process.exit(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    exec(<span class="string">'electron-packager . HelloWorld windows --out ./OutApp --version 1.6.11 --overwrite --ignore=client/node_modules'</span>, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        reject(stderr)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(stdout)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LowDB静态JSON文件数据库详细介绍]]></title>
      <url>http://elickzhao.github.io/2017/07/LowDB%E9%9D%99%E6%80%81JSON%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="lowdb"><a href="#lowdb" class="headerlink" title="lowdb"></a><a href="https://github.com/typicode/lowdb" target="_blank" rel="noopener">lowdb</a></h2><blockquote>
<p>lowdb是一个基于lodash API的轻量级本地JSON数据库  (支持 Node.js , 浏览器 和 Electron)</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>Small（轻量级）</li>
<li>Serverless（不需要服务器）</li>
<li>lodash rich API（lodash丰富的API）</li>
<li>In-memory or disk-based（基于内存和硬盘的存储）</li>
<li>Hackable (mixins, id, encryption, …)(可以扩展第三方插件,比如lodash-id)</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>npm install lowdb –save<br>或者<br>yarn add lowdb</p>
</blockquote>
<p>也可以外部引用使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/lodash@4/lodash.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/lowdb/dist/lowdb.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> db = low(<span class="string">'db'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>##使用</p>
<a id="more"></a>
<p><strong>low()</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lowdb几种模式</span></span><br><span class="line"><span class="comment">// 内存模式</span></span><br><span class="line">low()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用异步方式处理本地数据存储</span></span><br><span class="line">low(<span class="string">'db.json'</span>, &#123; <span class="attr">storage</span>: <span class="built_in">require</span>(<span class="string">'lowdb/lib/storages/file-async'</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用用户自定义数据</span></span><br><span class="line">low(<span class="string">'some-source'</span>, &#123; <span class="attr">storage</span>: <span class="built_in">require</span>(<span class="string">'./my-custom-storage'</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读模式</span></span><br><span class="line"><span class="keyword">const</span> fileSync = <span class="built_in">require</span>(<span class="string">'lowdb/lib/storages/file-sync'</span>)</span><br><span class="line">low(<span class="string">'db.json'</span>, &#123;</span><br><span class="line">  storage: &#123;</span><br><span class="line">    read: fileSync.read</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只写模式</span></span><br><span class="line">low(<span class="string">'db.json'</span>, &#123;</span><br><span class="line">  storage: &#123;</span><br><span class="line">    write: fileSync.write</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>db._</strong></p>
<blockquote>
<p>一个数据库<code>lodash</code>实例,用于扩展第三方插件或自定义方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db._.mixin(&#123;</span><br><span class="line">  second: <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> post1 = db.get(<span class="string">'posts'</span>).first().value()</span><br><span class="line"><span class="keyword">const</span> post2 = db.get(<span class="string">'posts'</span>).second().value()</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>db.getState()</strong></p>
<blockquote>
<p>获得数据库状态和内容 是个字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.getState() <span class="comment">// &#123; posts: [ ... ] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------</span></span><br><span class="line"><span class="comment">//这么用</span></span><br><span class="line">fs.writeFileSync(<span class="string">'db.json'</span>, <span class="built_in">JSON</span>.stringify(db.getState()))  <span class="comment">//fs文件操作</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>db.setState(newState)</strong>  </p>
<blockquote>
<p>清空数据库</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> newState = &#123;&#125;</span><br><span class="line">    db.setState(newState)</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**db.write([source])</span></span><br><span class="line"><span class="string">db.read([source])**</span></span><br><span class="line"><span class="string">&gt;这两个都是返回一个promise执行异步操作,可以用于备份</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">//read和这个完全一样</span></span><br><span class="line"><span class="keyword">const</span> db = low(<span class="string">'db.json'</span>)</span><br><span class="line">db.write()            <span class="comment">// writes to db.json</span></span><br><span class="line">db.write(<span class="string">'copy.json'</span>) <span class="comment">// writes to copy.json</span></span><br></pre></td></tr></table></figure>
<p><strong>db.defaults()</strong></p>
<blockquote>
<p>初始化一个数据库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.defaults(&#123; <span class="attr">posts</span>: [], <span class="attr">user</span>: &#123;&#125; &#125;)</span><br><span class="line">  .write()</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>.id</strong></p>
<blockquote>
<p>自动插入id字段,生成一个随机值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>).insert(&#123; <span class="attr">title</span>: <span class="string">'今天是个好日子!'</span> &#125;).write().id</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="常用写法"><a href="#常用写法" class="headerlink" title="常用写法"></a>常用写法</h2><blockquote>
<p>根据lodash API 写出的常用写法</p>
</blockquote>
<p><strong>是否存在数据</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.has(<span class="string">'posts'</span>)</span><br><span class="line">  .value()</span><br></pre></td></tr></table></figure></p>
<p><strong>设置数据</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.set(<span class="string">'posts'</span>, [])</span><br><span class="line">  .write()</span><br></pre></td></tr></table></figure></p>
<p><strong>排序前五</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .filter(&#123;<span class="attr">published</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">  .sortBy(<span class="string">'views'</span>)</span><br><span class="line">  .take(<span class="number">5</span>)</span><br><span class="line">  .value()</span><br></pre></td></tr></table></figure></p>
<p><strong>获得标题</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .map(<span class="string">'title'</span>)</span><br><span class="line">  .value()</span><br></pre></td></tr></table></figure></p>
<p><strong>获得数量</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .size()</span><br><span class="line">  .value()</span><br></pre></td></tr></table></figure></p>
<p><strong>获得第一个标题</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts[0].title'</span>)</span><br><span class="line">  .value()</span><br></pre></td></tr></table></figure></p>
<p><strong>更新数据</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .find(&#123; <span class="attr">title</span>: <span class="string">'low!'</span> &#125;)</span><br><span class="line">  .assign(&#123; <span class="attr">title</span>: <span class="string">'hi!'</span>&#125;)</span><br><span class="line">  .write()</span><br></pre></td></tr></table></figure></p>
<p><strong>删除数据</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .remove(&#123; <span class="attr">title</span>: <span class="string">'low!'</span> &#125;)</span><br><span class="line">  .write()</span><br></pre></td></tr></table></figure></p>
<p><strong>删除一个属性</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.unset('user').write() 可以把这个属性整个删除掉</span></span><br><span class="line">db.unset(<span class="string">'user.name'</span>)</span><br><span class="line">  .write()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* db是这个样子的</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  "posts": [</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      "title": "今天是个好日子!",</span></span><br><span class="line"><span class="comment">      "id": "6dde9a48-e204-401c-b869-96e16605269f"</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment">  "user": &#123;</span></span><br><span class="line"><span class="comment">    "age": "25",</span></span><br><span class="line"><span class="comment">    "name": "elick"</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>复制可以用作备份时使用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .cloneDeep()</span><br><span class="line">  .value()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------</span></span><br><span class="line"><span class="comment">//这样可以达到备份单个表用途</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone = db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .cloneDeep()</span><br><span class="line">  .value()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db1 = low(<span class="string">'copy.json'</span>)</span><br><span class="line">db1.defaults(&#123;<span class="attr">posts</span>:clone&#125;).write()</span><br></pre></td></tr></table></figure></p>
<p>##添加扩展</p>
<p><strong>lodash-id</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = low(<span class="string">'db.json'</span>)</span><br><span class="line"></span><br><span class="line">db._.mixin(<span class="built_in">require</span>(<span class="string">'lodash-id'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postId = db.get(<span class="string">'posts'</span>).insert(&#123; <span class="attr">title</span>: <span class="string">'low!'</span> &#125;).write().id</span><br><span class="line"><span class="keyword">const</span> post = db.get(<span class="string">'posts'</span>).getById(postId).value()</span><br></pre></td></tr></table></figure></p>
<p><strong>uuid</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">'uuid'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postId = db.get(<span class="string">'posts'</span>).push(&#123; <span class="attr">id</span>: uuid(), <span class="attr">title</span>: <span class="string">'low!'</span> &#125;).write().id</span><br><span class="line"><span class="keyword">const</span> post = db.get(<span class="string">'posts'</span>).find(&#123; <span class="attr">id</span>: postId &#125;).value()</span><br></pre></td></tr></table></figure></p>
<p><strong>cryptr</strong></p>
<blockquote>
<p>加密解密   (这个加密注意一个情况,如果库文件存在的话会报错,只有初始化一个新的才可以)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Cryptr = <span class="built_in">require</span>(<span class="string">"./cryptr"</span>),</span><br><span class="line"><span class="keyword">const</span> cryptr = <span class="keyword">new</span> Cryptr(<span class="string">'my secret key'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = low(<span class="string">'db.json'</span>, &#123;</span><br><span class="line">  format: &#123;</span><br><span class="line">    deserialize: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> decrypted = cryptr.decrypt(str)</span><br><span class="line">      <span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(decrypted)</span><br><span class="line">      <span class="keyword">return</span> obj</span><br><span class="line">    &#125;,</span><br><span class="line">    serialize: <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> str = <span class="built_in">JSON</span>.stringify(obj)</span><br><span class="line">      <span class="keyword">const</span> encrypted = cryptr.encrypt(str)</span><br><span class="line">      <span class="keyword">return</span> encrypted</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.defaults(&#123; <span class="attr">posts</span>: [], <span class="attr">user</span>: &#123;&#125; &#125;)</span><br><span class="line">  .write()</span><br></pre></td></tr></table></figure>
<p>##使用问题总结</p>
<p><strong>set和unset的使用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以操作,二维的数组,不过删除时最好不要用 unset ,会造成多一个`逗号`</span></span><br><span class="line"><span class="comment">//一般情况下造作一维比较好</span></span><br><span class="line">db.unset(<span class="string">'user.age'</span>).write()</span><br><span class="line"></span><br><span class="line">db.set(<span class="string">'posts[4].title'</span>, <span class="string">'啦啦啦啦'</span>)</span><br><span class="line">  .write()</span><br></pre></td></tr></table></figure></p>
<p><strong>加密解密</strong></p>
<blockquote>
<p>这个问题上面已经说了,就是必须生成一个新文件,要不会报错json格式不正确</p>
</blockquote>
<p><strong>使用lodash-id</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是正确的使用方式  不过这个插入真心意义不大和push 还不如push打字少</span></span><br><span class="line">db.get(<span class="string">'posts'</span>).insert(&#123;<span class="attr">id</span>:<span class="number">333</span>, <span class="attr">body</span>: <span class="string">'New post'</span>&#125;).write()</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有write()的时候才真正写入, 如果没有write()只是返回不会修改文件</span></span><br><span class="line"><span class="keyword">let</span> dd = db.get(<span class="string">'posts'</span>).replaceById(<span class="number">3</span>,&#123;<span class="attr">body</span>: <span class="string">'心心心心'</span>&#125;).write()</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是原本更新和lodash-id比是稍显复杂写.而且这个和lodash-id都有个问题是,不能跟新所有只能跟新第一个</span></span><br><span class="line"><span class="comment">//因为这时我的库里有好几个 id:3 的数据</span></span><br><span class="line">db.get(<span class="string">'posts'</span>).find(&#123;<span class="attr">id</span>:<span class="number">3</span>&#125;).assign(&#123;<span class="attr">body</span>:<span class="string">'哈哈哈哈'</span>&#125;).write()  </span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配合浏览器的时候 lodash-id 最有用</span></span><br><span class="line">app.get(<span class="string">'/posts/:id'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(req.params.id))</span><br><span class="line">    <span class="comment">//别说这个还是有点用的 如果用原版的找就找不到 可能是类型的关系</span></span><br><span class="line">    <span class="comment">//const post = db.get('posts').getById(req.params.id).value()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> post = db.get(<span class="string">'posts'</span>)</span><br><span class="line">        .find(&#123; <span class="attr">id</span>: <span class="built_in">parseInt</span>(req.params.id) &#125;)  <span class="comment">//就是类型问题</span></span><br><span class="line">        .value()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(post)</span><br><span class="line">    res.send(post)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>使用前一点要初始化数据库文件</strong></p>
<blockquote>
<p>曾经遇到过一次,因为清空数据.里面却保存了字符,结果再插入数据时报错<br>还有一次清空了数据.里面没有了表.插入数据时报错<br>而且不能初始化两次哦 否则看上去正常插入数据时也会报错</p>
</blockquote>
<p>##官方例子<br>clis.js 用命行令使用方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//import low from 'lowdb'</span></span><br><span class="line"><span class="keyword">const</span> low = <span class="built_in">require</span>(<span class="string">'lowdb'</span>)</span><br><span class="line"><span class="keyword">const</span> db = low(<span class="string">'db.json'</span>)</span><br><span class="line"></span><br><span class="line">db.defaults(&#123;<span class="attr">posts</span>:[]&#125;)</span><br><span class="line">    .write()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = db.get(<span class="string">'posts'</span>)</span><br><span class="line">    .push(&#123;<span class="attr">name</span>: process.argv[<span class="number">2</span>]&#125;)</span><br><span class="line">    .write()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure></p>
<p>server.js 这里美精简 整个测试过程全在里面了 挑着用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line">_.mixin(<span class="built_in">require</span>(<span class="string">'lodash-id'</span>))</span><br><span class="line"><span class="keyword">const</span> low = <span class="built_in">require</span>(<span class="string">'lowdb'</span>)</span><br><span class="line"><span class="keyword">const</span> fileAsync = <span class="built_in">require</span>(<span class="string">'lowdb/lib/storages/file-async'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = low(<span class="string">'db/db.json'</span>,&#123;</span><br><span class="line">  storage: fileAsync</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用这句 才能使用 lodash-id</span></span><br><span class="line">db._.mixin(_)</span><br><span class="line"></span><br><span class="line">db.defaults(&#123;<span class="attr">posts</span>:[]&#125;)</span><br><span class="line">    .write()</span><br><span class="line"></span><br><span class="line"><span class="comment">// var radnum = Math.floor(Math.random()*10)</span></span><br><span class="line"><span class="comment">// console.log(radnum)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// db.get('posts')</span></span><br><span class="line"><span class="comment">//   .push(&#123; id: radnum, body: 'lowdb is awesome'&#125;)</span></span><br><span class="line"><span class="comment">//   .write()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //这是更新</span></span><br><span class="line"><span class="comment">// db.get('posts').find(&#123;id:3&#125;).assign(&#123;body:'哈哈哈哈'&#125;).write()  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //好像只能改变一维数组,要不就只能清空</span></span><br><span class="line"><span class="comment">// // db.set('user.name', 'typicode')</span></span><br><span class="line"><span class="comment">// //   .write()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let v = db.get('posts').value()</span></span><br><span class="line"><span class="comment">// console.log(v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个是正确的使用方式  不过这个插入真心意义不大和push 还不如push打字少</span></span><br><span class="line"><span class="comment">//db.get('posts').insert(&#123;id:333, body: 'New post333333333'&#125;).write()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个和find区别也不大</span></span><br><span class="line"><span class="keyword">let</span> aa = db.get(<span class="string">'posts'</span>).getById(<span class="number">3</span>).value()</span><br><span class="line"><span class="comment">//console.log(aa)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这还有点用比上面那个少 不过也只能改写一个 这个数据库里有两个3其实</span></span><br><span class="line"><span class="comment">//还有就是只有write()的时候才真正写入,也许这是上面异步的关系</span></span><br><span class="line"><span class="keyword">let</span> dd = db.get(<span class="string">'posts'</span>).replaceById(<span class="number">3</span>,&#123;<span class="attr">body</span>: <span class="string">'心心心心'</span>&#125;).write()</span><br><span class="line"><span class="built_in">console</span>.log(dd)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pp = db.get(<span class="string">'posts'</span>).value()</span><br><span class="line"><span class="built_in">console</span>.log(pp)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/posts/:id'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(req.params.id))</span><br><span class="line">    <span class="comment">//别说这个还是有点用的 如果用原版的找就找不到 可能是类型的关系</span></span><br><span class="line">    <span class="comment">//const post = db.get('posts').getById(req.params.id).value()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> post = db.get(<span class="string">'posts'</span>)</span><br><span class="line">        .find(&#123; <span class="attr">id</span>: <span class="built_in">parseInt</span>(req.params.id) &#125;)  <span class="comment">//就是类型问题</span></span><br><span class="line">        .value()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(post)</span><br><span class="line">    res.send(post)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/posts'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//low('posts').insert(&#123; title: 'foo',id:Date.now() &#125;).then(post=&gt;&#123;res.send(post)&#125;)</span></span><br><span class="line"><span class="comment">//     db.set('posts', &#123;body:'呵呵',id:Date.now()&#125;)</span></span><br><span class="line"><span class="comment">//   .write()</span></span><br><span class="line"><span class="comment">//     console.log(db.posts)</span></span><br><span class="line">     db.get(<span class="string">'posts'</span>).insert(&#123;<span class="attr">id</span>:<span class="number">666</span>, <span class="attr">body</span>: <span class="string">'双击屏幕666666666666'</span>&#125;).write().then(<span class="function"><span class="params">post</span>=&gt;</span>res.send(post))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.get('/posts',(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     db.get('posts')</span></span><br><span class="line"><span class="comment">//         .push(req.body)</span></span><br><span class="line"><span class="comment">//         .last()</span></span><br><span class="line"><span class="comment">//         .assign(&#123;id:Date.now()&#125;)</span></span><br><span class="line"><span class="comment">//         .write()</span></span><br><span class="line"><span class="comment">//         .then(post=&gt;res.send(post))</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这应该是异步写法</span></span><br><span class="line"><span class="comment">// app.post('/posts', async (req, res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   const post = await db.get('posts')</span></span><br><span class="line"><span class="comment">//     .push(req.body)</span></span><br><span class="line"><span class="comment">//     .last()</span></span><br><span class="line"><span class="comment">//     .assign(&#123; id: Date.now() &#125;)</span></span><br><span class="line"><span class="comment">//     .write()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   res.send(post)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">db.defaults(&#123;<span class="attr">posts</span>:[]&#125;)</span><br><span class="line">    .write()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        app.listen(<span class="number">8080</span>,()=&gt;<span class="built_in">console</span>.log(<span class="string">'Server is listening'</span>))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.listen(8080,()=&gt;console.log('Server is listening'))</span></span><br></pre></td></tr></table></figure></p>
<p>memory.js 内存模式这样应该会速度快很多吧<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> db = low()</span><br><span class="line"></span><br><span class="line">db.defaults(&#123; <span class="attr">posts</span>: [] &#125;)</span><br><span class="line">  .write()</span><br><span class="line"></span><br><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .push(&#123; <span class="attr">title</span>: <span class="string">'lowdb'</span> &#125;)</span><br><span class="line">  .write()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Manual writing</span></span><br><span class="line">fs.writeFileSync(<span class="string">'db.json'</span>, <span class="built_in">JSON</span>.stringify(db.getState()))</span><br></pre></td></tr></table></figure></p>
<p>##参考文档<br><a href="http://www.jianshu.com/p/11d04a4c22af" target="_blank" rel="noopener">LowDB静态JSON文件数据库介绍</a></p>
]]></content>
      
        
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[module.exports与exports，export与export default解析]]></title>
      <url>http://elickzhao.github.io/2017/07/module.exports%E4%B8%8Eexports%EF%BC%8Cexport%E4%B8%8Eexport%20default%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>其实下面文章写的特别好了,真没必要在复制一份,忘记的时候就再看一下下面的文章吧</p>
<p>下面写点自己容易忽视的东西吧.</p>
<p><code>module.exports</code> <code>exports</code> 与 <code>export</code> <code>export default</code> 注意哟 少个 S</p>
<p><code>module.exports</code> 是 <strong>CommonJS模块规范</strong> <code>export</code> 是 node 的一个简写,不用你写那么多了</p>
<p><code>export</code> <code>export default</code> 是 <strong>ES6模块规范</strong> <code>export default</code>就是为模块指定默认输出</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.exports 例子</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> addX = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value + x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.x = x;</span><br><span class="line"><span class="built_in">module</span>.exports.addX = addX;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> example = <span class="built_in">require</span>(<span class="string">'./example.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(example.x); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(example.addX(<span class="number">1</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//export 例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 有这个优势吧,可以分开引入部分内容 exports 可能就不行吧 .我是这么觉得的</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName &#125; <span class="keyword">from</span> <span class="string">'demo1'</span></span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>这个文章很好,讲的很详细<br><a href="http://www.cnblogs.com/fayin/p/6831071.html" target="_blank" rel="noopener">module.exports与exports，export与export default之间的关系和区别</a></p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[弹性盒子(flexible box) 定位属性 align-content  justify-content align-items align-self]]></title>
      <url>http://elickzhao.github.io/2017/07/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90(flexible%20box)%20%E5%AE%9A%E4%BD%8D%E5%B1%9E%E6%80%A7%20align-content%20%20justify-content%20align-items%20align-self/</url>
      <content type="html"><![CDATA[<p><strong>align-content:</strong><br>在弹性容器内的各项没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直）。请注意本属性在只有一行的伸缩容器上没有效果。<br><a href="http://www.runoob.com/try/playit.php?f=playcss_align-content&amp;preval=stretch" target="_blank" rel="noopener">测试效果页</a><br><a href="http://css.doyoe.com/properties/flex/align-content.htm" target="_blank" rel="noopener">说明文章页</a></p>
<p><strong>justify-content:</strong><br>设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。当弹性盒里一行上的所有子元素都不能伸缩或已经达到其最大值时，这一属性可协助对多余的空间进行分配。当元素溢出某行时，这一属性同样会在对齐上进行控制。</p>
<p><a href="http://www.runoob.com/try/playit.php?f=playcss_justify-content&amp;preval=flex-start" target="_blank" rel="noopener">测试效果页</a><br><a href="http://css.doyoe.com/properties/flex/justify-content.htm" target="_blank" rel="noopener">说明文章页</a></p>
<p><strong>align-items:</strong><br>align-items 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。<br>提示：使用每个弹性对象元素的 align-self 属性可重写 align-items 属性。</p>
<p><a href="http://www.runoob.com/try/playit.php?f=playcss_align-items&amp;preval=stretch" target="_blank" rel="noopener">测试效果页</a><br><a href="http://css.doyoe.com/properties/flex/align-items.htm" target="_blank" rel="noopener">说明文章页</a></p>
<p><strong>align-self:</strong><br>align-self 属性定义flex子项单独在侧轴（纵轴）方向上的对齐方式。。<br>注意：align-self 属性可重写灵活容器的 align-items 属性。</p>
<p><a href="http://www.runoob.com/try/playit.php?f=playcss_align-self&amp;preval=auto" target="_blank" rel="noopener">测试效果页</a><br><a href="http://css.doyoe.com/properties/flex/align-self.htm" target="_blank" rel="noopener">说明文章页</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 严格模式(use strict)]]></title>
      <url>http://elickzhao.github.io/2017/07/JavaScript%20%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F(use%20strict)/</url>
      <content type="html"><![CDATA[<p>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。<br>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。<br>“use strict” 的目的是指定代码在严格条件下执行。</p>
<p>会限制一些写法,并且提示一些错误.据说可以加速js的运行速度<br>具体改进了那些内容可以看第二个文章.里面写的特别详细了.</p>
<p><a href="http://ourjs.com/detail/52f572bf4534c0d806000024" target="_blank" rel="noopener">为什么使用”use strict”可以节约你的时间</a><br><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">Javascript 严格模式详解</a><br><a href="http://www.runoob.com/js/js-strict.html" target="_blank" rel="noopener">JavaScript 严格模式(use strict)</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mock.js 模拟随机测试数据]]></title>
      <url>http://elickzhao.github.io/2017/07/Mock.js%20%E6%A8%A1%E6%8B%9F%E9%9A%8F%E6%9C%BA%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>这个东西用起来简单并且强大,不过现在可能不太流行了.因为这个配合jquery比较多.</p>
<p>直接随机产生数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://mockjs.com/dist/mock.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 使用 Mock</span></span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'list|1-10'</span>: [&#123;</span><br><span class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'&lt;pre&gt;'</span>).text(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">.appendTo(<span class="string">'body'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 3</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>这个是拦截Ajax,返回模拟数据.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(<span class="string">'http://g.cn'</span>, &#123;</span><br><span class="line">    <span class="string">'name'</span>     : <span class="string">'@name'</span>,</span><br><span class="line">    <span class="string">'age|1-100'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'color'</span>    : <span class="string">'@color'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://g.cn'</span>,</span><br><span class="line">    dataType:<span class="string">'json'</span></span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line">    )    </span><br><span class="line">&#125;)；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">// 结果1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Elizabeth Hall"</span>,</span><br><span class="line"><span class="string">"age"</span>: <span class="number">91</span>,</span><br><span class="line"><span class="string">"color"</span>: <span class="string">"#0e64ea"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Michael Taylor"</span>,</span><br><span class="line"><span class="string">"age"</span>: <span class="number">61</span>,</span><br><span class="line"><span class="string">"color"</span>: <span class="string">"#081086"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://jsfiddle.net/nzcsxd76/" target="_blank" rel="noopener">官方的 JSFiddle 例子 不明白可以看看这个</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://segmentfault.com/a/1190000003087224#articleHeader11" target="_blank" rel="noopener">使用Mock.js进行独立于后端的前端开发</a><br><a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> mock </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js继承 extend mixin]]></title>
      <url>http://elickzhao.github.io/2017/06/js%E7%BB%A7%E6%89%BF%20extend%20mixin/</url>
      <content type="html"><![CDATA[<p>这两个说有用也有用,说没用也没用,这是因为必须这个类支持这两个方法才能用,如果不支持是用不了的<br>现在又有个什么<code>Composition</code> 不过这个还没来得及看</p>
<p><strong>mixin</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _   = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> _db = <span class="built_in">require</span>(<span class="string">'lodash-id'</span>);</span><br><span class="line"></span><br><span class="line">_.mixin(_db);</span><br></pre></td></tr></table></figure></p>
<p><strong>extend</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//_应该是lodash 这是个插件或者说类</span></span><br><span class="line">_.extend(app.locals, <span class="built_in">require</span>(’./common/render_helpers’));</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/qiqingjin/article/details/51762435" target="_blank" rel="noopener"> JavaScript-mixin实现多继承</a><br><a href="http://cnodejs.org/topic/5413e4ce8518442c62f3b503" target="_blank" rel="noopener">http://cnodejs.org/topic/5413e4ce8518442c62f3b503</a><br><a href="http://www.open-open.com/news/view/1245b26" target="_blank" rel="noopener">Mixin 已死，Composition 万岁</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用 html5+js+css vue 开发个桌面应用 -Electron]]></title>
      <url>http://elickzhao.github.io/2017/06/%E7%94%A8%20html5+js+css%20vue%20%E5%BC%80%E5%8F%91%E4%B8%AA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%20-Electron/</url>
      <content type="html"><![CDATA[<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>想用js开发桌面现在有两个框架可以用 <strong>Electron</strong> 另外一个是 <strong>nwjs</strong>.<br>但感觉还是用 <strong>Electron</strong>比较好,因为现在一些流行的软件是那这个弄的,比如说我现在用的 <strong>Atom</strong> ,<strong>VSCode</strong> 这两个软件都非常好用,而且漂亮.<br>另外还有个原因是,他有中文文档.这样实在是方便太多了</p>
<h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>这里主要编写个 <strong>Electron</strong> 启动配置文件.是 <code>package.json</code> 里的 <code>main</code> 字段的文件.<br><strong>注意</strong>：如果 main 字段没有在 package.json 声明，Electron会优先加载 index.js。<br>剩下的就是编写自己的程序了就行了.</p>
<p>贴两个配置文件样本.<br>一 <strong>这是官方的例子</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span></span><br><span class="line"><span class="comment">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建浏览器窗口。</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载应用的 index.html。</span></span><br><span class="line">    win.loadURL(url.format(&#123;</span><br><span class="line">        pathname: path.join(__dirname, <span class="string">'dist/index_prod.html'</span>),</span><br><span class="line">        protocol: <span class="string">'file:'</span>,</span><br><span class="line">        slashes: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">//win.loadURL('http://localhost:8080')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开开发者工具。</span></span><br><span class="line">    win.webContents.openDevTools();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 window 被关闭，这个事件会被触发。</span></span><br><span class="line">    win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span></span><br><span class="line">        <span class="comment">// 通常会把多个 window 对象存放在一个数组里面，</span></span><br><span class="line">        <span class="comment">// 与此同时，你应该删除相应的元素。</span></span><br><span class="line">        win = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Electron 会在初始化后并准备</span></span><br><span class="line"><span class="comment">// 创建浏览器窗口时，调用这个函数。</span></span><br><span class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当全部窗口关闭时退出。</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></span><br><span class="line">    <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></span><br><span class="line">    <span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></span><br><span class="line">    <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">        createWindow()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></span><br><span class="line"><span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>二 <strong>这个项目<a href="https://github.com/fwon/electron-anyproxy/blob/master/main.js" target="_blank" rel="noopener">electron-anyproxy</a>的例子</strong></p>
<blockquote>
<p>贴这个例子是因为这里有个程序启动页面,这个不错<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> menuTemplate = <span class="built_in">require</span>(<span class="string">'./menu.js'</span>);</span><br><span class="line"><span class="keyword">const</span> ipcMain = electron.ipcMain;</span><br><span class="line"><span class="keyword">const</span> app = electron.app;</span><br><span class="line"><span class="keyword">const</span> Menu = electron.Menu;</span><br><span class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</span><br><span class="line"><span class="comment">//启动页面参数</span></span><br><span class="line"><span class="keyword">let</span> loadingParams = &#123;</span><br><span class="line">    width: <span class="number">580</span>,</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    frame: <span class="literal">false</span>,</span><br><span class="line">    show: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//主页面参数</span></span><br><span class="line"><span class="keyword">let</span> mainParams = &#123;</span><br><span class="line">    width: <span class="number">1300</span>,</span><br><span class="line">    height: <span class="number">780</span>,</span><br><span class="line">    icon: __dirname + <span class="string">'/icon.png'</span>,</span><br><span class="line">    <span class="comment">// titleBarStyle: 'hidden-inset',</span></span><br><span class="line">    backgroundColor: <span class="string">'#fff'</span>,</span><br><span class="line">    show: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWindow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mainWindow = <span class="keyword">new</span> BrowserWindow(mainParams);</span><br><span class="line">    mainWindow.setTitle(<span class="built_in">require</span>(<span class="string">'./package.json'</span>).name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setting in .vscode/launch.json</span></span><br><span class="line">    <span class="comment">//测试时可以这么写 但是必须启动静态服务器才行</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'develop'</span>);</span><br><span class="line">        mainWindow.loadURL(<span class="string">'http://localhost:4000'</span>);</span><br><span class="line">        mainWindow.webContents.openDevTools();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//完成后打包时 必须加载生成的静态页才行.</span></span><br><span class="line">        <span class="comment">//这个写法比较好 比上面那个简单些</span></span><br><span class="line">        mainWindow.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/client/index.html`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个监听页面加载完成显示</span></span><br><span class="line">    mainWindow.webContents.on(<span class="string">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class="line">        mainWindow.show();</span><br><span class="line">        <span class="comment">//主页面加载完毕显示,把启动页关闭.</span></span><br><span class="line">        <span class="keyword">if</span> (loadingScreen) &#123;</span><br><span class="line">            loadingScreen.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试工具 这是我添加的</span></span><br><span class="line">    mainWindow.webContents.openDevTools();</span><br><span class="line"></span><br><span class="line">    mainWindow.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">        mainWindow = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建启动页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLoadingScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这里加了父页面的参数不知道是何用</span></span><br><span class="line">    loadingScreen = <span class="keyword">new</span> BrowserWindow(<span class="built_in">Object</span>.assign(loadingParams, &#123; <span class="attr">parent</span>: mainWindow &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">        loadingScreen.loadURL(<span class="string">'http://localhost:4000/loading.html'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        loadingScreen.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/client/loading.html`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadingScreen.on(<span class="string">'closed'</span>, () =&gt; loadingScreen = <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//这个感觉是没必要的</span></span><br><span class="line">    loadingScreen.webContents.on(<span class="string">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class="line">        loadingScreen.show();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是个菜单模版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> menu = Menu.buildFromTemplate(menuTemplate);</span><br><span class="line">    Menu.setApplicationMenu(menu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">    createLoadingScreen();</span><br><span class="line">    createWindow();</span><br><span class="line">    createMenu();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</span><br><span class="line">        createWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试话就用 <strong>webpace</strong> 打开服务器测试就好.然后 <strong>electron</strong> 打开页面.<br>但配置一定要这么写.这样你修改的时候浏览器和程序都会自动更新了,能即时发现问题.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadingScreen.loadURL(<span class="string">'http://localhost:4000/loading.html'</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>打包需要安装另外一个插件<br><a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="noopener">electron-packager</a></p>
<p>这是简单的配置说明</p>
<blockquote>
<ul>
<li>location of project：项目所在路径</li>
<li>name of project：打包的项目名字</li>
<li>platform：确定了你要构建哪个平台的应用（Windows、Mac 还是 Linux）</li>
<li>architecture：决定了使用 x86 还是 x64 还是两个架构都用</li>
<li>electron version：electron 的版本</li>
<li>optional options：可选选项</li>
<li>ignore : 忽略打包目录  (但我测试没什么效果啊)</li>
<li>overwrite : 好像是打包后会把上一个删除</li>
</ul>
</blockquote>
<p>这个插件可以全局安装,这样就可以使用全局命令 <code>electron-packager</code>.<br>当然也可以安装到项目里.然后放到 <code>package.json</code>里,使用 <code>npm</code>命令启动<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"electron ."</span>,</span><br><span class="line">  <span class="string">"pack"</span>: <span class="string">"electron-packager . Anyproxy --out=pack --overwrite --ignore=client/node_modules --icon=icon.icns"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>打包会下载 <strong>electron</strong> 不同操作系统框架,但是这个包下载比较麻烦.还有另外一个打包方式<br>这就是另一个方式 其实就是指定了一个镜像<br><code>ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ electron-packager</code><br>但这里还有个问题是, 同时启动了 <code>webpack</code> 不知道是干什么用<br>这段出自 <a href="https://github.com/TooBug/TooNote/blob/master/src/package.json" target="_blank" rel="noopener">TooNote</a> 这个项目<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"TooNote"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.3.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Markdown based note app."</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"electron.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack -w"</span>,</span><br><span class="line">    <span class="attr">"prod"</span>: <span class="string">"NODE_ENV=production webpack"</span>,</span><br><span class="line">    <span class="attr">"prod-win"</span>: <span class="string">"set NODE_ENV=production&amp;&amp; webpack"</span>,</span><br><span class="line">    <span class="attr">"run"</span>: <span class="string">"electron ."</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"npm-run-all -p -r dev run"</span>,</span><br><span class="line">    <span class="attr">"cloud"</span>: <span class="string">"CLOUD=1 npm-run-all -p -r dev run"</span>,</span><br><span class="line">    <span class="attr">"build:osx"</span>: <span class="string">"npm run prod&amp;&amp; ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ electron-packager . --overwrite --arch=all --icon=../assets/logo.icns --out=../dist --ignore=\"^/(?:api|component|models|modules|vuex)\" --ignore=\"/windows\" --ignore=\"\\.map$\" --ignore=\"node_modules/(?:d[$/]|babel-core|es5\\-ext|vue/src|vue/types|remarkable/dist|[\\w\\-]+/benchmark|[\\w\\-]+/test|[\\w\\-]+/docs|[\\w\\-]+/demo|brace/mode/[^m])\""</span>,</span><br><span class="line">    <span class="attr">"build:win"</span>: <span class="string">"npm run prod-win&amp;&amp; set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/&amp;&amp; electron-packager . --overwrite --arch=all --icon=../assets/logo.ico --out=../dist --win32metadata.CompanyName=\"TooNote\" --win32metadata.ProductName=\"TooNote\" --win32metadata.FileDescription=\"TooNote\" --ignore=\"^/(?:api|component|models|modules|vuex)\" --ignore=\"/osx\" --ignore=\"\\.map$\" --ignore=\"node_modules/(?:d[$/]|babel-core|es5\\-ext|vue/src|vue/types|remarkable/dist|[\\w\\-]+/benchmark|[\\w\\-]+/test|[\\w\\-]+/docs|[\\w\\-]+/demo|brace/mode/[^m])\""</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>
<p><strong>打包加密</strong><br>此时打包完毕,但是源文件目录会放在<code>resources</code>,这总让人感觉不太舒服.这时就需要 <code>asar</code>了.</p>
<p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev asar</span><br></pre></td></tr></table></figure></p>
<p>使用:同上面一样放在package.json 当作一个命令.当然也可以全局安装.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;build:asar&quot;: &quot;asar pack . app.asar&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">npm run build:asar</span><br></pre></td></tr></table></figure></p>
<p>发现打包完毕,把 <code>app.asar</code> 复制到 <code>resources</code> 里,然后把源文件目录 <code>app</code> 删除就好了<br>启动看看吧 应该成功了</p>
<p><strong>注意</strong>:<br>下面这句可能是谣传啊,我测试后发现大小好像没有明显改变. 我又试了几次 完全没看出效果来</p>
<blockquote>
<ul>
<li>打包时建议用yarn安装npm包，因为npm install会在node_modules中安装隐藏目录，导致electron-packager打包的时候无法将electron等大文件删除，打包出来的软件包会很大。</li>
<li>安装 electron 包过慢（国内情况）的解决方法：<br>临时方式： DEBUG=<em> ELECTRON_MIRROR=”<a href="https://npm.taobao.org/mirrors/electron/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/electron/</a>“ npm install electron<br>加入DEBUG=</em>是为了查看调试信息，确认下载源是否替换成功。<br>我再windows下使用这个命令不好使啊</li>
</ul>
</blockquote>
<h2 id="扩展包"><a href="#扩展包" class="headerlink" title="扩展包"></a>扩展包</h2><p><a href="https://electron.atom.io/community/" target="_blank" rel="noopener">Electron社区 这里有很多扩展包</a><br>|包名|说明|<br>|–|–|<br>|<a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="noopener">electron-packager</a>| 打包成绿色包 直接能用<br>|<a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">electron-builder</a>| 打包成安装包<br>|<a href="https://github.com/SimulatedGREG/vue-electron" target="_blank" rel="noopener">vue-electron</a> |好像是让vue程序 可以用electron APIs<br>|<a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">electron-vue</a> |这是个模版项目 . <code>vue-init simulatedgreg/electron-vue my-project</code> 这样使用.<br>||linux和windows命令不同要注意.这里的是windows的,linux是 vue init|<br>|<a href="https://github.com/electron/asar" target="_blank" rel="noopener">asar</a>|可以把程序打包成asar,这样看起来更简洁,而且容易出现胡乱改动,造成程序不可用|</p>
<p>electron-vue 命令解释<br><code>pack</code>: 这是指原来的build 打包静态页 打包后放在 dist/electron里<br><code>pack:renderer</code>按道理这个应该放在dist/web下的但却没有<br><code>build</code> 结果这个是打包成exe文件 还有一点千万不要用 electron-builder 真的很差 不能选路径 界面很丑</p>
<h2 id="待解决"><a href="#待解决" class="headerlink" title="待解决"></a>待解决</h2><p><del>只是把vue打包好的静态文件加载到了 Electron 这一步倒是很简单<br>我现在想做到的是,<code>vue</code> 不用 <code>build</code>,直接用 <code>Electron</code> 打包成程序,但好像是不行啊.<br>打完包后源文件还在,而且不能删除,这个好像有点不对吧,应可以删除的吧,以后可以看看</del></p>
<hr>
<p>第一个问题解决方法经过查看是,把两部写成一个命令就好了<br>第二个问题使用asar打包成asar包,就可以把源文件给删除了.其实也是只防君子不防小人.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/terrylin/p/4938693.html" target="_blank" rel="noopener">用HTML5+JS开发跨平台的桌面应用</a><br><a href="http://get.ftqq.com/7870.get" target="_blank" rel="noopener">用Electron开发桌面应用</a><br><a href="https://github.com/electron/electron" target="_blank" rel="noopener">Electron Github仓库</a><br><a href="https://github.com/electron/electron/tree/master/docs-translations/zh-CN" target="_blank" rel="noopener">Electron 中文文档</a><br><a href="http://nwjs.io/" target="_blank" rel="noopener">nwjs官方网站</a><br><a href="https://www.zhihu.com/question/36644309" target="_blank" rel="noopener">这里有两个例子,其中一个是vue的</a><br><a href="http://blog.csdn.net/arvin0/article/details/52690023" target="_blank" rel="noopener">【Electron】Electron开发入门（五）：项目打包</a><br><a href="https://aotu.io/notes/2016/11/15/xcel/" target="_blank" rel="noopener">XCel 项目总结 - Electron 与 Vue 的性能优化</a><br><a href="https://github.com/TooBug/TooNote" target="_blank" rel="noopener">TooNotez 一个实例项目</a><br><a href="https://blog.callmewhy.com/2016/07/01/make-calculator-with-electron/" target="_blank" rel="noopener">使用 Electron 开发一款理财计算器</a><br><a href="https://segmentfault.com/a/1190000004863646" target="_blank" rel="noopener">从零开始使用Electron + jQuery开发桌面应用 （二） 打包应用</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> node.js </tag>
            
            <tag> Electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6 新函数 Promise 简介]]></title>
      <url>http://elickzhao.github.io/2017/06/ES6%20%E6%96%B0%E5%87%BD%E6%95%B0%20Promise%20%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>这就是Promise的作用了，简单来讲，就是能把原来的回调写法分离出来，在异步操作执行完后，用链式调用的方式执行回调函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">            <span class="comment">//执行成功后 执行这个回调</span></span><br><span class="line">            resolve(<span class="string">'随便什么数据'</span>);</span><br><span class="line">            <span class="comment">//reject是失败</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line">runAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data+<span class="string">'-------'</span>);</span><br><span class="line">    <span class="comment">//后面可以用传过来的数据做些其他操作</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>功能相同</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">        callback(<span class="string">'随便什么数据'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runAsync(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>优点:</strong></p>
<p>效果也是一样的，还费劲用Promise干嘛。那么问题来了，有多层回调该怎么办？如果callback也是一个异步操作，而且执行完后也需要有相应的回调函数，该怎么办呢？总不能再定义一个callback2，然后给callback传进去吧。而Promise的优势在于，可以在then方法中继续写Promise对象并返回，然后继续调用then来进行回调操作。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync3();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>reject的用法</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>); <span class="comment">//生成1-10的随机数</span></span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">                resolve(num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                reject(<span class="string">'数字太大了'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getNumber()</span><br><span class="line">.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">reason, data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(reason);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>catch的用法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(somedata); <span class="comment">//此处的somedata未定义</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>注意:</strong><br>效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中。</p>
<p><strong>all的用法</strong><br>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'第一个执行完成'</span>);</span><br><span class="line">            <span class="comment">//执行成功后 执行这个回调</span></span><br><span class="line">            resolve(<span class="string">'随便什么数据'</span>);</span><br><span class="line">            <span class="comment">//reject是失败</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'第二个执行完成'</span>);</span><br><span class="line">            <span class="comment">//执行成功后 执行这个回调</span></span><br><span class="line">            resolve(<span class="string">'随便什么数据'</span>);</span><br><span class="line">            <span class="comment">//reject是失败</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'第三个执行完成'</span>);</span><br><span class="line">            <span class="comment">//执行成功后 执行这个回调</span></span><br><span class="line">            resolve(<span class="string">'随便什么数据'</span>);</span><br><span class="line">            <span class="comment">//reject是失败</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span></span><br><span class="line">    .all([runAsync1(), runAsync2(), runAsync3()])</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>race的用法</strong><br>all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」，这就是race方法，这个词本来就是赛跑的意思。</p>
<p><strong>上面例子的测试</strong></p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/MI4nkz/share/result,js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><strong>这篇文章好棒</strong><br><a href="http://www.jianshu.com/p/063f7e490e9a" target="_blank" rel="noopener">Javascript 中的神器——Promise</a><br><a href="http://www.cnblogs.com/lvdabao/p/es6-promise-1.html" target="_blank" rel="noopener">大白话讲解Promise（一）</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack-dev-server 的 Node.js Api方式和CLI 方式 两种用法]]></title>
      <url>http://elickzhao.github.io/2017/06/webpack-dev-server%20%E7%9A%84%20Node.js%20Api%E6%96%B9%E5%BC%8F%E5%92%8CCLI%20%E6%96%B9%E5%BC%8F%20%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>CLI 方式会比Node.js Api方式简单很多.<br>Node.js Api方式 如果配置热启动 还需要配置 webpack.HotModuleReplacementPlugin 而且有时还得安装 webpack-hot-middleware 额外的插件</p>
<p>还有需要特别注意的地方是 <strong>publicPath必填</strong><br>使用Node.js Api方式 结果还是不能自动更新.因为这个方法实在问题太多,最后还是使用了命令行</p>
<p>还有一点 入口配置一定要这么写 <code>entry: [&quot;webpack-dev-server/client?http://localhost:8080&quot;],</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//就到这里吧 热更新也做了 可惜就是不自动刷新浏览器</span></span><br><span class="line"><span class="comment">//[WDS] App hot update... (执行到这里就不走了)</span></span><br><span class="line"><span class="comment">//dev-server.js:45 [HMR] Checking for updates on the server... (就差这一句 不知道为啥)</span></span><br><span class="line"><span class="comment">//这个写法真心没有命令行简单啊</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(</span><br><span class="line">  compiler,</span><br><span class="line">  &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">    quiet: <span class="literal">true</span>,</span><br><span class="line">    publicPath: <span class="string">'/dist/'</span>,   <span class="comment">//publicPath必填 否则就不好使</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    setup(app, ctx) &#123;</span><br><span class="line">      app.use(hotMiddleware)</span><br><span class="line">      ctx.middleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>直接看这里吧</strong><br><a href="http://www.cnblogs.com/hhhyaaon/p/5664002.html" target="_blank" rel="noopener">http://www.cnblogs.com/hhhyaaon/p/5664002.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs 的 cross-env 的使用及介绍]]></title>
      <url>http://elickzhao.github.io/2017/06/nodejs%20%E7%9A%84%20cross-env%20%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>这个小插件主要解决 windows 下 无法设置 <code>NODE_ENV=development</code> 这个东西. 因为程序可以根据 NODE的环境变量,做出不同选择.</p>
<p>这个在 <strong>linux</strong> 下是可以设置的,但在 <strong>windows</strong> 下不行</p>
<p><strong>安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install across-env --save-dev</span><br></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br>在package.json里,需要设置环境的地方加上这句就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cross-env NODE_ENV=development</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://segmentfault.com/a/1190000005811347" target="_blank" rel="noopener">使用cross-env解决跨平台设置NODE_ENV的问题</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于child_process中的exec和spawn]]></title>
      <url>http://elickzhao.github.io/2017/06/%E5%85%B3%E4%BA%8Echild_process%E4%B8%AD%E7%9A%84exec%E5%92%8Cspawn/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是篇转发,因为原文写的实在是太明白了. <a href="http://cnodejs.org/topic/507285c101d0b80148f7c538" target="_blank" rel="noopener">http://cnodejs.org/topic/507285c101d0b80148f7c538</a></p>
</blockquote>
<p>开始学习child_process模块的时候以为spawn可以直接运行命令, 后来发现这是一个小陷阱就拿出来和大家分享一下.</p>
<p>先说下我碰到的情况由于在windos下写的所以根据docs上的例子我就写出了这么一句代码:”require(“child_process”).spawn(“dir”), 这么写是会有错误的,用error接受到的数据是没有此文件. 而用exec就不会有问题,于是得到了以前的猜想.</p>
<p>大家都知道在linux下, ls命令对应的是一个文件, 而在windows下是做为cmd的内置命令的. 所以像我那样写是会报错.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">于是我查看了child_process的源码发现spawn是这样定义的<span class="keyword">var</span> spawn = exports.spawn = <span class="function"><span class="keyword">function</span>(<span class="params">file, args, options</span>); 也就是说他传入的应该是一个文件, 例如<span class="title">ping</span>, <span class="title">cmd</span>等. 而<span class="title">exec</span>的源码中有一段这样的代码:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">if</span> (<span class="params">process.platform === <span class="string">'win32'</span></span>) </span>&#123;</span><br><span class="line">file = <span class="string">'cmd.exe'</span>;</span><br><span class="line">args = [<span class="string">'/s'</span>, <span class="string">'/c'</span>, <span class="string">'"'</span> + command + <span class="string">'"'</span>];</span><br><span class="line"><span class="comment">// Make a shallow copy before patching so we don't clobber the user's</span></span><br><span class="line"><span class="comment">// options object.</span></span><br><span class="line">options = util._extend(&#123;&#125;, options);</span><br><span class="line">options.windowsVerbatimArguments = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  file = <span class="string">'/bin/sh'</span>;</span><br><span class="line">  args = [<span class="string">'-c'</span>, command];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以想使用内置命令可以直接使用exec或者把spawn改成spawn(“cmd.exe”,[“\s”, “\c”, “dir”]);</p>
<p>总结起来就是spawn是调用一个文件! 不要被docs上的child_process.spawn(command, [args], [options])中的command给骗了</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛,又拍云,阿里oss这类网站的了解]]></title>
      <url>http://elickzhao.github.io/2017/06/%E4%B8%83%E7%89%9B,%E5%8F%88%E6%8B%8D%E4%BA%91,%E9%98%BF%E9%87%8Coss%E8%BF%99%E7%B1%BB%E7%BD%91%E7%AB%99%E7%9A%84%E4%BA%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>用来给WordPress加速（用作图床、下载、CDN等）</strong></p>
<p>七牛云是和国内第二大CDN提供商网宿合作的，所以他们的加速效果应该是非常给力的。根据个人的实际体验来看，确实很不错。七牛云可以为站点提供静态文件加速，比如js、CSS、图片、音乐等文件都可以缓存在七牛云的服务器上，当有访问请求时，大量的静态资源由七牛云承担了，这会极大的提升网页打开速度。</p>
<p>根据PING测试，七牛云的CDN节点远远多于安全宝、加速乐一类。不仅国内节点数有压倒性优势，在国外还有美国、英国等节点，这绝对是其他免费CDN做不到的。同时还赠送了10GB存储空间和每月10GB流量，相信有些比较爱折腾的站长已经用上了，如果您还没用七牛的话，推荐您使用：</p>
</blockquote>
<p>这类网站主要的用户是做CDN加速.其次是做图床和静态分离.这样能好加快应用速度吧.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.izhuyue.com/1528.html" target="_blank" rel="noopener">七牛云使用心得</a><br><a href="https://www.upyun.com/solutions/mobile" target="_blank" rel="noopener">又拍云解决方案简介</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node.js 自建简易服务]]></title>
      <url>http://elickzhao.github.io/2017/06/node.js%20%E8%87%AA%E5%BB%BA%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>废话先不多说,代码就是如下这么简单.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./dist'</span>)) <span class="comment">//指定目录</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p>下面这个是参考文档里的写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(<span class="string">"/public"</span>, express.static(__dirname + <span class="string">'/public'</span>));  <span class="comment">//访问路径写到一起了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务端</span></span><br><span class="line">http.createServer(app).listen(<span class="string">'80'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'启动服务器完成'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>然后执行 <code>node app.js</code> 就可以启动服务器了. app.js 就是上面配置所保存的文件名.</p>
<a id="more"></a>
<p>上面用的是<code>express</code>,用<code>http-server</code>的话就更简单,不需要自己写配置直接用命令就可以启动了.<br>不过这个需要全局安装才行,要不不会有命令的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果你的当前项目中存在 public 文件夹,那么默认静态目录会指定到 public</span></span><br><span class="line"><span class="comment">//如果没有 public 文件夹,那么静态目录就是 根目录</span></span><br><span class="line"><span class="comment">//所以要哪个目录充当静态服务器的根目录 就得进入哪个目录执行下面命令</span></span><br><span class="line">http-server -a <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">7070</span></span><br></pre></td></tr></table></figure>
<p><strong>下面开始唠叨:</strong></p>
<p>因为现在做动静分离的后台程序,所以需要前端的静态服务器.在本地时单击打开静态文件,有时因为所需插件原因.<br>也是无法打开的,必须放在静态服务器.所以这时就需要上面的东西了.<br>关于设置静态服务器的必要性 看看这里 <a href="https://segmentfault.com/q/1010000004050694?_ea=470962" target="_blank" rel="noopener">是否有必要为网站的静态资源设置一个单独的服务器?</a>能了解到不少东西.</p>
<p>这两个搭建服务器的插件 <code>express</code>和 <code>http-server</code> 都得先安装才能用.不过呢 因为项目里有时用到别的插件.<br>比如 <code>webpace</code>的时候 <code>express</code>就不用特别安装了.因为已经包涵在里面.但是<code>http-server</code>使用的范围不是那么广,所以必须安装.</p>
<p>还有就是下面参考文档里说,<code>http-server</code>比<code>express</code>要小巧,不过从下载的包来看,并不是如此.可能指的的是功能上吧. 而且<code>express</code>可以操作数据库,这可能对我要写的程序有点用处.</p>
<p>##参考文档<br><a href="https://my.oschina.net/obullxl/blog/163049" target="_blank" rel="noopener">Node.js用6行代码1个JS文件搭建一个HTTP静态服务器</a><br><a href="http://yijiebuyi.com/blog/b0f6ddc56be457e13879a3ad105f561b.html" target="_blank" rel="noopener">随笔 http-server 快速创建node.js 静态服务器</a><br><a href="http://yijiebuyi.com/blog/359ff66c69934c178dfa8baa32427aef.html" target="_blank" rel="noopener">http-server Angular.js 后端node服务首选 轻量级替换 Express 解决方案</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue + iview后台实例问题总结  vue学习问题总结]]></title>
      <url>http://elickzhao.github.io/2017/06/vue%20+%20iview%E5%90%8E%E5%8F%B0%E5%AE%9E%E4%BE%8B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%20%20vue%E5%AD%A6%E4%B9%A0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="vue组件模版编写规则"><a href="#vue组件模版编写规则" class="headerlink" title="vue组件模版编写规则"></a>vue组件模版编写规则</h2><p><strong>main.vue</strong> 在组件里 所有的样式必须放在一个 <code>&lt;div&gt;&lt;/div&gt;</code> 标签里 否则会出错.<br> 这个标签可以指定 默认为 <code>class=index</code> 这个看教程时已经知道,只是做的时候又给忘记了</p>
<hr>
<h2 id="vue组件开始之前执行组件方法的方法-呵呵"><a href="#vue组件开始之前执行组件方法的方法-呵呵" class="headerlink" title="vue组件开始之前执行组件方法的方法.呵呵"></a>vue组件开始之前执行组件方法的方法.呵呵</h2><ol>
<li><p><strong>Vue.nextTick(function () {   })</strong></p>
<blockquote>
<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 因为有的插件需要操作DOM 但是DOM还没创建出来时 会出现问题  <strong>这个也是如此无法用this</strong> <a href="https://segmentfault.com/a/1190000008570874" target="_blank" rel="noopener">我理解的关于Vue.nextTick()的正确使用</a></p>
</blockquote>
</li>
<li><p><strong>created:function(){}</strong></p>
<blockquote>
<p>这个也可以的 这是钩子程序 但是这个时期 DOM没有创建出来</p>
</blockquote>
</li>
<li><p><strong>mounted: function (){}</strong></p>
<blockquote>
<p>这个也是vue生命周期中一个钩子,这个就是加载完组件,生成了DOM的时候,所这个可以用,需要对DOM进行操作的程序可以放在这里执行</p>
</blockquote>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记性真是不好上一次还知道怎么用,下一次就又忘了 现在放在这</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        particlesJS(<span class="string">'particles-js'</span>, particles_config)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>4.<strong>beforeRouteEnter(to, from, next) {}</strong></p>
<blockquote>
<p>这是vue-router的一个钩子,在进入路由之前调用一个函数,这个也是可行的,这个有时会有问题 如果路由没跳转,那么就不会执行了 <strong>但是无法执行组件的方法,因为this是不存在的</strong><br>用另一个方法就可以使用组件内部的方法了,<strong>而且更神器的是插件居然执行了</strong>. <code>new Particleground.particle(&#39;#canvas&#39;, options);</code> 这个插件一直不执行的,只有触发他所在的方法<code>handleStart()</code>才会执行.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">        vm.handleStart()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,   <span class="attr">methods</span>: &#123;</span><br><span class="line">    handleStart() &#123;</span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">            color: <span class="string">'#FFF'</span>, <span class="comment">//['#2d8cf0', '#19be6b', '#ff9900', '#ed3f14'],</span></span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">            range: <span class="number">300</span>,</span><br><span class="line">            linewidth: <span class="number">1</span>,</span><br><span class="line">            maxSpeed: <span class="number">1</span>,</span><br><span class="line">            maxR: <span class="number">5</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这个就更奇葩了.因为是类 不是函数 结果必须在方法里靠点击才能运行 其他的一概不执行 而且他运行也不像文档里写的必须引入particles.js 也够怪的</span></span><br><span class="line">        <span class="keyword">new</span> Particleground.particle(<span class="string">'#canvas'</span>, options);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"cccccccccccccc"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>5.又找到个办法可以使用 <code>new Particleground.particle(&#39;#canvas&#39;, options);</code>就是这么些</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">    color: <span class="string">'#FFF'</span>, <span class="comment">//['#2d8cf0', '#19be6b', '#ff9900', '#ed3f14'],</span></span><br><span class="line">    num: <span class="number">100</span>,</span><br><span class="line">    proximity:<span class="number">100</span>,  <span class="comment">//点点连线距离,只有两点小于这个距离才会连线,值太大的话连线会很密的</span></span><br><span class="line">    range: <span class="number">1300</span>,    <span class="comment">//点点连线的范围 值越大范围越大 太小的话即使达到距离 也有些点不连线</span></span><br><span class="line">    linewidth: <span class="number">1</span>,</span><br><span class="line">    maxSpeed: <span class="number">1</span>,</span><br><span class="line">    maxR: <span class="number">5</span>,</span><br><span class="line">    lineShape:<span class="string">'cube'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个效果和上面的 beforeRouteEnter(to, from, next) &#123;&#125; 是一直的 而且我这次升级了 Particleground</span></span><br><span class="line"><span class="comment">//现在叫JParticles 参数更多了一些</span></span><br><span class="line"><span class="comment">//呵呵 又发现个区别啊  document.ready 就不可以 只能用 window.onload</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JParticles.particle(<span class="string">'#canvas'</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6.这三个的加载顺序很有趣, beforeRouteEnter -&gt; Vue.nextTick -&gt; created 看来created是创建组件的时候</p>
<p>7.<del>放在export default {}的js代码也会被执行的,而且好像是页面渲染完成后执行的.</del> <strong>这句当时不知道怎么写的,好像是错了.</strong> 这里只能放,函数和属性,是没法使用js代码段的</p>
<hr>
<h2 id="老插件及不能用NPM安装的插件引用"><a href="#老插件及不能用NPM安装的插件引用" class="headerlink" title="老插件及不能用NPM安装的插件引用"></a>老插件及不能用NPM安装的插件引用</h2><p>用<strong>webpack</strong>创建的项目,引用这种插件很费事.而且不能用CND,也许能用只是我没找到方法.<br>看下面的文章,有好几个方法,不过都很麻烦.<br>不过我发现好像直接用 <code>import particlesJS from &#39;../libs/particles.js&#39;;</code><br>也是能找到正确位置的,但是否可用没测试 以后再说吧.</p>
<p>下面这个方法是我现在用的.<br><code>var particlesJS = require(&#39;exports-loader?window.particlesJS!../libs/particles.js&#39;);</code><br>记住一定用 <strong>npm</strong> 安装 <strong>exports-loader</strong>  这样就可以使用自己下载的插件了.<br>而且还解决了另外一个问题.以为<strong>particlesJS</strong>是个老插件,他没有现代的模块方式开发,所以用<strong>npm</strong>安装了,<strong>import</strong>了也是无法使用的.所以必须用<strong>exports-loader</strong>转换一下,这样<strong>particlesJS</strong>的方法就可用了.</p>
<p>参考文档<br><a href="https://segmentfault.com/a/1190000007020623" target="_blank" rel="noopener">如何在 vue 项目里正确地引用 jquery 和 jquery-ui的插件</a></p>
<hr>
<h2 id="插件的选择-有些插件不可以用"><a href="#插件的选择-有些插件不可以用" class="headerlink" title="插件的选择,有些插件不可以用."></a>插件的选择,有些插件不可以用.</h2><p>这次就遇到了这个问题.<br>一 有可能是插件太老,引用后无法使用.会提示这个不是方法.<br>二 就是这个插件写的有问题,使用时是个类必须new 比如 <code>new Particleground.particle(&#39;#canvas&#39;, options);</code> 这个不是方法,所以无法自动执行,必须放在vue的方法里触发才可以.幸好如上面讲到的,<br>用vue-router里的钩子程序能触发 所以就一点用都没有了. 至于这个插件的写法以后研究下.</p>
<hr>
<h2 id="webpace打包后单击静态文件显示空白内容"><a href="#webpace打包后单击静态文件显示空白内容" class="headerlink" title="webpace打包后单击静态文件显示空白内容"></a>webpace打包后单击静态文件显示空白内容</h2><p>看到 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 加载内容为空.判断为这个插件出问题了.</p>
<p>最后发现,是 <code>vue-router</code> 的配置,<code>mode</code> 这个有三个选项 <code>&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;</code><br>必须选择 <code>hash</code>,否则的话必须用静态服务器访问才行,单击打开文件是不行的.<br><code>history</code>的 url路径会美观不少,不过就是必须用静态服务器了</p>
<p><strong>注意:</strong></p>
<ol>
<li>在用本地服务器测试的时候. 用<code>nodejs</code>写的简易服务器,必须装载 <code>express</code>模块.<br>我这里并没有把<code>express</code>装到全局里,所以在其他目录是不好用的.但是项目目录里因为<code>webpace</code>使用了<code>express</code>,所以没有特别装也没问题.</li>
<li>用 <code>phpstudy</code>充当服务器的时候,必须指定域名.如果不指定域名的话也是一片空白的.</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> RouterConfig = &#123;</span><br><span class="line">    mode: <span class="string">'hash'</span>,   <span class="comment">//哦 的确如此 必须用hash才能打包成静态页</span></span><br><span class="line">    routes: Routers</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Node-js-Api方式使用"><a href="#Node-js-Api方式使用" class="headerlink" title="Node.js Api方式使用"></a>Node.js Api方式使用</h2><p>就是把命令行模式,转换写到程序里.不过这个方式写起来太复杂了<br>哦 热启动还有一点 如果不行这么写 <code>entry: [&quot;webpack-dev-server/client?http://localhost:8080&quot;],</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = webpack(rendererConfig)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//就到这里吧 热更新也做了 可惜就是不自动刷新浏览器</span></span><br><span class="line"> <span class="comment">//[WDS] App hot update... (执行到这里就不走了)</span></span><br><span class="line"> <span class="comment">//dev-server.js:45 [HMR] Checking for updates on the server... (就差这一句 不知道为啥)</span></span><br><span class="line"> <span class="comment">//这个写法真心没有命令行简单啊</span></span><br><span class="line"> <span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(</span><br><span class="line">   compiler,</span><br><span class="line">   &#123;</span><br><span class="line">     contentBase: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">     quiet: <span class="literal">true</span>,</span><br><span class="line">     publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">     hot: <span class="literal">true</span>,</span><br><span class="line">     compress: <span class="literal">true</span>,</span><br><span class="line">     historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">     setup(app, ctx) &#123;</span><br><span class="line">       app.use(hotMiddleware)</span><br><span class="line">       ctx.middleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         resolve()</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> )</span><br><span class="line"> server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
<p><a href="http://elickzhao.github.io/2017/06/webpack-dev-server%20%E7%9A%84%20Node.js%20Api%E6%96%B9%E5%BC%8F%E5%92%8CCLI%20%E6%96%B9%E5%BC%8F%20%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95/">webpack-dev-server 的 Node.js Api方式和CLI 方式 两种用法</a></p>
<hr>
<h2 id="webpack输出文件设置"><a href="#webpack输出文件设置" class="headerlink" title="webpack输出文件设置"></a>webpack输出文件设置</h2><p>这里 <code>path</code>已经设置<code>publicPath</code>不设置也可以,设置的话有可能出现引入错误<br><code>filename</code> 也不用设置位置了.这样直接全部生成在 <code>dist</code> 目录下<br>如果<code>publicPath</code>设置了,css和js会保存在那里.但是html会在根目录</p>
<p><strong>注意</strong>: <del>总是忘记啊 <strong>json</strong> 配置文件里是不能添加注释的 否则会报错</del> 是 <strong>package.json</strong> 注释会报错</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">    publicPath: <span class="string">''</span>,</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash].chunk.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'index_prod.html'</span>,</span><br><span class="line">        template: <span class="string">'./src/template/index.ejs'</span>,</span><br><span class="line">        inject: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="在iview里build和dev模版"><a href="#在iview里build和dev模版" class="headerlink" title="在iview里build和dev模版"></a>在iview里build和dev模版</h2><p>在iview里dev的时候用的是根目录的 <strong>index.html</strong> 因为dev的时候是css等静态文件是不加版本号<br>所以可以在<strong>index.html</strong>里写死 <code>&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/main.js&quot;&gt;&lt;/script&gt;</code></p>
<p>在build的时候,用的是 <code>src/template/index.ejs</code> 所以这里必须加这个 <code>&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%= htmlWebpackPlugin.files.js[1] %&gt;&quot;&gt;&lt;/script&gt;</code> 否则就无法添加带版本号的静态文件了</p>
<p>所以 在iview里 build 和 dev 是分开的. 他们的 <code>config</code>文件也不一样所以修改时要注意</p>
<hr>
<h2 id="这里需要修改啊"><a href="#这里需要修改啊" class="headerlink" title="这里需要修改啊"></a>这里需要修改啊</h2><p>现在遇到的问题是我的 粒子插件的配置文件遇到了跨域请求问题. 而且他不能自动拷贝到<code>dist</code>目录下.<br>虽然报错写着这个,目录没有这个文件,可是拷过去依然没用</p>
<hr>
<h2 id="版本号插件输出信息问题"><a href="#版本号插件输出信息问题" class="headerlink" title="版本号插件输出信息问题"></a>版本号插件输出信息问题</h2><p>因为在做 <strong>electron</strong> 的时候,打包时需要用个效果插件.但是<code>process</code>其他信息都不会输出,唯独这个会输出个信息,应该是那里有问题,但是并影响使用,所以到现在也没仔细研究.就算 <strong>webpack</strong>  的显示进度 也会被他打断.</p>
<p><strong>这个以后有空解决下吧</strong></p>
<p><del>还有一点是在强调下,json不能有注释. 唉 总忘记</del> 这句是错的是 <strong>package.json</strong>不能有注释</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">    loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">        loaders: &#123;</span><br><span class="line">            css: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                use: [<span class="string">'css-loader'</span>, <span class="string">'autoprefixer-loader'</span>], <span class="comment">//加这个 autoprefixer-loader 就报错  有个输出 以后再考虑吧 反正现在可以用了 就是不是最完美样子</span></span><br><span class="line">                <span class="comment">//use: ['css-loader'],</span></span><br><span class="line">                fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: ExtractTextPlugin.extract(&#123;    <span class="comment">//这里去除这个插件就会找不到带版本号的插件了</span></span><br><span class="line">        use: [<span class="string">'css-loader?minimize'</span>, <span class="string">'autoprefixer-loader'</span>],  <span class="comment">// 这个也是 这个autoprefixer-loader 好像是版本选择</span></span><br><span class="line">        <span class="comment">//use: ['css-loader?minimize'],  </span></span><br><span class="line">        fallback: <span class="string">'style-loader'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="简易服务器返回静态文件这么写"><a href="#简易服务器返回静态文件这么写" class="headerlink" title="简易服务器返回静态文件这么写"></a>简易服务器返回静态文件这么写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//res.send('Hello World')     //这里注意下因为生成的静态页不是index.html标准名称 所以不会显示</span></span><br><span class="line">  res.sendFile( path.join(__dirname,  <span class="string">'./dist/index_prod.html'</span>))    <span class="comment">//一定是绝对路径</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="使用-yarn-千万要注意"><a href="#使用-yarn-千万要注意" class="headerlink" title="使用 yarn 千万要注意"></a>使用 yarn 千万要注意</h2><p><code>yarn</code> 虽然速度比 <code>npm</code> 快很多,但总会出现莫名其妙的问题.我有个项目前两天运行正常,今天再打开一大堆报错.说各种文件找不到<br>用 <code>yarn</code> 重装一遍也不行,没办法用 <code>npm</code>重装 一切都好了</p>
<p>所以 用<code>yarn</code>千万要小心, 要不项目一开始就用,千万别中间再用</p>
<hr>
<h2 id="webpack复制指定目录到dist生成目录"><a href="#webpack复制指定目录到dist生成目录" class="headerlink" title="webpack复制指定目录到dist生成目录"></a>webpack复制指定目录到dist生成目录</h2><p>使用这个插件<a href="https://github.com/kevlened/copy-webpack-plugin" target="_blank" rel="noopener">copy-webpack-plugin</a>就ok了<br>用法很简单<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CopyWebpackPlugin([&#123;    <span class="comment">//还有就是这个参数必须是数组才行,哪怕只有一个</span></span><br><span class="line">            <span class="keyword">from</span>:<span class="string">'./src/assets'</span>,</span><br><span class="line">            to:<span class="string">'assets'</span> <span class="comment">//因为上面已经有了输出路径,所以不需要写两次了</span></span><br><span class="line">        &#125;]),</span><br><span class="line">        ......</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="vue报错-template-or-render-function-not-defined"><a href="#vue报错-template-or-render-function-not-defined" class="headerlink" title="vue报错 template or render function not defined"></a>vue报错 template or render function not defined</h2><p><strong>问题产生:</strong> <a href="http://cn.vuejs.org/v2/guide/installation.html#独立构建-vs-运行时构建" target="_blank" rel="noopener">独立构建-vs-运行时构建</a> 这就是问题根源,webpack运行的不是完整vue,所以不包含解析<code>template</code>.这里需要在<code>webpack</code>设置里天上这句.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">            <span class="string">'vue'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>有的地方说是 <code>vue.common.js</code> 其实一样看下面官方说明<br><a href="https://vuefe.cn/v2/guide/installation.html#不同构建版本的解释说明" target="_blank" rel="noopener">不同构建版本的解释说明</a></p>
<p><strong>问题解决:</strong><br>但是我这个不是这么解决的,这还多亏了,vue-router里的提示</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">    <span class="comment">//原本应该这么写  ff:require(['./aa.vue']) 就可以了 不知道这个 resolve 是哪里起的作用以后查查</span></span><br><span class="line">    ff:<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'./aa.vue'</span>], resolve)  <span class="comment">//这么写组件就可以用了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>下面两个文章都不错,第一个讲解的非常深入,第二个是最开始的解决办法,现在好像不实用了,不过也可以了解下问题的起因.</p>
<p><a href="http://blog.csdn.net/csdn_yudong/article/details/59109902" target="_blank" rel="noopener">从一个奇怪的错误出发理解 Vue 基本概念</a><br><a href="https://segmentfault.com/q/1010000007099099?_ea=1236628" target="_blank" rel="noopener">vue2.0组件注册的问题</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm安装时报错 却无明确提示的原因]]></title>
      <url>http://elickzhao.github.io/2017/06/npm%E5%AE%89%E8%A3%85%E6%97%B6%E6%8A%A5%E9%94%99%20%E5%8D%B4%E6%97%A0%E6%98%8E%E7%A1%AE%E6%8F%90%E7%A4%BA%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>唉 今天又遇到了.只不过是自己脑袋短路了.我想使用 <code>element-ui</code> 结果创建个项目文件夹也叫 <code>element-ui</code>.<br>所以进去之后 如何 <code>npm i element-ui -S</code> 都不好使.<br>后来发现了问题,就改了文件名,一切就ok了<br>所以 切记 切记啊!</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codepen使用方法]]></title>
      <url>http://elickzhao.github.io/2017/06/codepen%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>嗯 现在基本用法都会了,如果忘记就看下面网站吧.有点复制了.以后遇到需要提醒的再写.</p>
<p>哦 对了 现在快捷键已经和下面文章里写的不同了.如果想单独放大一个编辑栏,比如js的,就点右边的倒三角符号,然后能看到maxjsEditor 这个就是扩大编辑区域了.不过这个扩大了也没有jsbin用起来舒服.不过jsbin保存实在太恶心了.只是用Github的gist所以保存很烦.而且jsbin好像不能对外分享,所以用那个写一下还可以,如果要分享还是用别的吧.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.zhangxinxu.com/wordpress/2012/07/codepen-jsfiddle/" target="_blank" rel="noopener">见多识广：CodePen项目网站简介</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSFiddle使用说明]]></title>
      <url>http://elickzhao.github.io/2017/06/JSFiddle%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>额.下面的文章写的超详细,真的不想再复制一遍了.这里就把菜单说明一下吧,因为这个总是糊涂.</p>
<p><img src="http://images.cnitblog.com/blog/250316/201312/16094918-3b163908b00c41e5bd6271151c88452d.png" alt=""><br><strong>保存前</strong><br><img src="http://images.cnitblog.com/blog/250316/201312/16094928-a94cdd36c5034dca8e868da5c5ef721d.png" alt=""><br><strong>保存后</strong></p>
<p><strong>Save:</strong></p>
<p>将当前编辑的内容保存到服务器上，方便下次调用和分享。如果你只是想测试用的话是不需要保存的。</p>
<p><strong>Update：</strong></p>
<p>将当前的状态保存为一个版本。类似于版本控制，会在URL后面加上一个数字。之前的版本还会存在，方便后期调试。</p>
<p><strong>Fork:</strong></p>
<p>把现在的项目复制到一个新的文件当中。</p>
<p><strong>Base:</strong></p>
<p>出现在没有进行Update的项目当中，表明这是最初效果，只是一个标识符。</p>
<p><strong>Set as base:</strong></p>
<p>出现在非初始版本的项目中。可点击，作用是把当前版本变成最初版本，原先的初始版本会被删除。</p>
<p><strong>Share:</strong></p>
<p>提供了分享的三种形式。</p>
<p><strong>Run:</strong></p>
<p>点击运行代码，结果会在result中显示。</p>
<p><strong>Debug on mobile:</strong></p>
<p>在手机端调试。</p>
<p><strong>Tidyup:</strong></p>
<p>格式化代码。</p>
<p><strong>JSHint:</strong></p>
<p>调试js代码。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/qdlife/p/3476178.html" target="_blank" rel="noopener">在线前端代码展示分享神器-JSFiddle</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[three.js学习及小例子]]></title>
      <url>http://elickzhao.github.io/2017/06/three.js%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>一个例子</p>
<iframe width="100%" height="300" src="//jsfiddle.net/elick/bvyn9bks/embedded/" allowfullscreen="allowfullscreen" frameborder="0"><br><br>自己弄的小方块<br><iframe width="100%" height="450" src="https://code.hcharts.cn/blog-demo/NKRncT/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>粒子波动</p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/blog-demo/BCVncz/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://techbrood.com/threejs/docs/" target="_blank" rel="noopener">three.js中文文档</a><br><a href="http://techbrood.com/zh/news/html5/webgl%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B1---3d%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_2.html" target="_blank" rel="noopener">WebGL入门教程1 - 3D绘图基础知识</a></p>
<h2 id="学习文章"><a href="#学习文章" class="headerlink" title="学习文章"></a>学习文章</h2><p><a href="http://www.css88.com/archives/5996/comment-page-1" target="_blank" rel="noopener">three.js实现的波浪效果</a><br><a href="http://www.tuicool.com/articles/Y3Ab2a" target="_blank" rel="noopener">WebGL学习笔记-使用3D引擎threeJS实现星空粒子移动</a><br><a href="http://www.cnblogs.com/kmsfan/p/4824178.html" target="_blank" rel="noopener"> 第一篇就画一个球体吧</a><br><a href="http://www.th7.cn/web/js/201607/178491.shtml" target="_blank" rel="noopener">Three.js基础探寻四——立方体、平面与球体</a></p>
</iframe>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端背景特效总结一波]]></title>
      <url>http://elickzhao.github.io/2017/06/%E5%89%8D%E7%AB%AF%E8%83%8C%E6%99%AF%E7%89%B9%E6%95%88%E6%80%BB%E7%BB%93%E4%B8%80%E6%B3%A2/</url>
      <content type="html"><![CDATA[<p><a href="https://alloyteam.github.io/curvejs/" target="_blank" rel="noopener">魔幻线条curvejs</a> <code>这个感觉实用性不强</code></p>
<p><a href="https://www.zybuluo.com/mdeditor#" target="_blank" rel="noopener">粒子特效插件particles-自己的文章</a><br><a href="https://github.com/Barrior/JParticles" target="_blank" rel="noopener">JParticles是多个特效的一个整合</a></p>
<p><a href="https://github.com/kennethcachia/shape-shifter" target="_blank" rel="noopener">shape-shifter 用粒子组成文字</a><br><a href="http://www.kennethcachia.com/shape-shifter/" target="_blank" rel="noopener">shape-shifter Demo</a></p>
<p><a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener">anime.js 动画库 </a> <code>其实跟上面的不同 但可以用这个做许多特效 而且例子不错</code></p>
<p><a href="https://github.com/greensock/GreenSock-JS/" target="_blank" rel="noopener">GreenSock-JS 动画库</a> <code>这个动画的例子真的很棒</code><br><a href="https://greensock.com/examples-showcases" target="_blank" rel="noopener">GreenSock-JS DEMO</a><br><a href="http://www.w2bc.com/Article/9438" target="_blank" rel="noopener">TweenMax的实例</a><br><a href="http://www.jq22.com/code312" target="_blank" rel="noopener">TweenMax的实例2</a></p>
<blockquote>
<p>看来TweenMax用来做菱形这个背景应该是很拿手的 有空可以看一下</p>
</blockquote>
<a id="more"></a>
<p><a href="https://github.com/rishabhp/bideo.js" target="_blank" rel="noopener">HTML5 Background Video</a></p>
<p><a href="http://www.qdfuns.com/notes/14464/3be240066e8ab4d47f0fd65e2a3060c5.html" target="_blank" rel="noopener">H5腾讯QQ登录界面背景动画特效</a></p>
<p><strong>不断生成的粒子特效</strong></p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/UdMnLu/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>其实是three.js的一个例子</strong><br><a href="https://threejs.org/examples/#canvas_particles_waves" target="_blank" rel="noopener">HTML5 3D 粒子波浪动画特效</a></p>
<iframe height="265" scrolling="no" title="vZYYyj" src="//codepen.io/elick/embed/vZYYyj/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/elick/pen/vZYYyj/" target="_blank" rel="noopener">vZYYyj</a> by elick (<a href="https://codepen.io/elick" target="_blank" rel="noopener">@elick</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe>


<p><strong>菱形背景特效</strong></p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/dNSn6G/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>固定版菱形背景特效</strong></p>
<p><iframe width="100%" height="450" src="https://code.hcharts.cn/test123/dHMn6w/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br><a href="https://github.com/qrohlf/trianglify" target="_blank" rel="noopener">用的是这个 trianglify插件</a></p>
<p><strong>用three.js做的低多边形 这个是我比较喜欢的</strong><br><a class="jsbin-embed" href="http://jsbin.com/niluwa/embed?js,console,output" target="_blank" rel="noopener">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?4.0.2"></script></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[particlesJS 粒子背景的库 使用简介]]></title>
      <url>http://elickzhao.github.io/2017/06/particlesJS%20%E7%B2%92%E5%AD%90%E8%83%8C%E6%99%AF%E7%9A%84%E5%BA%93%20%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/rUMngq/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>使用方法:</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动画容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"particles-js"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 库引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"particles.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置及使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="css">这句很关键 如果不设置的话大小总会出现偏移的 不过按照官方的说应该是 <span class="selector-id">#particles-js</span> 也就是容器<span class="selector-tag">id</span> 可不知道为啥是<span class="selector-tag">canvas</span>类名</span></span><br><span class="line"><span class="undefined">还有个问题就是我这个文件不知道从哪里来的,好像跟从官方复制的不一样,把Github上的复制到文件里就报错了</span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="css"><span class="selector-class">.particles-js-canvas-el</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    display: block;</span></span><br><span class="line"><span class="undefined">    top: 0;</span></span><br><span class="line"><span class="undefined">    left: 0;</span></span><br><span class="line"><span class="css">    <span class="comment">/*z-index:-1;*/</span> <span class="comment">/*有的说这句必须加 要不会阻挡前面内容 不过我这次用的时候没出现 反而会多退后一层*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意: 如果下次样式还出现偏移,就按原来官方的试试 使用#particles-js 写样式</p>
</blockquote>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* particlesJS.load(@dom-id, @path-json, @callback (optional)); */</span></span><br><span class="line"><span class="comment">/* particles.json 是具体的 配置内容 */</span></span><br><span class="line">particlesJS.load(<span class="string">'particles-js'</span>, <span class="string">'assets/particles.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'callback - particles.js config loaded'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>配置解说:</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"> &#123;	//dom标签</span><br><span class="line">    "particles": &#123;</span><br><span class="line">        "number": &#123; //粒子的数量</span><br><span class="line">            "value": 80,</span><br><span class="line">            "density": &#123;  //粒子的稀密程度 这个轻易别该 会死机 越大越稀疏</span><br><span class="line">                "enable": true,</span><br><span class="line">                "value_area": 1000  // 每一个粒子占据的空间</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "color": &#123;</span><br><span class="line">            "value": ['#2d8cf0', '#19be6b', '#ff9900', '#ed3f14'] //粒子颜色 （支持16进制”#b61924”，rgb”&#123;r:182, g:25, b:36&#125;”，hsl，以及random）['#2d8cf0', '#19be6b', '#ff9900', '#ed3f14']</span><br><span class="line">        &#125;,</span><br><span class="line">        "image": &#123;  //如果使用图片 这里设置</span><br><span class="line">            "src": "img/github.svg",</span><br><span class="line">            "width": 100,</span><br><span class="line">            "height": 100</span><br><span class="line">        &#125;,</span><br><span class="line">        "shape": &#123;</span><br><span class="line">            "type": "circle", // 粒子的形状 （”circle” “edge” “triangle” “polygon” “star” “image”）</span><br><span class="line">            "stroke": &#123; // 粒子边缘线条 宽度和颜色</span><br><span class="line">                "width": 0,</span><br><span class="line">                "color": "#000000"</span><br><span class="line">            &#125;,</span><br><span class="line">            "polygon": &#123;  //多变形状,不太理解</span><br><span class="line">                "nb_sides": 5</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        "opacity": &#123;</span><br><span class="line">            "value": 0.75,  //粒子透明度 (0~1)</span><br><span class="line">            "random": true,  //随机透明度</span><br><span class="line">            "anim": &#123;</span><br><span class="line">                "enable": false,  //开启动画 这样粒子的透明度将不断变化</span><br><span class="line">                "speed": 1,     //数值越大 速度变化越快</span><br><span class="line">                "opacity_min": 0.1, //应该是透明变化幅度</span><br><span class="line">                "sync": false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "size": &#123;</span><br><span class="line">            "value": 10,  //粒子大小</span><br><span class="line">            "random": true,</span><br><span class="line">            "anim": &#123;</span><br><span class="line">                "enable": false, //大小动画</span><br><span class="line">                "speed": 40,</span><br><span class="line">                "size_min": 0.1,</span><br><span class="line">                "sync": false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "line_linked": &#123;  //连线</span><br><span class="line">            "enable": true,</span><br><span class="line">            "distance": 150,  //相距多少连线</span><br><span class="line">            "color": "#ffffff",</span><br><span class="line">            "opacity": 0.4, //透明度</span><br><span class="line">            "width": 1</span><br><span class="line">        &#125;,</span><br><span class="line">        "move": &#123;</span><br><span class="line">            "enable": true, //如果关闭了 就没有画面了</span><br><span class="line">            "speed": 4,   //越大速度越快</span><br><span class="line">            "direction": "none", //移动方向 none碰撞运动</span><br><span class="line">            "random": false,   //粒子随机运动了 也没物理特性了</span><br><span class="line">            "straight": false,   //静止 </span><br><span class="line">            "out_mode": "out",  //粒子是否可以出边缘 out/bounce</span><br><span class="line">            "bounce": false,      //粒子之间是否碰撞</span><br><span class="line">            "attract": &#123;       //这个不知道是干啥的 好像粒子互相吸引</span><br><span class="line">                "enable": false,</span><br><span class="line">                "rotateX": 600,</span><br><span class="line">                "rotateY": 1200</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "interactivity": &#123;</span><br><span class="line">        "detect_on": "canvas",</span><br><span class="line">        "events": &#123;</span><br><span class="line">            "onhover": &#123;  //鼠标是否互动</span><br><span class="line">                "enable": false,</span><br><span class="line">                "mode": "repulse" //互动模式 ["grab", "bubble","repulse"] 第一个是连线 第二个粒子放大  第三个是推开</span><br><span class="line">            &#125;,</span><br><span class="line">            "onclick": &#123;</span><br><span class="line">                "enable": false,</span><br><span class="line">                "mode": "repulse"  //点击特效 "push" ["push", "remove","bubble" ,"repulse"] push是添加 其他的和上面一样</span><br><span class="line">            &#125;,</span><br><span class="line">            "resize": true  //重画不太懂干什么用的</span><br><span class="line">        &#125;,</span><br><span class="line">        "modes": &#123;  //这里是模式的设置</span><br><span class="line">            "grab": &#123;</span><br><span class="line">                "distance": 140,</span><br><span class="line">                "line_linked": &#123;</span><br><span class="line">                    "opacity": 1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "bubble": &#123;</span><br><span class="line">                "distance": 400,</span><br><span class="line">                "size": 40,</span><br><span class="line">                "duration": 2,</span><br><span class="line">                "opacity": 8,</span><br><span class="line">                "speed": 3</span><br><span class="line">            &#125;,</span><br><span class="line">            "repulse": &#123;</span><br><span class="line">                "distance": 200,</span><br><span class="line">                "duration": 0.4</span><br><span class="line">            &#125;,</span><br><span class="line">            "push": &#123;</span><br><span class="line">                "particles_nb": 4</span><br><span class="line">            &#125;,</span><br><span class="line">            "remove": &#123;</span><br><span class="line">                "particles_nb": 2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "retina_detect": true //不知道干啥的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>例子:</strong><br>自己的</p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/rUMngq/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>星空</p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/rUMngq/2/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>经典</p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/rUMngq/1/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>泡泡版</p>
<iframe width="100%" height="450" src="https://code.hcharts.cn/test123/rUMngq/3/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>##参考文档<br><a href="https://github.com/VincentGarreau/particles.js" target="_blank" rel="noopener">Github仓库</a><br><a href="http://blog.csdn.net/csdn_yudong/article/details/53128570" target="_blank" rel="noopener">particlesJS使用简介</a></p>
<p><strong>这个是个整合 其配置比上面简单很多  但本质还是上面的particles</strong><br><a href="https://jparticles.js.org/#/" target="_blank" rel="noopener">jparticles.js</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VSCode 自定义代码块  snippet]]></title>
      <url>http://elickzhao.github.io/2017/05/VSCode%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E5%9D%97%20%20snippet/</url>
      <content type="html"><![CDATA[<h2 id="什么是-snippet"><a href="#什么是-snippet" class="headerlink" title="什么是 snippet"></a>什么是 snippet</h2><p>snippet[ˈsnɪpɪt]，或者说「code snippet」，指的是能够帮助输入重复代码模式串，比如循环或条件语句，的模板。通过 snippet ，我们仅仅输入一小段代码就可以生成预定义的模板代码，甚至可以通过内部跳转快速补全模板。</p>
<p><img src="http://img.blog.csdn.net/20170112141959764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFva2Vsb25nOTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<a id="more"></a>
<h2 id="如何配置-snippet"><a href="#如何配置-snippet" class="headerlink" title="如何配置 snippet"></a>如何配置 snippet</h2><p>操作流程</p>
<ol>
<li>进入 snippet 设置文件<ol>
<li>这里提供了两种方法：</li>
<li>按「Alt」键切换菜单栏，通过文件 &gt; 首选项 &gt; 用户代码片段，选择进入目的语言的代码段设置文件；<br>通过快捷键「Ctrl + Shift + P」打开命令窗口（all command window），输入「snippet」，通过候选栏中的选项进入目的语言的代码段设置文件。</li>
</ol>
</li>
<li>填写 snippets</li>
</ol>
<p><strong>例子</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 // Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line"><span class="comment">	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line"><span class="comment">	 // $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span></span><br><span class="line"><span class="comment">	 // same ids are connected.</span></span><br><span class="line"><span class="comment">	 // Example:</span></span><br><span class="line"><span class="comment">	 "Print to console": &#123;</span></span><br><span class="line"><span class="comment">		"prefix": "log",</span></span><br><span class="line"><span class="comment">		"body": [</span></span><br><span class="line"><span class="comment">			"console.log('$1');",</span></span><br><span class="line"><span class="comment">			"$2"</span></span><br><span class="line"><span class="comment">		],</span></span><br><span class="line"><span class="comment">		"description": "Log output to console"</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//这是个json格式的文件</span></span><br><span class="line">	<span class="string">"Print to for"</span>: &#123;</span><br><span class="line">		<span class="string">"prefix"</span>: <span class="string">"forz"</span>,   <span class="comment">//快捷输入</span></span><br><span class="line">		<span class="string">"body"</span>: [           <span class="comment">//格式代码构成</span></span><br><span class="line">			<span class="string">"for(var  $&#123;1:i&#125; = 0; $&#123;1:i&#125; &lt; $&#123;2:len&#125;; $&#123;1:i&#125;++ )&#123;"</span>,</span><br><span class="line">				<span class="string">"	$0"</span>,</span><br><span class="line">			<span class="string">"&#125;"</span></span><br><span class="line">		],</span><br><span class="line">		<span class="string">"description"</span>: <span class="string">"for循环快速编写		for(var i = 0; i &lt; len; i++ )&#123;			...		&#125; 	"</span>   <span class="comment">//注释</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="snippet-由三部分组成："><a href="#snippet-由三部分组成：" class="headerlink" title="snippet 由三部分组成："></a>snippet 由三部分组成：</h2><ul>
<li>prefix：前缀，定义了 snippets 从 IntelliSense 中呼出的关键字;</li>
<li>body： 主体，即模板的主体内容，其中每个字符串表示一行;</li>
<li>description：说明，会在 IntelliSense 候选栏中出现。未定义的情况下直接显示对象名，上例中将会显示 Print to console。</li>
</ul>
<p>其中 body 部分可以使用特殊结构来控制光标和要插入的文本。 支持的功能及其文法如下：</p>
<ul>
<li><p>Tabstops：制表符</p>
<blockquote>
<p>用「Tabstops」可以让编辑器的指针在 snippet 内跳转。使用 $1，$2 etc. 指定光标位置。<br>这些数字指定了Tabstops将被访问的顺序，特别地，$0表示最终光标位置。<br>相同序号的「Tabstops」被链接在一起，将会同步更新.<br>比如下列用于生成头文件封装的 snippet 被替换到编辑器上时，光标就将同时出现在所有$1位置。</p>
</blockquote>
</li>
<li><p>Placeholders：占位符</p>
<blockquote>
<p>「placeholder」是带有默认值的「Tabstops」，如${1：foo}。「placeholder」文本将被插入「Tabstops」位置，并在跳转时被全选，以方便修改。占位符还可以嵌套，例如${1:another ${2:placeholder}}。</p>
</blockquote>
</li>
<li><p>Variables：变量</p>
<blockquote>
<p>使用$name或${name:default}可以插入变量的值。 当未设置变量时，将插入其缺省值或空字符串。 当varibale未知（即，其名称未定义）时，将插入变量的名称，并将其转换为「placeholder」。 可以使用以下「Variable」：</p>
<ul>
<li>TM_SELECTED_TEXT：当前选定的文本或空字符串</li>
<li>TM_CURRENT_LINE：当前行的内容</li>
<li>TM_CURRENT_WORD：光标下的单词的内容或空字符串</li>
<li>TM_LINE_INDEX：基于零索引的行号</li>
<li>TM_LINE_NUMBER：基于一索引的行号</li>
<li>TM_FILENAME：当前文档的文件名</li>
<li>TM_DIRECTORY：当前文档的目录</li>
<li>TM_FILEPATH：当前文档的完整文件路径<br><strong>注意，这些都是变量名，不是宏，在实际使用的时候还是要加上$符的。</strong></li>
</ul>
</blockquote>
</li>
</ul>
<blockquote>
<p>拓展阅读：官网也给出了 snippet 的 EBNF 范式的正则文法，注意，使用\（反斜杠）转义\$, ,, }和\。<br>any ::= tabstop | placeholder | variable | text<br>tabstop ::= ‘$’ int | ‘${‘ int ‘}’<br>placeholder ::= ‘${‘ int ‘:’ any ‘}’<br>variable ::= ‘$’ var | ‘${‘ var }’ | ‘${‘ var ‘:’ any ‘}’<br>var ::= [_a-zA-Z] [_a-zA-Z0-9]<em><br>int ::= [0-9]+<br>text ::= .</em></p>
</blockquote>
<p>有用的建议</p>
<p>默认情况下 snippet 在 IntelliSense 中的显示优先级并不高，而且在 IntelliSense 中选择相应 snippet 需要按「enter」键，这对于手指短的人来说并不是什么很好的体验。所幸，VSCode 意识到了这一点，并为我们提供了改进的方式。</p>
<p>在 VSCode 的用户设置（「Ctrl+P」在输入框中写「user settings」后点选）中，检索代码段，然后根据提示修改，设置建议优先显示，并且可以通过「TAB」补全 snippet。</p>
<p><img src="http://img.blog.csdn.net/20170112155152376?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFva2Vsb25nOTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/maokelong95/article/details/54379046" target="_blank" rel="noopener">http://blog.csdn.net/maokelong95/article/details/54379046</a></p>
]]></content>
      
        
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Atom 自定义快捷键]]></title>
      <url>http://elickzhao.github.io/2017/05/Atom%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>用了很多的编辑器,但是编辑的快捷方式都不一样是个麻烦的事.<br>Atom有因为有众多的插件,所以快捷键记不清,而且和自己喜欢用的不一样,更是平常事.</p>
<p>这时就需要自己定义快捷键了. Atom自己定义快捷键实在是方便.找到插件快捷键,他会提供个复制按钮.<br>这是你只要复制,然后去setting里的Keybindings,然后点击用户键盘映射,就会出现个文件,把刚才复制的粘贴到这里.<br>然后修改成自己想要的快捷键就行了.真的很方便.以后要是不要了删除就行了,又恢复到默认了.</p>
]]></content>
      
        
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[打算写一个nodejs发送请求 做的一些准备]]></title>
      <url>http://elickzhao.github.io/2017/05/%E6%89%93%E7%AE%97%E5%86%99%E4%B8%80%E4%B8%AAnodejs%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%20%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%86%E5%A4%87/</url>
      <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/20179805" target="_blank" rel="noopener">如何从零开始写一个 Chrome 扩展？</a><br><a href="http://www.cnblogs.com/walkingp/archive/2011/03/31/2001628.html" target="_blank" rel="noopener">手把手教你开发chrome扩展一：开发Chrome Extenstion其实很简单</a><br><a href="http://blog.csdn.net/leironghao/article/details/8555243" target="_blank" rel="noopener">node.js 操作Cookies</a><br><a href="https://www.zhihu.com/question/33888915" target="_blank" rel="noopener">nodejs怎么设置cookie？</a><br><a href="http://www.cnblogs.com/zj0208/p/6249759.html" target="_blank" rel="noopener">Chrome浏览器查看cookie</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 草稿 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新一代laravel配合vue的框架]]></title>
      <url>http://elickzhao.github.io/2017/05/%E6%96%B0%E4%B8%80%E4%BB%A3laravel%E9%85%8D%E5%90%88vue%E7%9A%84%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p><a href="https://docs.notadd.com/#/v1.0/zh-CN/installations/compile" target="_blank" rel="noopener">Notadd官方文档</a><br><a href="https://github.com/notadd/notadd" target="_blank" rel="noopener">git仓库</a><br><a href="https://github.com/notadd/docs/blob/master/installations/module.md" target="_blank" rel="noopener">模块的安装</a><br><a href="https://github.com/notadd/docs/blob/master/installations/extension.md" target="_blank" rel="noopener">插件安装</a></p>
<p>理念不错的,不过现在还是测试版.问题多多啊.git上的下载下来无法安装.等以后版本成熟的时候再看一下吧</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片素材网站设计参考大收集]]></title>
      <url>http://elickzhao.github.io/2017/04/%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99%E5%A4%A7%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>国外优秀图片:<br><a href="http://www.gettyimages.ca/" target="_blank" rel="noopener">http://www.gettyimages.ca/</a></p>
<p>酷站网老牌图片网<br><a href="http://www.zcool.com.cn/" target="_blank" rel="noopener">http://www.zcool.com.cn/</a></p>
<p>免费图片国外的 不错<br><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></p>
<p>超过389883 张免费照片和图片 (这次不知为啥打不开)<br><a href="cn.freeimages.com/">cn.freeimages.com/</a></p>
<p>提图网<br><a href="http://699pic.com/" target="_blank" rel="noopener">http://699pic.com/</a></p>
<p>千图网<br><a href="http://www.58pic.com/" target="_blank" rel="noopener">http://www.58pic.com/</a></p>
<p>昵图网<br><a href="www.nipic.com">www.nipic.com</a></p>
<p>包图网<br><a href="http://888pic.com/" target="_blank" rel="noopener">http://888pic.com/</a></p>
<p>素材天下<br><a href="http://www.sucaitianxia.com/" target="_blank" rel="noopener">http://www.sucaitianxia.com/</a></p>
<p>各种psd很不错</p>
<h2 id="http-cn-365psd-com"><a href="#http-cn-365psd-com" class="headerlink" title="http://cn.365psd.com/"></a><a href="http://cn.365psd.com/" target="_blank" rel="noopener">http://cn.365psd.com/</a></h2><p>另一种意义上的图片素材网站</p>
<p>堆糖<br><a href="https://www.duitang.com/people/?user_id=1726301847#!favalbum" target="_blank" rel="noopener">https://www.duitang.com/people/?user_id=1726301847#!favalbum</a></p>
<p>花瓣<br><a href="http://huaban.com/" target="_blank" rel="noopener">http://huaban.com/</a></p>
<p>UE设计平台<br><a href="http://www.uehtml.com/" target="_blank" rel="noopener">http://www.uehtml.com/</a></p>
<p>UI中国<br><a href="http://www.ui.cn/" target="_blank" rel="noopener">http://www.ui.cn/</a></p>
<p>卖模版可以参考网页<br><a href="http://maimuban.com/" target="_blank" rel="noopener">http://maimuban.com/</a></p>
<p>ps字体下载网站<br><a href="http://www.ps123.net/" target="_blank" rel="noopener">http://www.ps123.net/</a></p>
<p>网页设计资源库<br><a href="http://reeoo.com/" target="_blank" rel="noopener">http://reeoo.com/</a></p>
<p>日本区域网站设计集合<br><a href="http://www.4db.cc/" target="_blank" rel="noopener">http://www.4db.cc/</a></p>
<p>[设计师必备~灵感来源地~]<br><a href="https://www.behance.net/" target="_blank" rel="noopener">https://www.behance.net/</a></p>
<p><a href="http://www.qiuziti.com/" target="_blank" rel="noopener">求字体 字体网站</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度网盘失效连接恢复]]></title>
      <url>http://elickzhao.github.io/2017/04/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%A4%B1%E6%95%88%E8%BF%9E%E6%8E%A5%E6%81%A2%E5%A4%8D/</url>
      <content type="html"><![CDATA[<p><img src="http://hiphotos.baidu.com/exp/pic/item/8474fbdde71190ef0bdb4aeecc1b9d16fdfa60a4.jpg" alt=""></p>
<p>看到图片了吗出现的是你来晚了对吧</p>
<p>链接是<a href="http://pan.baidu.com/share/link?shareid=76297&amp;uk=3238350839" target="_blank" rel="noopener">http://pan.baidu.com/share/link?shareid=76297&amp;uk=3238350839</a></p>
<p>获取”uk=”后边的数字3238350839这个是关键啊</p>
<p>这是百度的默认网盘分享主页</p>
<p>   <a href="http://pan.baidu.com/share/home?uk=189904483" target="_blank" rel="noopener">http://pan.baidu.com/share/home?uk=189904483</a>    把上面那个数字3238350839替换到尾部即可，由此得到。<a href="http://pan.baidu.com/share/home?uk=3238350839" target="_blank" rel="noopener">http://pan.baidu.com/share/home?uk=3238350839</a></p>
<p>看到了吧分享者的主页都出来了，就可以找到你要下载的东西了</p>
<p>还有一种方法就是用百度搜索</p>
<p>把你要下载的名字比如“频频 site:pan.baidu.com”</p>
<p>复制到百度里面OK就很多了（这个前提条件是这个资源能有别人转存了）</p>
<p>以上两种方法你掌握了基本没有找不到的东西</p>
<hr>
<p>还用一种方法是用<a href="http://www.panc.cc/de/" target="_blank" rel="noopener">胖次网的的网盘解析</a>,不过这需要长连接.短链接是不行的必须转换</p>
]]></content>
      
        
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在线工具箱大总结]]></title>
      <url>http://elickzhao.github.io/2017/04/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E7%AE%B1%E5%A4%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><a href="http://tool.lu/" target="_blank" rel="noopener">在线工具箱-大全</a><br><a href="http://tool.oschina.net/regex/#" target="_blank" rel="noopener">在线工具箱</a><br><a href="http://www.box3.cn/" target="_blank" rel="noopener">开发工具箱</a><br><a href="http://www.qdfuns.com/tools" target="_blank" rel="noopener">前端网工具箱</a><br><a href="http://tool.css-js.com/compressor.html?b" target="_blank" rel="noopener">不知名网站工具箱</a></p>
<hr>
<p><a href="http://www.114la.com/other/rgb.htm" target="_blank" rel="noopener">RGB颜色查询对照表</a><br><a href="http://www.peise.net/" target="_blank" rel="noopener">配色网</a><br><a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="noopener">配色表</a><br><a href="http://webcolourdata.com/" target="_blank" rel="noopener">快速获取网站配色和字体</a></p>
<hr>
<p><a href="http://hao.199it.com/" target="_blank" rel="noopener">大数据导航</a><br><a href="http://www.atool.org/" target="_blank" rel="noopener">在线工具</a><br><a href="https://www.seeseed.com/" target="_blank" rel="noopener">前端工具导航seeseed</a></p>
<hr>
<p><a href="http://www.iloveimg.com/zh_cn" target="_blank" rel="noopener">图像文件在线编辑工具</a><br><a href="https://appiconizer.com/" target="_blank" rel="noopener">在线应用图标生成工具</a><br><a href="https://ezgif.com/video-to-gif" target="_blank" rel="noopener">gif制作与格式互换</a><br><a href="http://www.toolfan.cn/" target="_blank" rel="noopener">微信小编,产品,设计师工具箱</a><br><a href="http://www.ilovepdf.com/zh_cn" target="_blank" rel="noopener">PDF制作等工具箱</a><br><a href="http://tool.oschina.net/apidocs" target="_blank" rel="noopener">API在线文档</a><br><a href="http://www.tool.la/" target="_blank" rel="noopener">站在工具箱</a><br><a href="http://www.qdfuns.com/tools.php" target="_blank" rel="noopener">前端工具库</a><br><a href="http://www.ofmonkey.com/" target="_blank" rel="noopener">程序员工具箱</a></p>
<p><a href="http://overapi.com/" target="_blank" rel="noopener">overapi.com</a>  <strong>各种语言的API非常好查找有点像larvel那个</strong><br><a href="http://man.linuxde.net/" target="_blank" rel="noopener">linux命令大全</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手机APP开发真机测试难题]]></title>
      <url>http://elickzhao.github.io/2017/04/%E6%89%8B%E6%9C%BAAPP%E5%BC%80%E5%8F%91%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95%E9%9A%BE%E9%A2%98%20/</url>
      <content type="html"><![CDATA[<p>因为手机开发设计到屏幕大小问题,所以测试一直是个难题.对于安卓手机更是如此.</p>
<p>最近发现了个好网站:<a href="http://utest.qq.com/" target="_blank" rel="noopener">腾讯优测</a></p>
<p>不仅可以自动化测试并提出报告.而且可以模拟真机测试.当然热门机型是需要花钱的.<br>不过也有很多免费机型,这样测试不同屏幕大小就有很好的依据.</p>
<p>当然还有更多功能,比如漏洞分析等等,当然也是要花钱的.如果有一定经费,花点钱也是值得的.</p>
<p>好就先记录这些吧.</p>
]]></content>
      
        
        <tags>
            
            <tag> APP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hostinger免费空间使用]]></title>
      <url>http://elickzhao.github.io/2017/04/Hostinger%E5%85%8D%E8%B4%B9%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Hostinger其实去年就已经注册使用了,不过时间一长就给忘记了.<br>今天又看到头条有人介绍,才又想起来.上去一看帐号还在不过测试的网站已经没了.<br>也是都一年时间了.</p>
<p>先把注册地址留下吧,省着以后忘记了<br><a href="http://api.hostinger.com.hk/redir/10802316" target="_blank" rel="noopener">注册连接</a></p>
<p>这个网站去年使用的时候还可以,今年使用有点小卡,不过完全可以接受.再次激活一年的时间.<br>以后可以用这个空间测试一些东西了.</p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[更新hots的作用与方法]]></title>
      <url>http://elickzhao.github.io/2017/04/%E6%9B%B4%E6%96%B0hots%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>下面引用老D博客的解释</p>
<blockquote>
<p>修改hosts相关说明：</p>
<p>注：Google、Gmail、维基百科、Twitter、Facebook等必须请用https 加密方式打开。<br>（一般这些网站都是SSL加密链接）如谷歌学术：<a href="https://scholar.google.com/" target="_blank" rel="noopener">https://scholar.google.com/</a></p>
<p>如果不喜欢用谷歌香港，可以以 <a href="https://www.google.com/ncr" target="_blank" rel="noopener">https://www.google.com/ncr</a> 方式访问，(No Country Redirect)禁止国别跳转。</p>
<p>另外可能有的地区&amp;网络（铁通、联通）hosts无法正常使用，这个不是你我能左右的！</p>
<p>老D所提供的hosts仅限于学习使用，hosts里不会添加屏蔽广告条目，也不会劫持任何网站。</p>
<p>由于DNS污染太严重，YouTube只能打开网页，视频无法播放！还有就是YouTube的每个视频对应的地址都不一样，所以很抱歉。</p>
<p>麻烦别问我为什么修改hosts不能加载YouTube视频啦，我去年回答了不下500次。</p>
</blockquote>
<p><strong>特别提醒:</strong></p>
<blockquote>
<p>另外可能有的地区&amp;网络（铁通、联通）hosts无法正常使用，这个不是你我能左右的！<br>建议不要使用国产浏览器，国产软件也是，特别是360，因为国产浏览器即使你使用https<br>它也会强制你使用默认http，还有就是会上传用户数据，尽可能使用Chrome<br>下载&amp;修改hosts安全软件可能会“报毒”（误报）你可以暂时退出或者添加信任即可！</p>
</blockquote>
<p>唉 我就属于联通用户,结果就用不了啊.真是倒霉啊.<br>但还是保存下留着以后用吧</p>
<p><a href="https://laod.cn/hosts/2017-google-hosts.html" target="_blank" rel="noopener">2017 Google hosts 持续更新</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
            <tag> 玩机技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[桌面整理小程序]]></title>
      <url>http://elickzhao.github.io/2017/04/%E6%A1%8C%E9%9D%A2%E6%95%B4%E7%90%86%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>有些东西啊 真是食之无味弃之可惜.<br>这个桌面整理就是如此,感觉挺不错的.不过由于机器性能问题,好像用了也没什么意义.<br>但是记录下吧,也许说不定哪天就有用呢 是吧.</p>
<p><strong>Fences:</strong>  国外一早出现的东西看着挺好看的,不过要收费</p>
<p><img src="http://www.stardock.com/products/fences/images/fences3/Fences3_SideBySide.jpg" alt=""></p>
<p><strong>桔子桌面:</strong> 跟上面那个功能基本一样,就是国产的而且免费<br><img src="http://www.juzizm.com/images/main.jpg" alt=""></p>
<p>下载地址:<br><a href="http://www.juzizm.com/" target="_blank" rel="noopener">桔子桌面</a><br><a href="http://www.stardock.com/products/fences/" target="_blank" rel="noopener">Fences</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 玩机技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Everything无法搜索到文件]]></title>
      <url>http://elickzhao.github.io/2017/04/Everything%E6%97%A0%E6%B3%95%E6%90%9C%E7%B4%A2%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>刚把电脑清理完灰尘,使用wox却找不到了cmder,还以为莫名其妙的给删了呢.<br>结果重装以后,发现原来老的还在啊,再用wox搜其他exe程序,发现也没有了,这才想起应该Everything有问题了.<br>找到Everything一搜结果真是如此,什么都搜不到了.</p>
<p>解决方法很简单,打开工具-&gt;选项-&gt;索引 然后点强制重建 就可以了.当然我在进来之前发现数据库路径是空的,所以又指了下路径.<br>所以保险起见这两条都弄下.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://bbs.kafan.cn/thread-1598230-1-1.html" target="_blank" rel="noopener"> 我的Everything搜索不到东西了！</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[电脑电源声音太吵解决方法]]></title>
      <url>http://elickzhao.github.io/2017/04/%E7%94%B5%E8%84%91%E7%94%B5%E6%BA%90%E5%A3%B0%E9%9F%B3%E5%A4%AA%E5%90%B5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>主要原因就是,使用时间太长,造成轴承机油过少,使得摩擦加剧,只要上点机油就ok了.<br>其实添加机油感觉上很难,其实只要把 螺丝全拧下来,然后在风扇中间的小孔里滴上两滴就可以了.<br>今天打开电源,我的天里面的会真是太多了.已经看不到电路板的颜色了.看来以后每年都应该打扫一下.<br>现在滴上机油,又恢复了原来的安静了.</p>
<p>##参考文档<br><a href="http://jingyan.baidu.com/article/a24b33cd01ffc619ff002b73.html" target="_blank" rel="noopener">电脑电源风扇噪音问题处理</a><br><a href="http://www.7edown.com/edu/article/soft_8849_1.html" target="_blank" rel="noopener">机箱噪音大怎么办？电源拆卸风扇加油教程</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
            <tag> 玩机技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[splice与slice的区别与应用]]></title>
      <url>http://elickzhao.github.io/2017/04/splice%E4%B8%8Eslice%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>slice(开始位置,结束位置)     //选取元素  //返回选取元素<br>splice(开始位置,要删除个数,替换元素[可选]) //删除一些元素   //不返回,会把原数组改变<br><code>splice(开始位置,要删除个数,替换元素[可选]) 这个是删除后返回原数组 而slicen()根本不改变原数组 而是将选取赋予一个变量才行 var arr1 = arr.slicen(1,2);</code></p>
<p><strong>运行结果</strong></p>
<iframe width="100%" height="450" src="http://code.hcharts.cn/blog-demo/FVPmGQ/share/result,js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>参考文档<br><a href="http://www.w3school.com.cn/tiy/t.asp?f=jseg_splice" target="_blank" rel="noopener">http://www.w3school.com.cn/tiy/t.asp?f=jseg_splice</a><br><a href="http://www.w3school.com.cn/tiy/t.asp?f=jseg_slice_array" target="_blank" rel="noopener">http://www.w3school.com.cn/tiy/t.asp?f=jseg_slice_array</a></p>
<p><a href="http://www.w3school.com.cn/jsref/jsref_splice.asp" target="_blank" rel="noopener">JavaScript splice() 方法</a><br><a href="http://www.w3school.com.cn/jsref/jsref_slice_array.asp" target="_blank" rel="noopener">JavaScript slice() 方法</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSR老技术 新学问....]]></title>
      <url>http://elickzhao.github.io/2017/03/SSR%E8%80%81%E6%8A%80%E6%9C%AF%20%E6%96%B0%E5%AD%A6%E9%97%AE/</url>
      <content type="html"><![CDATA[<p>这网上的学问真是无穷无尽啊.SSR应该流行一段了,不过我却是个新学生.<br>最近捣鼓路由才发现这个.其实也不能这么说,原来也知道SS科学上网,不过都是要花钱的,所以没在意.<br>这个SSR是SS的升级版.据说还可以用于手机上网免流量.真是好神奇啊,不知道如何实现的.<br>不过看了几个帖子后发现,好像2016还可以,2017 好像已经全屏蔽了,谁知道呢.我也没去试.<br>搜了一圈免费的已经不多了,最后终于找到一个 <a href="https://www.wxtizi.com/auth/register?code=Ox5ZNelv0Qlhj6wuh5NTT3zFh3EO3rZG" target="_blank" rel="noopener">微笑网游加速器</a> 还不错好像是每个月免费1G流量.<br>而且看这样好像是说手机也能用,不过我也没这个需求就不试了.还有签到送流量,不过需要注册个外国通信软件比较麻烦,也懒得弄.反正我就看看资料1G应该也够用了.</p>
<p>据说还可以用路由来搭建SSR服务器(我现在的路由上只是客户端),好像是想通过这个来达到手机免流的作用,因为如果是梯子的话,必须用外国服务器.<br>这个以后再说吧,毕竟没有需求.</p>
<p>至于如何设置SSR客户端挺简单的,看路由和微笑提供的信息,按着填写就好了.看着乱又多,其实也没什么.</p>
<p>应该就这些. 把文档记录一下吧.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.right.com.cn/fORUM/forum.php?mod=viewthread&amp;tid=196324&amp;highlight=SS" target="_blank" rel="noopener">免费分享20个自建的S-S R节点，新增kcptun，游戏udp，openv p n，免流端口</a><br><a href="http://www.right.com.cn/forum/thread-205128-1-1.html" target="_blank" rel="noopener">献给小白-全网最详细的SSR免流教程 </a><br><a href="http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=191511&amp;fromguid=hot" target="_blank" rel="noopener">从0到1分享SSR免流完整教程工具集合。附带架设好的SSR服务器供小伙伴测试。</a><br><a href="http://www.jianshu.com/p/6d8e347a8ddd" target="_blank" rel="noopener">手机端搭建SSR服务图文教程</a><br><a href="http://bbs.feng.com/read-htm-tid-10962319.html" target="_blank" rel="noopener">7p用SSRfan qiang 加免流！终于成功了！</a></p>
<hr>
<p><strong>Shadowsocks的简介</strong></p>
<blockquote>
<p>Shadowsocks是一款高性能的基于python开发的socks5代理，连接速度快，它会帮助你在互联网上冲浪时保护你的隐私和安全。支持 Windows、MAC OS X、cross platform、Android、IOS、openwrt等系统，是非常实用的网络代理软件。</p>
<p>优点在于它解决了GFW通过分析流量特征从而干扰的问题，这是它优于SSH和VPN翻墙的地方。</p>
<p>同时，不用像VPN一样全局加入到代 理，可以实现全局代理和分应用代理，或国内路由，也就是说他可以让需要用到代理的网站走代理，而国内的网站则正常走国内的线路，不会影响国内网站的速度。</p>
<p>相对VPN而言，Shadowsocks更稳定，连接速度更快，如果经常需要用Google查资料、刷Twitter、上Facebook、看Youtube，那么Shadowsocks更能满足您的需要。</p>
</blockquote>
<h2 id="参考文档-1"><a href="#参考文档-1" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://laod.cn/black-technology/yizhihongxing-dazhe.html" target="_blank" rel="noopener">老D博客携一枝红杏推专属「终身8折」优惠</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
            <tag> SSR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小米路由 与  斐讯K2 刷机教程]]></title>
      <url>http://elickzhao.github.io/2017/03/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%20%E4%B8%8E%20%20%E6%96%90%E8%AE%AFK2%20%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="小米路由"><a href="#小米路由" class="headerlink" title="小米路由"></a>小米路由</h2><p>root密码 1d942240<br>使用winSCP连接小米路由的时候 必须选择 scp协议 不能用SFTP协议否则打不开, 但是默认的是SFTP所以要自己改一下.</p>
<ol>
<li>更新小米路由rom为开发版</li>
<li>开启ssh支持</li>
<li>刷入Breed</li>
<li>进入breed 刷完后 必须把ip地址改为 1 网段下 192.168.1.22 然后按住reset当灯狂闪时撒开,并由浏览器进入192.168.1.1</li>
<li>设置多播,我这里可以多开4个 经测试能提升下载速度2m/s左右 不过看视频好像没啥改变</li>
<li>本来打算安装屏蔽广告 但想到这个路由也不用了 就以后再说</li>
</ol>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>测试wifi的手机APP必须给与位置权限 要不就无法正常工作 搜索不到wif信号</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.miui.com/thread-1995629-1-1.html" target="_blank" rel="noopener">[经验技巧] 【荣组出品】mini玩机第一步：开启路由ROOT权限，</a><br><a href="http://jingyan.baidu.com/article/8275fc866b451046a03cf633.html" target="_blank" rel="noopener">玩转小米mini路由6：刷不死Breed</a><br><a href="http://www.right.com.cn/forum/thread-161906-1-1.html" target="_blank" rel="noopener">【2017-1-16】AR/QCA/MTK Breed，功能强大的多线程 Bootloader  – breed</a><br><a href="https://eyun.baidu.com/s/3boTksiF#sharelink/path=%2F2016-9-25&amp;parent_path=%2FAC1200HP" target="_blank" rel="noopener">AC1200HP华硕rom</a><br><a href="http://www.xp933.com/tech/router/6790.html" target="_blank" rel="noopener">小米路由器mini如何刷PandoraBox固件？小米路由器mini刷潘多</a><br><a href="http://www.right.com.cn/fORUM/thread-161324-1-1.html" target="_blank" rel="noopener">[2017-3-28]改华硕[N14U N54U]5G 2G的7620老毛子Padavan固件</a><br><a href="https://eyun.baidu.com/s/3kV0JV19" target="_blank" rel="noopener">华硕固件下载地址</a><br><a href="http://www.newbandeng.com/thread-20577-1-1.html" target="_blank" rel="noopener">PandoraBox潘多拉多拨教程（图文）免费提升网速 </a><br><a href="http://www.newbandeng.com/thread-20743-1-1.html" target="_blank" rel="noopener">最新版PandoraBox潘多拉安装adbyby去广告插件图文详细教程！！</a></p>
<hr>
<h2 id="斐讯K2"><a href="#斐讯K2" class="headerlink" title="斐讯K2"></a>斐讯K2</h2><ol>
<li>k2刷入breed好像不那么容易,不过在第一个参考文档里有个软件可以直接傻瓜刷入,当然现在可行,不知道以后如何.还有就是 改版官方固件 最新固件K2 V22.5.9.163 这个可以直接用 官方自带固件里的升级程序升级 升级后就自带breed了 但这个固件不能用breed升级,所以我没用,我现在用的是 V22.4.5.42 据说163稳定更好,先试试老的吧 不行再换.</li>
<li><del>刷入固件,现在用的是原版改 先试试这个吧.其他比如潘多拉也挺好因为我这里可以多播但界面丑点,华硕的就是挺漂亮功能多. 如果现在这个不稳定以后再换吧.</del></li>
</ol>
<blockquote>
<p>这个固件测试,还可以信号和稳定性,而且还有ssr虽然没钱买张号.但是有个问题啊,用了这个后我的游戏平台帐号显示异地登录,今天优酷帐号也提醒了.不是说去掉后门了么,奇怪.所以还是把他换了,换成华硕的了.其实真是原因搞不懂,因为百度浏览器有个万能马甲的插件也很可疑.所以两个都删了.华为这个也先试试看吧,不过这个华为这个网速可是增加了好多.现在测速下载7M/S 原来最多是4 一般是3啊 不知道是不是这个固件的事.先用这个看吧,这个功能的确是太丰富了.</p>
</blockquote>
<ol>
<li>刷入估计使用的breed里有个小程序 BreedEnter 挺好用的.有了它就不需要手动按住reset了. 他操作过程是拔掉路由电源-&gt;开启软件-&gt;点击开启-&gt;插上电源-&gt;等待提示,进入192.168.1.1</li>
</ol>
<p>##参考文档<br><a href="https://tieba.baidu.com/p/5015306692?fr=ala0&amp;pstaala=1&amp;tpl=5&amp;isgod=0" target="_blank" rel="noopener">斐讯K2最新版刷机教程</a><br><a href="http://post.smzdm.com/p/447014/" target="_blank" rel="noopener">“免费” PHICOMM 斐讯 K2路由器 开箱（附刷OpenWrt开源固件，实战MWAN多宽带链路网速叠加)</a><br><a href="http://www.right.com.cn/forum/thread-206091-1-1.html" target="_blank" rel="noopener">改版官方固件 163</a><br><a href="http://www.right.com.cn/forum/thread-207614-1-1.html" target="_blank" rel="noopener">【2017-03-24】斐讯K1、K2官方固件定制版（去后门、加s s r、adbyby等）【V1.7】</a></p>
<p><a href="https://pan.baidu.com/s/1geCr84N#list/path=%2FK2%20ROM" target="_blank" rel="noopener">原本改下载地址</a><br><a href="https://eyun.baidu.com/s/3kV0JV19#sharelink/path=%2F2017-3-28&amp;parent_path=%2FPadavan" target="_blank" rel="noopener">华硕下载地址 RT-AC54U-GPIO-1-PSG1208-64M_3.4.3.9-099.trx 这个是k2固件</a><br><a href="https://pan.baidu.com/share/link?shareid=1975106836&amp;uk=4078996080#list/path=%2F&amp;parentPath=%2F%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E6%9C%BA%E8%B5%84%E6%96%99" target="_blank" rel="noopener">潘多拉固件</a></p>
<blockquote>
<p>看看都用什么固件以后可以刷着换<br><a href="http://www.right.com.cn/forum/thread-189480-1-1.html" target="_blank" rel="noopener">都说说大家斐讯K2都用的什么固件</a><br><a href="http://www.right.com.cn/Forum/thread-209338-1-1.html" target="_blank" rel="noopener">【资源整合】~斐讯刷机固件资源整合帖~【2017-4-5】还是待完善~添加了部分个人感受</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
            <tag> 玩机技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三星note2 wifi无法搜索 刷机]]></title>
      <url>http://elickzhao.github.io/2017/03/%E4%B8%89%E6%98%9Fnote2%20wifi%E6%97%A0%E6%B3%95%E6%90%9C%E7%B4%A2%20%E5%88%B7%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>本来手机内存卡里有曾经下的rom,不过三星这个很奇怪.<br>进入了recovery 却看不到sd卡,虽然上面写着sd卡,但是却是手机内存.<br>这就很尴尬了,后来把rom复制到手机内存,开始安装.<br>结果手机卡死在了logo界面,重启也一样.不晓得为什么,原本以为完蛋了.<br>结果幸好刷机精灵还能连上,再次进入recovery,看到一行小字,在本界面可以连接刷机精灵 刷机.<br>我擦,这太好了,因为在logo界面时曾试过,结果失败了.<br>于是刷之,没想到挽救了这台三星.<br>因为刷的是小米rom 里面一大堆垃圾,上次可能因为删了一些服务造成了wifi搜索不到.<br>这次小心点,只是把垃圾软件删了,其他无用的服务就用360手机助手冻结了.<br>希望这次不会再出问题了…</p>
]]></content>
      
        
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 杂学 </tag>
            
            <tag> 玩机技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VSCode 常用快捷键]]></title>
      <url>http://elickzhao.github.io/2017/03/VSCode%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h2 id="常用General"><a href="#常用General" class="headerlink" title="常用General"></a>常用General</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Shift + P，F1</td>
<td>显示命令面板 Show Command Palette</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>快速打开 Quick Open</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>新窗口/实例 New window/instance</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>关闭窗口/实例 Close window/instance</td>
</tr>
</tbody>
</table>
<h2 id="基础编辑-Basic-editing"><a href="#基础编辑-Basic-editing" class="headerlink" title="基础编辑 Basic editing"></a>基础编辑 Basic editing</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+X</td>
<td>剪切行（空选定） Cut line (empty selection)</td>
</tr>
<tr>
<td>Ctrl+C</td>
<td>复制行（空选定）Copy line (empty selection)</td>
</tr>
<tr>
<td>Alt+ ↑ / ↓</td>
<td>向上/向下移动行 Move line up/down</td>
</tr>
<tr>
<td>Shift+Alt + ↓ / ↑</td>
<td>向上/向下复制行 Copy line up/down</td>
</tr>
<tr>
<td>Ctrl+Shift+K</td>
<td>删除行 Delete line</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>在下面插入行 Insert line below</td>
</tr>
<tr>
<td>Ctrl+Shift+Enter</td>
<td>在上面插入行 Insert line above</td>
</tr>
<tr>
<td>Ctrl+Shift+\</td>
<td>跳到匹配的括号 Jump to matching bracket</td>
</tr>
<tr>
<td>Ctrl+] / [</td>
<td>缩进/缩进行 Indent/outdent line</td>
</tr>
<tr>
<td>Home</td>
<td>转到行首 Go to beginning of line</td>
</tr>
<tr>
<td>End</td>
<td>转到行尾 Go to end of line</td>
</tr>
<tr>
<td>Ctrl+Home</td>
<td>转到文件开头 Go to beginning of file</td>
</tr>
<tr>
<td>Ctrl+End</td>
<td>转到文件末尾 Go to end of file</td>
</tr>
<tr>
<td>Ctrl+↑ / ↓</td>
<td>向上/向下滚动行 Scroll line up/down</td>
</tr>
<tr>
<td>Alt+PgUp / PgDown</td>
<td>向上/向下滚动页面 Scroll page up/down</td>
</tr>
<tr>
<td>Ctrl+Shift+[</td>
<td>折叠（折叠）区域 Fold (collapse) region</td>
</tr>
<tr>
<td>Ctrl+Shift+]</td>
<td>展开（未折叠）区域 Unfold (uncollapse) region</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+[</td>
<td>折叠（未折叠）所有子区域 Fold (collapse) all subregions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+]</td>
<td>展开（未折叠）所有子区域 Unfold (uncollapse) all subregions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+0</td>
<td>折叠（折叠）所有区域 Fold (collapse) all regions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+J</td>
<td>展开（未折叠）所有区域 Unfold (uncollapse) all regions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+C</td>
<td>添加行注释 Add line comment</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+U</td>
<td>删除行注释 Remove line comment</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>切换行注释 Toggle line comment</td>
</tr>
<tr>
<td>Shift+Alt+A</td>
<td>切换块注释 Toggle block comment</td>
</tr>
<tr>
<td>Alt+Z</td>
<td>切换换行 Toggle word wrap</td>
</tr>
</tbody>
</table>
<h2 id="导航-Navigation"><a href="#导航-Navigation" class="headerlink" title="导航 Navigation"></a>导航 Navigation</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + T</td>
<td>显示所有符号 Show all Symbols</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>转到行… Go to Line…</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>转到文件… Go to File…</td>
</tr>
<tr>
<td>Ctrl + Shift + O</td>
<td>转到符号… Go to Symbol…</td>
</tr>
<tr>
<td>Ctrl + Shift + M</td>
<td>显示问题面板 Show Problems panel</td>
</tr>
<tr>
<td>F8</td>
<td>转到下一个错误或警告 Go to next error or warning</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>转到上一个错误或警告 Go to previous error or warning</td>
</tr>
<tr>
<td>Ctrl + Shift + Tab</td>
<td>导航编辑器组历史记录 Navigate editor group history</td>
</tr>
<tr>
<td>Alt + ←/→</td>
<td>返回/前进 Go back / forward</td>
</tr>
<tr>
<td>Ctrl + M</td>
<td>切换选项卡移动焦点 Toggle Tab moves focus</td>
</tr>
</tbody>
</table>
<h2 id="搜索和替换-Search-and-replace"><a href="#搜索和替换-Search-and-replace" class="headerlink" title="搜索和替换 Search and replace"></a>搜索和替换 Search and replace</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + F</td>
<td>查找 Find</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>替换 Replace</td>
</tr>
<tr>
<td>F3 / Shift + F3</td>
<td>查找下一个/上一个 Find next/previous</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>选择查找匹配的所有出现 Select all occurences of Find match</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>将选择添加到下一个查找匹配 Add selection to next Find match</td>
</tr>
<tr>
<td>Ctrl + K Ctrl + D</td>
<td>将最后一个选择移至下一个查找匹配项 Move last selection to next Find match</td>
</tr>
<tr>
<td>Alt + C / R / W</td>
<td>切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word</td>
</tr>
</tbody>
</table>
<h2 id="多光标和选择-Multi-cursor-and-selection"><a href="#多光标和选择-Multi-cursor-and-selection" class="headerlink" title="多光标和选择 Multi-cursor and selection"></a>多光标和选择 Multi-cursor and selection</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt +单击</td>
<td>插入光标 Insert cursor</td>
</tr>
<tr>
<td>Ctrl + Alt +↑/↓</td>
<td>在上/下插入光标 Insert cursor above / below</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>撤消上一个光标操作 Undo last cursor operation</td>
</tr>
<tr>
<td>Shift + Alt + I</td>
<td>在选定的每一行的末尾插入光标 Insert cursor at end of each line selected</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>选择当前行 Select current line</td>
</tr>
<tr>
<td>Ctrl + Shift + L</td>
<td>选择当前选择的所有出现 Select all occurrences of current selection</td>
</tr>
<tr>
<td>Ctrl + F2</td>
<td>选择当前字的所有出现 Select all occurrences of current word</td>
</tr>
<tr>
<td>Shift + Alt + →</td>
<td>展开选择 Expand selection</td>
</tr>
<tr>
<td>Shift + Alt + ←</td>
<td>缩小选择 Shrink selection</td>
</tr>
<tr>
<td>Shift + Alt + （拖动鼠标）</td>
<td>列（框）选择 Column (box) selection</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt +（箭头键）</td>
<td>列（框）选择 Column (box) selection</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + PgUp / PgDown</td>
<td>列（框）选择页上/下 Column (box) selection page up/down</td>
</tr>
</tbody>
</table>
<h2 id="丰富的语言编辑-Rich-languages-editing"><a href="#丰富的语言编辑-Rich-languages-editing" class="headerlink" title="丰富的语言编辑 Rich languages editing"></a>丰富的语言编辑 Rich languages editing</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + 空格</td>
<td>触发建议 Trigger suggestion</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>触发器参数提示 Trigger parameter hints</td>
</tr>
<tr>
<td>Tab</td>
<td>Emmet 展开缩写 Emmet expand abbreviation</td>
</tr>
<tr>
<td>Shift + Alt + F</td>
<td>格式化文档 Format document</td>
</tr>
<tr>
<td>Ctrl + K , Ctrl + F</td>
<td>格式选定区域 Format selection</td>
</tr>
<tr>
<td>F12</td>
<td>转到定义 Go to Definition</td>
</tr>
<tr>
<td>Alt + F12</td>
<td>Peek定义 Peek Definition</td>
</tr>
<tr>
<td>Ctrl + K F12</td>
<td>打开定义到边 Open Definition to the side</td>
</tr>
<tr>
<td>Ctrl + .</td>
<td>快速解决 Quick Fix</td>
</tr>
<tr>
<td>Shift + F12</td>
<td>显示引用 Show References</td>
</tr>
<tr>
<td>F2</td>
<td>重命名符号 Rename Symbol</td>
</tr>
<tr>
<td>Ctrl + Shift + . /，</td>
<td>替换为下一个/上一个值 Replace with next/previous value</td>
</tr>
<tr>
<td>Ctrl + K , Ctrl + X</td>
<td>修剪尾随空格 Trim trailing whitespace</td>
</tr>
<tr>
<td>Ctrl + K, M</td>
<td>更改文件语言 Change file language</td>
</tr>
</tbody>
</table>
<h2 id="编辑器管理-Editor-management"><a href="#编辑器管理-Editor-management" class="headerlink" title="编辑器管理 Editor management"></a>编辑器管理 Editor management</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+F4, Ctrl+W</td>
<td>关闭编辑器 Close editor</td>
</tr>
<tr>
<td>Ctrl+K F</td>
<td>关闭文件夹 Close folder</td>
</tr>
<tr>
<td>Ctrl+\</td>
<td>拆分编辑器 Split editor</td>
</tr>
<tr>
<td>Ctrl+ 1 / 2 / 3</td>
<td>聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+ ←/→</td>
<td>聚焦到上一个/下一个编辑器组 Focus into previous/next editor group</td>
</tr>
<tr>
<td>Ctrl+Shift+PgUp / PgDown</td>
<td>向左/向右移动编辑器 Move editor left/right</td>
</tr>
<tr>
<td>Ctrl+K ← / →</td>
<td>移动活动编辑器组 Move active editor group</td>
</tr>
</tbody>
</table>
<h2 id="文件管理-File-management"><a href="#文件管理-File-management" class="headerlink" title="文件管理 File management"></a>文件管理 File management</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+N</td>
<td>新文件 New File</td>
</tr>
<tr>
<td>Ctrl+O</td>
<td>打开文件… Open File…</td>
</tr>
<tr>
<td>Ctrl+S</td>
<td>保存 Save</td>
</tr>
<tr>
<td>Ctrl+Shift+S</td>
<td>另存为… Save As…</td>
</tr>
<tr>
<td>Ctrl+K S</td>
<td>全部保存 Save All</td>
</tr>
<tr>
<td>Ctrl+F4</td>
<td>关闭 Close</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+W</td>
<td>关闭所有 Close All</td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>重新打开关闭的编辑器 Reopen</td>
<td>closed editor</td>
</tr>
<tr>
<td>Ctrl+K</td>
<td>输入保持打开 Enter Keep Open</td>
</tr>
<tr>
<td>Ctrl+Tab</td>
<td>打开下一个 Open next</td>
</tr>
<tr>
<td>Ctrl+Shift+Tab</td>
<td>打开上一个 Open previous</td>
</tr>
<tr>
<td>Ctrl+K P</td>
<td>复制活动文件的路径 Copy path of active file</td>
</tr>
<tr>
<td>Ctrl+K R</td>
<td>显示资源管理器中的活动文件 Reveal active file in Explorer</td>
</tr>
<tr>
<td>Ctrl+K O</td>
<td>显示新窗口/实例中的活动文件 Show active file in new window/instance</td>
</tr>
</tbody>
</table>
<h2 id="显示-Display"><a href="#显示-Display" class="headerlink" title="显示 Display"></a>显示 Display</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>F11</td>
<td>切换全屏 Toggle full screen</td>
</tr>
<tr>
<td>Shift+Alt+1</td>
<td>切换编辑器布局 Toggle editor layout</td>
</tr>
<tr>
<td>Ctrl+ = / -</td>
<td>放大/缩小 Zoom in/out</td>
</tr>
<tr>
<td>Ctrl+B</td>
<td>切换侧栏可见性 Toggle Sidebar visibility</td>
</tr>
<tr>
<td>Ctrl+Shift+E</td>
<td>显示浏览器/切换焦点 Show Explorer / Toggle focus</td>
</tr>
<tr>
<td>Ctrl+Shift+F</td>
<td>显示搜索 Show Search</td>
</tr>
<tr>
<td>Ctrl+Shift+G</td>
<td>显示Git Show Git</td>
</tr>
<tr>
<td>Ctrl+Shift+D</td>
<td>显示调试 Show Debug</td>
</tr>
<tr>
<td>Ctrl+Shift+X</td>
<td>显示扩展 Show Extensions</td>
</tr>
<tr>
<td>Ctrl+Shift+H</td>
<td>替换文件 Replace in files</td>
</tr>
<tr>
<td>Ctrl+Shift+J</td>
<td>切换搜索详细信息 Toggle Search details</td>
</tr>
<tr>
<td>Ctrl+Shift+C</td>
<td>打开新命令提示符/终端 Open new command prompt/terminal</td>
</tr>
<tr>
<td>Ctrl+Shift+U</td>
<td>显示输出面板 Show Output panel</td>
</tr>
<tr>
<td>Ctrl+Shift+V</td>
<td>切换Markdown预览 Toggle Markdown preview</td>
</tr>
<tr>
<td>Ctrl+K V</td>
<td>从旁边打开Markdown预览 Open Markdown preview to the side</td>
</tr>
</tbody>
</table>
<h2 id="调试-Debug"><a href="#调试-Debug" class="headerlink" title="调试 Debug"></a>调试 Debug</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>F9</td>
<td>切换断点 Toggle breakpoint</td>
</tr>
<tr>
<td>F5</td>
<td>开始/继续 Start/Continue</td>
</tr>
<tr>
<td>Shift+F5</td>
<td>停止 Stop</td>
</tr>
<tr>
<td>F11 / Shift+F11</td>
<td>下一步/上一步 Step into/out</td>
</tr>
<tr>
<td>F10</td>
<td>跳过 Step over</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+I</td>
<td>显示悬停 Show hover</td>
</tr>
</tbody>
</table>
<h2 id="集成终端-Integrated-terminal"><a href="#集成终端-Integrated-terminal" class="headerlink" title="集成终端 Integrated terminal"></a>集成终端 Integrated terminal</h2><table>
<thead>
<tr>
<th><strong>按 Press</strong></th>
<th><strong>功能 Function</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+`</td>
<td>显示集成终端 Show integrated terminal</td>
</tr>
<tr>
<td>Ctrl+Shift+`</td>
<td>创建新终端 Create new terminal</td>
</tr>
<tr>
<td>Ctrl+Shift+C</td>
<td>复制选定 Copy selection</td>
</tr>
<tr>
<td>Ctrl+Shift+V</td>
<td>粘贴到活动端子 Paste into active terminal</td>
</tr>
<tr>
<td>Ctrl+↑ / ↓</td>
<td>向上/向下滚动 Scroll up/down</td>
</tr>
<tr>
<td>Shift+PgUp / PgDown</td>
<td>向上/向下滚动页面 Scroll page up/down</td>
</tr>
<tr>
<td>Ctrl+Home / End</td>
<td>滚动到顶部/底部 Scroll to top/bottom</td>
</tr>
</tbody>
</table>
<hr>
<p>vscode: Visual Studio Code 常用快捷键</p>
<p><strong>主命令框</strong></p>
<p>F1 或 Ctrl+Shift+P: 打开命令面板。在打开的输入框内，可以输入任何命令，例如：<br>按一下 Backspace 会进入到 Ctrl+P 模式<br>在 Ctrl+P 下输入 &gt; 可以进入 Ctrl+Shift+P 模式<br>在 Ctrl+P 窗口下还可以:<br>直接输入文件名，跳转到文件<br>? 列出当前可执行的动作<br>! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M<br>\: 跳转到行数，也可以 Ctrl+G 直接进入<br>@ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入<br>@ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入<br># 根据名字查找 symbol，也可以 Ctrl+T</p>
<p><strong>常用快捷键</strong><br><strong>编辑器与窗口管理</strong></p>
<p>打开一个新窗口： Ctrl+Shift+N<br>关闭窗口： Ctrl+Shift+W<br>同时打开多个编辑器（查看多个文件）<br>新建文件 Ctrl+N<br>文件之间切换 Ctrl+Tab<br>切出一个新的编辑器（最多 3 个） Ctrl+\，也可以按住 Ctrl 鼠标点击 Explorer 里的文件名<br>左中右 3 个编辑器的快捷键 Ctrl+1 Ctrl+2 Ctrl+3<br>3 个编辑器之间循环切换 Ctrl+<br>编辑器换位置， Ctrl+k然后按 Left或 Right</p>
<p><strong>代码编辑</strong></p>
<p><strong>格式调整</strong></p>
<p>代码行缩进 Ctrl+[ 、 Ctrl+]<br>Ctrl+C 、 Ctrl+V 复制或剪切当前行/当前选中内容<br>代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code<br>上下移动一行： Alt+Up 或 Alt+Down<br>向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down<br>在当前行下边插入一行 Ctrl+Enter<br>在当前行上方插入一行 Ctrl+Shift+Enter</p>
<p><strong>光标相关</strong></p>
<p>移动到行首： Home<br>移动到行尾： End<br>移动到文件结尾： Ctrl+End<br>移动到文件开头： Ctrl+Home<br>移动到定义处： F12<br>定义处缩略图：只看一眼而不跳转过去 Alt+F12<br>移动到后半个括号： Ctrl+Shift+]<br>选择从光标到行尾： Shift+End<br>选择从行首到光标处： Shift+Home<br>删除光标右侧的所有字： Ctrl+Delete<br>扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right<br>多行编辑(列编辑)：Alt+Shift+鼠标左键，Ctrl+Alt+Down/Up<br>同时选中所有匹配： Ctrl+Shift+L<br>Ctrl+D 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了)<br>回退上一个光标操作： Ctrl+U</p>
<p><strong>重构代码</strong></p>
<p>找到所有的引用： Shift+F12<br>同时修改本文件中所有匹配的： Ctrl+F12<br>重命名：比如要修改一个方法名，可以选中后按 F2，输入新的名字，回车，会发现所有的文件都修改了<br>跳转到下一个 Error 或 Warning：当有多个错误时可以按 F8 逐个跳转<br>查看 diff： 在 explorer 里选择文件右键 Set file to compare，然后需要对比的文件上右键选择 Compare with file_name_you_chose</p>
<p><strong>查找替换</strong></p>
<p>查找 Ctrl+F<br>查找替换 Ctrl+H<br>整个文件夹中查找 Ctrl+Shift+F</p>
<p><strong>显示相关</strong></p>
<p>全屏：F11<br>zoomIn/zoomOut：Ctrl +/-<br>侧边栏显/隐：Ctrl+B<br>显示资源管理器 Ctrl+Shift+E<br>显示搜索 Ctrl+Shift+F<br>显示 Git Ctrl+Shift+G<br>显示 Debug Ctrl+Shift+D<br>显示 Output Ctrl+Shift+U</p>
<p><strong>其他</strong><br>自动保存：File -&gt; AutoSave ，或者 Ctrl+Shift+P，输入 auto</p>
<p><strong>修改默认快捷键</strong><br>打开默认键盘快捷方式设置：<br>File -&gt; Preferences -&gt; Keyboard Shortcuts，或者：Alt+F -&gt; p -&gt; k</p>
<p>修改 keybindings.json：</p>
<p>// Place your key bindings in this file to overwrite the defaults<br>[<br>    // ctrl+space 被切换输入法快捷键占用<br>    {<br>        “key”: “ctrl+alt+space”,<br>        “command”: “editor.action.triggerSuggest”,<br>        “when”: “editorTextFocus”<br>    },<br>    // ctrl+d 删除一行<br>    {<br>        “key”: “ctrl+d”,<br>        “command”: “editor.action.deleteLines”,<br>        “when”: “editorTextFocus”<br>    },<br>    // 与删除一行的快捷键互换<br>    {<br>        “key”: “ctrl+shift+k”,<br>        “command”: “editor.action.addSelectionToNextFindMatch”,<br>        “when”: “editorFocus”<br>    },<br>    // ctrl+shift+/多行注释<br>    {<br>        “key”:”ctrl+shift+/“,<br>        “command”: “editor.action.blockComment”,<br>        “when”: “editorTextFocus”<br>    },<br>    // 定制与 sublime 相同的大小写转换快捷键，需安装 TextTransform 插件<br>    {<br>        “key”: “ctrl+k ctrl+u”,<br>        “command”: “uppercase”,<br>        “when”: “editorTextFocus”<br>    },<br>    {<br>        “key”: “ctrl+k ctrl+l”,<br>        “command”: “lowercase”,<br>        “when”: “editorTextFocus”<br>    }<br>]<br><strong>前端开发必备插件</strong><br>PostCSS Sorting<br>stylelint<br>stylefmt<br>ESLint<br>javascript standard format<br>beautify<br>Babel ES6/ES7<br>Debugger for Chrome<br>Add jsdoc comments<br>javascript(ES6) code snippets<br>vue<br>weex<br>Reactjs code snippets<br>React Native Tools<br>Npm Intellisense<br>Instant Markdown<br>Markdown Shortcuts<br>TextTransform</p>
<p><strong>自定义设置参考</strong><br>vscode 自定义配置参考：</p>
<p>{<br>    “editor.fontSize”: 18,<br>    “files.associations”: {<br>        “<em>.es”: “javascript”,<br>        “</em>.es6”: “javascript”<br>    },<br>    // 控制编辑器是否应呈现空白字符<br>    “editor.renderWhitespace”: true,<br>    // 启用后，将在保存文件时剪裁尾随空格。<br>    “files.trimTrailingWhitespace”: true,<br>    // File extensions that can be beautified as javascript or JSON.<br>    “beautify.JSfiles”: [<br>        “”,<br>        “es”,<br>        “es6”,<br>        “js”,<br>        “json”,<br>        “jsbeautifyrc”,<br>        “jshintrc”<br>    ]<br>}</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.nshen.net/article/2015-11-20/vscode/" target="_blank" rel="noopener">学会用好 Visual Studio Code</a></p>
]]></content>
      
        
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新一代代码编辑器 VSCode]]></title>
      <url>http://elickzhao.github.io/2017/03/%E6%96%B0%E4%B8%80%E4%BB%A3%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%20VSCode/</url>
      <content type="html"><![CDATA[<p>这是微软做的一个开源编辑器,微软居然也开源了,还是比较令人神奇的.</p>
<p>这个编辑器的最主要特点就是小巧,当然也是相对说的,当然还是不如sublime,不过经过这么多年,这个已经不在流行.</p>
<p>最近用Atom,HBuilder这两个都不错. 不过Atom我装了过多的插件,打开比较慢,虽然一开始是比较轻巧的.<br>不过Atom的优点就是配置可以云备份,这样不用每个机器都弄一遍了,还有就是插件众多,想要什么都有.<br>但还有个问题是不能单独打开一个文件(这个可能需要设置,但是我也懒得找了),每次打开一个文件都把整个目录,都加载进来又慢又无意义,我只想编辑这个文件而已.一般大的项目我都用phpstorm了 虽然这个又大又慢.但功能全啊</p>
<p>HBuilder是国内开发的,这个特别适合前端开发,速度特别快,尤其适应他们那套快捷方式,比其他任何编辑器都快.所以一般前端,我喜欢用HBuilder.</p>
<p>VSCode是最近才发现的,是通过白鹭引擎发现的,白鹭引擎的编辑器就是那VSCode改出来的,于是下载下来看了下.<br>VSCode比较小巧,而且可以单独打开一个文件,最主要的是他的代码提示比Atom好很多,当然也许Atom我没找到对的插件,而且还能使用其他编辑器的快捷方式,免得你上手不适应.总之很可爱,而且也有很多插件,虽然也会慢一些但至少比Atom快很多了.所以以后试试这个吧</p>
<p><a href="http://www.vscode.org/" target="_blank" rel="noopener">VSCode中文官网</a></p>
]]></content>
      
        
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[心灵终结中文报错解决]]></title>
      <url>http://elickzhao.github.io/2017/03/%E5%BF%83%E7%81%B5%E7%BB%88%E7%BB%93%E4%B8%AD%E6%96%87%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p>心灵终结如果安装了中文补丁,就会出现无法载入任务的错误,从第一关开始打一直打下去没问题,如果出去后再选择任务就会报错.</p>
<p>解决这个问题的方法是:</p>
<p>调整gamemd.exe的兼容性（一般来说调成XP是能解决的，不行的话就试试其他的兼容模式）。</p>
<p>右键-&gt;属性-&gt;兼容性-&gt;调成Xp的就好了.</p>
]]></content>
      
        
        <tags>
            
            <tag> 玩机技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017-3-11日志]]></title>
      <url>http://elickzhao.github.io/2017/03/2017-3-11%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>今天星期六,去打球了.不过这个身体真是好差啊,经过春节的腐败和养膘,现在跑一下心脏都有点不舒服了.<br>看来得加强锻炼了.<br>还有就是该死的斗鱼,那个手机号破解快500多了,速度已经快了一点了,不过还有那么多,不过总有个不好的感觉,<br>感觉这些都测完了也未必要找到,有种这么一种不详的预感..<br>今天就记录这些吧,给我爸做的那个程序要尽快弄了…</p>
<hr>
<p>打完球第二天,浑身好酸啊,基本睡了一天呢. 不运动真实不行啊.<br>还有今天老丈母娘也回来了,这一天基本啥也没干….</p>
<hr>
<p>不开心啊不开心.等了一晚上的注册,结果时间错过了.不过也算了,吾爱破解那里的东西也未必是什么好东西.<br>比如这次下的迅雷,根本不好使,虽然显示是会员其实一点没加速…</p>
<p>还有就是资金不够了,真是麻烦啊.而且又有很多花销,好愁人啊….</p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[白鹭Egret HTML5 游戏及手机程序开发系统]]></title>
      <url>http://elickzhao.github.io/2017/03/%E7%99%BD%E9%B9%ADEgret%20HTML5%20%E6%B8%B8%E6%88%8F%E5%8F%8A%E6%89%8B%E6%9C%BA%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Egret是个开发套件,他内部有很多开发相关的软件.第一眼看到很懵的.所以这里先简单介绍下.</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>Egret Engine2D/3D:</strong> 白鹭引擎包含了白鹭时代研发的遵循HTML5标准的游戏引擎。他包括 2D / 3D 渲染核心、GUI体系、音频管理、资源管理等游戏引擎的常用模块。<br>通过使用白鹭引擎，开发者可以尽可能的不用关注浏览器的底层实现，解决HTML5游戏性能问题及碎片化问题，灵活地满足开发者开发2D或3D游戏的需求。</p>
<p><strong>Egret Wing:</strong> 主要开发代码的IDE,也可以开发游戏界面,并且也可以开发手机程序界面.所以有个项目叫做EUI,这个就是用于开发界面的项目.</p>
<p>有多个项目类型可以选择,最迷惑的就是<strong>游戏项目</strong>和<strong>EUI项目</strong> 仔细看下面所带的库不一样.<br><strong>EUI项目</strong>带有EUI编辑器,就是可以可视化编辑诸如<code>按钮</code>,<code>面板</code>之类的组件.他这里的组件不是那css绘制出来的,使用图片等组合起来的,所以可视化开发会很容易,但不知道速度上有没有优势.</p>
<blockquote>
<p><strong>经验:</strong> 在新建EUI模版的时候,不能用 <code>new</code>作为文件名字,注意是小写开头的.<br>否则会无法使用可视化编辑器,可能是关键字冲突造成的. 所以只能用 <code>New.exml</code>.</p>
<p>游戏项目 可以通过修改 <code>egretProperties.json</code> 增加 <code>{ &quot;name&quot;:&quot;eui&quot; }</code> 这一项来支持 EUI 可视编辑.<br>不过 因为资源里<code>resource</code>缺少EUI组件的资源,所以备用的组件都不显示.这是因为是上面说的组件都是图片组合的.所以游戏项目就算这么改了 意义也不大.</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> IDE </tag>
            
            <tag> App </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[制作局部动态图]]></title>
      <url>http://elickzhao.github.io/2017/03/%E5%88%B6%E4%BD%9C%E5%B1%80%E9%83%A8%E5%8A%A8%E6%80%81%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>##简介<br>为了做兔子的动态桌面以前弄了个视频,不过还不是特别满意,因为算不上循环.<br>后来发现可以做局部动态图.这是个完美方案,所以学习了下.一开始打算用ps做.而且为了做这个,<br>还特意升级了ps.结果发现教程实在太老,而且看不明白.虽然在知道大体意思.<br>设一个视频为静态,放在前景.并扣空,显示后景动态视频.可是上面所说的剪切和一些工具都找不到在哪里.<br>毕竟ps还是很大很专业的,你要不知道在哪里,真不好找.<br>后来发现了<strong>Cliplets</strong>.这是专门做这个东西的.简单易用,下面就简单说下怎么用.</p>
<p>##使用</p>
<p><img src="image/17-3/1.png" alt=""></p>
<ul>
<li><p>导入.导入只能导入10秒的视频,过大的视频会让你自己剪切.</p>
</li>
<li><p>右边为各个图层,最开始的为静态图层,会有个<strong>still</strong>选项,这是告诉你他是静态并一直显示.此外还有<strong>loop</strong>,<strong>mirror</strong>,<strong>play</strong>选项.</p>
<ul>
<li><strong>loop:</strong> 默认生成的动态图层为<strong>loop</strong>,也就是单循环,这适合单次动画结尾与开头不影响的片段.</li>
<li><strong>mirror:</strong> 镜像,一般情况下这个用多,因为大多数片段结尾不能恢复到开头位置,用这个就可以第一段正序播放,第二段倒序播放恢复到初始位置. <strong>注意:</strong>图层的播放次数一定要偶数要不就起不到想要的效果了.</li>
<li><strong>play:</strong> 单次播放,不知道意义何在,这次使用时没有用到.</li>
</ul>
</li>
</ul>
<p><img src="image/17-3/2.png" alt=""></p>
<ul>
<li>下面为图层播放次数.在整个视频播放时间段内,当前图层的播放次数.你可以拉伸加快活减慢播放速度.也可以单点片段,添加活减去播放次数.这里要提醒的是,loop 最后少一些播放次数,这样如果有位移,也不那么明显,而mirror上面已经说过了一定要复数,这里再次强调一下.</li>
</ul>
<p><img src="image/17-3/3.png" alt="">    </p>
<ul>
<li>最上面为当期选取图层的原视频截取播放片段.这个因为最不好说所以放在了最后.每个图层可以选取视频的不同的播放时间段为循环基础,1图层和2图层的起始时间和结束时间可以是不同的.而且时长也可以自由掌握.所以这个软件真的很牛X.</li>
</ul>
<p><img src="image/17-3/4.png" alt=""></p>
<h2 id="参考文职"><a href="#参考文职" class="headerlink" title="参考文职"></a>参考文职</h2><p><a href="http://jandan.net/2012/04/21/cliplets.html" target="_blank" rel="noopener">Cliplets：可以制作局部动态图的软件</a><br><a href="http://www.ithome.com/html/soft/12434.htm" target="_blank" rel="noopener">Cliplets：轻松制作超动态Gif动画（微软出品）</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[photoshop cc 2017 下载与破解]]></title>
      <url>http://elickzhao.github.io/2017/03/photoshop%20cc%202017%20%E4%B8%8B%E8%BD%BD%E4%B8%8E%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>百度网盘下载地址: <a href="https://pan.baidu.com/s/1geMv2pH#list/path=%2F%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%2FPS2017&amp;parentPath=%2F%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB" target="_blank" rel="noopener">https://pan.baidu.com/s/1geMv2pH#list/path=%2F%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%2FPS2017&amp;parentPath=%2F%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB</a></p>
<p>安装教程: <a href="https://pan.baidu.com/share/link?shareid=480414926&amp;uk=623581790" target="_blank" rel="noopener">https://pan.baidu.com/share/link?shareid=480414926&amp;uk=623581790</a></p>
<p><strong>Adobe photoshop CC 2017破解版(软件+破解+图文教程):</strong><br>链接：<a href="http://pan.baidu.com/s/1kUELMKn" target="_blank" rel="noopener">http://pan.baidu.com/s/1kUELMKn</a>  密码：2zvd</p>
<p>原帖地址:<a href="http://www.52pojie.cn/thread-550381-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-550381-1-1.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Postman发送带cookie的http请求]]></title>
      <url>http://elickzhao.github.io/2017/03/Postman%E5%8F%91%E9%80%81%E5%B8%A6cookie%E7%9A%84http%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<p>Postman是chrome上一个非常好用的http客户端插件，可惜由于chrome安全的限制，发不出带cookie的请求。如果想要发送带cookie的请求，需要开启Interceptor：<br><img src="http://img.blog.csdn.net/20160615233602816" alt=""></p>
<p>这个Interceptor还需要到chrome应用商店下载 Postman Interceptor 扩展程序。现在能发送带cookie的http请求。发送cookie时，在header中添加key-value，key固定为Cookie，value是cookie具体的k=v，例如：</p>
<p><img src="http://img.blog.csdn.net/20160615233624699" alt=""></p>
<p>需要注意的是，发送带cookie的时候必须得开着chrome浏览器。</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> chrome </tag>
            
            <tag> postman </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017-9-3-2日志]]></title>
      <url>http://elickzhao.github.io/2017/03/2017-3-2%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>今天终于把锅和冰箱弄完了,终于可以写我爸那个股票程序.<br>而且已经到了三月,很多麻烦的事都要来了,一个一个解决吧,还能如何呢.<br>而且看看能不能找到一个满意的工作 呵呵.<br>难!!!!</p>
<hr>
<p>今天去打球了 不过没碰到房东 看来只有明天给他打电话了</p>
<hr>
<p>今天给房东打电话了,结果却没来,这人也是心大啊,收钱都不积极.</p>
<hr>
<p>今天终于把房费交了,居然没涨价,真是意外收获啊……<br>不过今天弄ps做视频却没成功,还得重装ps.因为原来用那个是绿色精简版的.<br>重装又费了好大劲,以前2015cc已经安装不上了,又下了个新的.<br>百度网盘客户端真是越来越坑了.看来以后只能用火狐的插件下载百度云盘的连接了,这样下的快.</p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017-2-26日志]]></title>
      <url>http://elickzhao.github.io/2017/02/2017-2-26%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>今天修了一天的锅,这个破东西还真是费劲啊.昨晚有了点新的思路,这里整理下.</p>
<p>一. 现在直播平台是比较挣钱的,能从每个主播抽成30%,这真是太挣了,尤其那些打擦边球的直播.<br>一晚上就好多钱.所以呢,现在做一个平台,或者经营一个平台实在太好了.要做只能做安卓APP这种的.<br>因为网站平台手续繁琐,而且监管太强.还有就是,连方维都出直播平台了,没想到居然搞起来了.</p>
<p>二.一个小说思路,类似回到未来.穿越抗战题材的,结合了重返狼穴,日本野心家回到过去,妄图改变历史.<br>中国特种兵只身前往.</p>
<p>嗯 就是以上这些内容了 有空再加…..</p>
<p>对了 那天看到个文章用vue做了个网易云音乐,感觉可以参考下,然后用这个改一下listen 1,然后看看用邮箱做一个到那里都能听的播放器,哦对了我想用gits 就是这个同步插件的东西保存,因为这个可以保存json格式,而歌曲保存也是json格式的.</p>
<p>今天只能点点点了…………</p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sync-setting 无法同步问题]]></title>
      <url>http://elickzhao.github.io/2017/02/sync-setting%20%E6%97%A0%E6%B3%95%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>有一段时间没用Atom了,结果再打开的时候,sync-setting报了这个错误.<strong>sync-settings: Error retrieving your settings. (Bad credentials)</strong>  同步设置：检索设置错误。（坏凭据）.</p>
<p>原来是太长时间没有用,所以token已经过期了,只要去Github上重新申请个token放到设置里就好了.</p>
<p>申请token如果忘记了,看这里.<br><a href="http://elickzhao.github.io/2016/10/Atom%20%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AEsync-setting/">Atom 编辑器配置sync-setting</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017-2-20日志]]></title>
      <url>http://elickzhao.github.io/2017/02/2017-2-20%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>今天回北京了,又一大堆的事等着啊,房子啊 工作啊.真不知道2017会是什么样子啊.<br>习惯了安逸就不愿意改变啊.无论是工作中,还是在家待着总不愿意变啊.<br>今年会如何啊,不过钱已经光了,必须去干活了.但还是应该自己写点东西,你看方维已经搞出来了,真没想到.<br>哎 走着看吧 世事无常谁能说清呢…</p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[直播导航网站设想]]></title>
      <url>http://elickzhao.github.io/2017/02/%E7%9B%B4%E6%92%AD%E5%AF%BC%E8%88%AA%E7%BD%91%E7%AB%99%E8%AE%BE%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>这两天突然有个构想,其实原因也很简单,现在直播网站多了,但是我喜欢的主播,有可能在不同的直播平台,而且我也不知道他今天直播的内容是否有趣,我也不能每次都切换平台去看,比较麻烦,所以有了这个念头.<br>如果有一个主播导航网站的话,是不是就可以解决这个问题了.就如同当年的hao123.<br>今天发了这个网站 <a href="http://www.zhiboqiang.com/" target="_blank" rel="noopener">http://www.zhiboqiang.com/</a> 他的想法跟我大致一样,不过他是把高人气的全部放到主页.可能通过抓取把上线的高人气主播放在一起.这个跟我想的有点不太一样,我是想打开直接在本网站就能看,他那个是直接跳转到那个网站了.<br>看到闪酷网做的那个电视频道的直播,就是利用直播源,然后播放到自己的网站.不知道这种会给服务器带来多大压力,如果压力太大的话,就只能想刚才看到那个网站那样来弄了,不过那个效果的确不好.<br>我还想到一个功能就是当某个主播人气上升过快,就有滚动提示,不过现在想想那样需要不能挺的扫描网站,不知道这样是不是也会很耗服务器性能,以后有空想想.</p>
]]></content>
      
        
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[老年Mp3,听书机、听戏机等加密内存卡的破解]]></title>
      <url>http://elickzhao.github.io/2017/02/%E8%80%81%E5%B9%B4Mp3,%E5%90%AC%E4%B9%A6%E6%9C%BA%E3%80%81%E5%90%AC%E6%88%8F%E6%9C%BA%E7%AD%89%E5%8A%A0%E5%AF%86%E5%86%85%E5%AD%98%E5%8D%A1%E7%9A%84%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天老姨拿来他的随身音乐播放机的内存卡,想要导出歌曲来.<br>不过打开来看结果发现里面空空如野,即使打开隐身也没有东西,但是空间确实占了.<br>而且发现了一个加密软件,估计就是加密软件加密后隐身了.<br>这里就简单写下操作方法,看不懂就看下面图文.</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>一 打开隐身权限,并且系统文件隐身也得打开,就会发下一个<strong>Thumbs.ms</strong> 的文件夹,所有音乐就藏在这里不过现在看不到.</p>
<p>二 下载7-zipr解压软件,然后打开这个目录就会发现新的目录,一直打开到底就发现了音乐.</p>
<p>三 用7-zip的<code>复制</code>或者<code>移动</code>都可以,把音乐导入到电脑里.</p>
<p>四 要把音乐导入TF卡的时候,只要把7-zip里显示的音乐地址复制后,然后用7-zip的复制或者移动,把目标地址粘贴到里面,因为一般的文件管理器是看不到这个目录的很麻烦.</p>
<p>五 据说可以格式化TF卡,然后就可以随意用了,但是我担心播放机有固定地址,如果改了怕无法播放音乐,所以没动,以后有机会再尝试吧</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://jingyan.baidu.com/article/47a29f24311a10c0142399f7.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/47a29f24311a10c0142399f7.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 玩机技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vuex学习小记]]></title>
      <url>http://elickzhao.github.io/2017/02/vuex%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0%20/</url>
      <content type="html"><![CDATA[<p>先记录下 还没仔细看完, 以后有新的心得,再补充.</p>
<p><a href="http://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="noopener">vuex官方文档</a><br><a href="http://www.tuicool.com/articles/vQBbiiQ" target="_blank" rel="noopener">vue+vuex构建单页应用</a><br><a href="http://www.tuicool.com/articles/jyUbIbm" target="_blank" rel="noopener">vuex入门实例(1/3)</a></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单机js小程序数据库选择 SqLite与MongoDB之间]]></title>
      <url>http://elickzhao.github.io/2017/02/%E5%8D%95%E6%9C%BAjs%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E6%8B%A9%20SqLite%E4%B8%8EMongoDB%E4%B9%8B%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>打算用vue开发个单机小程序,于是这个数据库选择就是个问题了.<br>看到这个小程序 <a href="https://github.com/lin-xin/notepad" target="_blank" rel="noopener">notepad</a> 他是用的 <code>localStorage</code> 不过这个存储有大小限制 不太适合我的要求.<br>于是,就看到了SqLite与MongoDB, 这两个各有优点,确实不好选.</p>
<p><strong>MongoDB</strong>: 这个与Node.js联系紧密,速度很快,不过据说特别占空间,而且好像是运行在内存中,如果要保存在硬盘还需要特别操作,没用过所以具体如何不清楚.</p>
<p><strong>SqLite</strong>: 小巧精悍,据说一般用于手机程序和小程序,但是他是单线程用于硬盘,所以速度比不上MongoDB,但是占用空间小,而且可以使用sql语句,所以用起来比较简单.</p>
<p>经过考虑,原本打算用SqLite因为这个比较符合我的要求,但是因为从来没接触过MongoDB,所以这次就用MongoDB尝试下.不好用的情况下,就换回SqLite.</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> sqlite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js,node与MongoDB使用]]></title>
      <url>http://elickzhao.github.io/2017/02/js,node%E4%B8%8EMongoDB%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>下面参考文档第一个,有详细的增删改查的方法,因为我暂时还没使用过所以先不写心得了.<br>这里值得一提的是:原始的使用方法很是繁琐,这里有个推荐的插件是 <strong>Mongoose</strong>,这里安装也很简单,和其他node模块一样. <code>npm install mongoose --save</code>.可以尝试下.<br>更多的mongoose使用看这里 <a href="http://www.nodeclass.com/api/mongoose.html" target="_blank" rel="noopener">ongoose文档</a>.<br>这篇文章也不错 <a href="http://cnodejs.org/topic/504b4924e2b84515770103dd" target="_blank" rel="noopener">Mongoose学习参考文档——基础篇</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://javascript.ruanyifeng.com/nodejs/mongodb.html" target="_blank" rel="noopener">MongoDB的应用</a><br><a href="http://www.cnblogs.com/EricaMIN1987_IT/p/3654826.html" target="_blank" rel="noopener">从零开始学习Node.js例子八 使用SQLite3和MongoDB</a><br><a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">MongoDB 教程</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> NoSql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Yarn 更快的js套件管理 替换NPM]]></title>
      <url>http://elickzhao.github.io/2017/01/Yarn%20%E6%9B%B4%E5%BF%AB%E7%9A%84js%E5%A5%97%E4%BB%B6%E7%AE%A1%E7%90%86%20%E6%9B%BF%E6%8D%A2NPM/</url>
      <content type="html"><![CDATA[<blockquote>
<p>新一代戰神 Yarn 終於在昨天出爐了，Yarn 跟 Npm 一樣都是 JavaScript 套件版本管理工具，但是 Npm 令人詬病的是安裝都是非常的慢，快取機制用起來效果也不是很好，所以 Yarn 的出現解決了這些問題，透過 Yarn 安裝過的套件都會在家目錄產生 Cache (目錄在 ~/.yarn-cache/)，也就是只要安裝過一次，下次砍掉 node_modules 目錄重新安裝都會從 Cache 讀取。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>如果也就安装了npm 那么很简单 <code>npm install -g yarn</code></li>
<li><del>如果没有安装npm,而且不想用npm了,那只有去官网下载安装包.下载地址：<a href="https://yarnpkg.com/latest.msi" target="_blank" rel="noopener">https://yarnpkg.com/latest.msi</a> 不过被墙的厉害,所以需要有些准备.</del> 现在官网可以访问了,而且速度很快并且有中文,搜索包也快很多. <a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">https://yarnpkg.com/zh-Hans/</a></li>
<li>以前说那个下载的安装程序,这次尝试了,不过安装特别讨厌,并没有自动把命令放到环境变量里.而且安装位置也不好.所以还是用 npm 安装吧 比较简单</li>
<li>在强调一些搜索包真是太方便了,全是中文<a href="https://yarnpkg.com/zh-Hans/packages" target="_blank" rel="noopener">https://yarnpkg.com/zh-Hans/packages</a></li>
</ol>
<p>##yarn更换下载源</p>
<p>// 查看下载源</p>
<pre><code>yarn config get registry
</code></pre><p>// 更换为淘宝源</p>
<pre><code>yarn config set registry https
</code></pre><p>虽然原来的源还不错,不过下载些被墙了的和大的插件还是比较慢,所以换了淘宝.<br>不过淘宝这个源不太稳定,还是怎么回事.有时说插件都安装成功了,不过使用的时候就报错.<br>npm 就不会 搞不懂啊.</p>
<h2 id="命令行对比"><a href="#命令行对比" class="headerlink" title="命令行对比"></a>命令行对比</h2><p><a href="https://yarnpkg.com/en/docs/migrating-from-npm" target="_blank" rel="noopener">官网原文链接</a><br>|npm |    Yarn |<br>| ——–   | —–  | —-  |<br>|npm install |    yarn install |<br>|(N/A)    |yarn install –flat|<br>|(N/A)    |yarn install –har|<br>|(N/A)    |yarn install –no-lockfile|<br>|(N/A)    |yarn install –pure-lockfile|<br>|npm install [package]    |(N/A)|<br>|npm install –save [package]    |yarn add [package]|<br>|npm install –save-dev [package]    |yarn add [package] [–dev/-D]|<br>|(N/A)    |yarn add [package] [–peer/-P]|<br>|npm install –save-optional [package]    |yarn add [package] [–optional/-O]|<br>|npm install –save-exact [package]    |yarn add [package] [–exact/-E]|<br>|(N/A)    |yarn add [package] [–tilde/-T]|<br>|npm install –global [package]    |yarn global add [package]|<br>|npm rebuild    |yarn install –force|<br>|npm uninstall [package]    |(N/A)|<br>|npm uninstall –save [package]    |yarn remove [package]|<br>|npm uninstall –save-dev [package]    |yarn remove [package]|<br>|npm uninstall –save-optional [package]    |yarn remove [package]|<br>|npm cache clean    |yarn cache clean|<br>|rm -rf node_modules &amp;&amp; npm install    |yarn upgrade|</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.jb51.net/article/95630.htm" target="_blank" rel="noopener">Yarn的安装与使用详细介绍</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo迁移别的电脑步骤]]></title>
      <url>http://elickzhao.github.io/2017/01/hexo%E8%BF%81%E7%A7%BB%E5%88%AB%E7%9A%84%E7%94%B5%E8%84%91%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<p>其实吧,没什么.把整个目录拷贝过来,然后注意一下工具是否完整.<br>git,hexo-cli,npm与node的版本别过低.<br>最后就是一定要生成ssh公钥并加到github里,要不hexo d 是不能自动提交的.<br>关于生成公钥看这里<a href="https://www.zybuluo.com/mdeditor#641896" target="_blank" rel="noopener">应用TortoiseGit为github账号添加SSH keys</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js前端插件大总结]]></title>
      <url>http://elickzhao.github.io/2017/01/js%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6%E5%A4%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="vue-markdown-loader"><a href="#vue-markdown-loader" class="headerlink" title="vue-markdown-loader"></a>vue-markdown-loader</h2><blockquote>
<p>vue插件 转换md文件成网页<br><a href="https://github.com/QingWei-Li/vue-markdown-loader" target="_blank" rel="noopener">Github地址</a></p>
</blockquote>
<h2 id="TheaterJS"><a href="#TheaterJS" class="headerlink" title="TheaterJS"></a>TheaterJS</h2><blockquote>
<p>打字输入效果的插件<br><a href="https://github.com/Zhouzi/TheaterJS" target="_blank" rel="noopener">Github地址</a></p>
</blockquote>
<h2 id="cooking"><a href="#cooking" class="headerlink" title="cooking"></a>cooking</h2><blockquote>
<p>快速简易配置webpa 让你快速开始开发前端<br><a href="http://cookingjs.github.io/zh-cn/create-a-generator.html" target="_blank" rel="noopener">官方文档</a><br><a href="https://github.com/ElemeFE/cooking/blob/master/README_zh-cn.md" target="_blank" rel="noopener">Github地址</a></p>
</blockquote>
<h2 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h2><blockquote>
<p>layer是一款近年来备受青睐的web弹层组件<br><a href="http://layer.layui.com/" target="_blank" rel="noopener">官方网站</a></p>
</blockquote>
<h2 id="SweetAlert2"><a href="#SweetAlert2" class="headerlink" title="SweetAlert2"></a>SweetAlert2</h2><blockquote>
<p>强大的纯Js模态消息对话框插件</p>
</blockquote>
<p><a href="http://www.w2bc.com/upload/201606/12/201606121744/index.html" target="_blank" rel="noopener">DEMO展示</a><br><a href="https://github.com/limonte/sweetalert2" target="_blank" rel="noopener">github地址</a></p>
<h2 id="pNotify"><a href="#pNotify" class="headerlink" title="pNotify"></a>pNotify</h2><blockquote>
<p>JavaScript 的消息提醒插件</p>
</blockquote>
<p><a href="http://www.oschina.net/p/pnotify" target="_blank" rel="noopener">官网暂时打不开先用这个吧</a><br><a href="https://github.com/sciactive/pnotify" target="_blank" rel="noopener">github地址</a></p>
<h2 id="Moment-js"><a href="#Moment-js" class="headerlink" title="Moment.js"></a>Moment.js</h2><blockquote>
<p>JavaScript 日期处理类库</p>
</blockquote>
<p><a href="http://momentjs.cn/" target="_blank" rel="noopener">中国官网</a><br><a href="https://github.com/moment/moment/" target="_blank" rel="noopener">github地址</a></p>
<h2 id="FlipClock-js"><a href="#FlipClock-js" class="headerlink" title="FlipClock.js"></a>FlipClock.js</h2><blockquote>
<p>一个好看的时钟</p>
</blockquote>
<p><a href="http://flipclockjs.com/#" target="_blank" rel="noopener">官方网站演示</a><br><a href="https://github.com/objectivehtml/FlipClock" target="_blank" rel="noopener">github地址</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不错的前台框架 总结 Semantic UI,slicy,Amaze ui 等等]]></title>
      <url>http://elickzhao.github.io/2017/01/%E4%B8%8D%E9%94%99%E7%9A%84%E5%89%8D%E5%8F%B0%E6%A1%86%E6%9E%B6%20%E6%80%BB%E7%BB%93%20Semantic%20UI,slicy,Amaze%20ui%20%E7%AD%89%E7%AD%89/</url>
      <content type="html"><![CDATA[<p><strong>IView:</strong> 是用vue2开发的前端框架,拿来搭建后台非常省事.<br><a href="https://www.iviewui.com/" target="_blank" rel="noopener">官方网站</a></p>
<p><strong>layui:</strong> 国产复古框架.目前刚开发还有点问题,不过以后可以看看.这个相对简单,开发小东西比较适合.<br><a href="http://www.layui.com/" target="_blank" rel="noopener">官方网站</a></p>
<p><strong>Element:</strong> 网站快速成型工具.放在这里不知道合不合适,这是个’饿了吗’做的基于vue.js 2.0的前端框架,所有东西都被做成了组件了.</p>
<blockquote>
<p>相关文档:<br><a href="http://element.eleme.io/#/" target="_blank" rel="noopener">Element官网</a></p>
</blockquote>
<p><strong>QMUI Web:</strong> 一个旨在提高 UI 开发效率 快速产生项目 UI 的前端框架.这是QQ的一个前端UI还没仔细看过</p>
<blockquote>
<p>相关文档:<br><a href="http://qmuiteam.com/web/index.html" target="_blank" rel="noopener">QMUI Web官网</a></p>
</blockquote>
<p><strong>Semantic UI:</strong> 新进小生,看起来很美.而且组件丰富,感觉更简单容易上手.还没用过,以后尝试下.而且他的文档也特别详细 这个好像IE9以下兼容不好</p>
<blockquote>
<p>相关文档:<br><a href="http://www.semantic-ui-cn.com/" target="_blank" rel="noopener">Semantic UI中国官网</a></p>
</blockquote>
<p><strong>materialscss:</strong> 这是新发现的极好的,google出的,简单大气,做些产品的官网十分好.而且他的效果是立体的不是普通的UI那样非常爽.而且和vue.js配合的很好<br><a href="http://www.materialscss.com/" target="_blank" rel="noopener">中文官网</a><br><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="noopener">Material Design 设计原型 根据这个做的上面的框架</a><br><a href="http://appcomponents.org/material-components/#!/" target="_blank" rel="noopener">配合vue.js的组件</a></p>
<p><strong>Amaze ui:</strong> 这个框架和bootstrap很神似,不过他的好处是中文文档详细,比较是中国自己的玩意么.兼容IE8</p>
<blockquote>
<p>相关文档:<br><a href="http://amazeui.org/" target="_blank" rel="noopener">妹子官网</a></p>
</blockquote>
<p><strong>拼图pintuer:</strong> 这个使用过,主要跟妹子UI差不多,颜色很靓丽.最主要原因他有套免费的后台代码.<br><a href="http://www.pintuer.com/" target="_blank" rel="noopener">拼图官网</a></p>
<p><strong>H-ui:</strong> 这个关注他的主要原因也是因为有个后台模版,而且这个模版比拼图那个更好.有空可以利用这个和laravel结合做一个东西.这个后台模版更接近操控后台,比如收银等,因为页面很朴实,不像网上后台.而且这个框架不支持手机页面<br><a href="http://www.h-ui.net/index.shtml" target="_blank" rel="noopener">官方网站</a></p>
<p><strong>zui:</strong> 还不错替代bootstrap好方案,简单易学.兼容也还可以,配合一些其他插件</p>
<blockquote>
<p>相关文档:<br><a href="http://zui.sexy/#/" target="_blank" rel="noopener">官方网站</a></p>
</blockquote>
<p><strong>切图框架slicy:</strong> 这个框架虽然比较小众,但是有个好处就是即兼容IE6~IE9,又能做到手机和pc的响应式布局</p>
<blockquote>
<p>相关文档:<br><a href="http://www.slicy.cn/?qietu_com" target="_blank" rel="noopener">切图官网</a></p>
</blockquote>
<p><strong>bootstrap:</strong> 这个好像没什么比较多说了,人人都知道</p>
<blockquote>
<p>相关文档:<br><a href="http://www.bootcss.com/" target="_blank" rel="noopener">中国官网内容很丰富</a></p>
</blockquote>
<p><strong>Foundation:</strong> 这个貌似在中国用的很少,知道是干啥的就行了</p>
<blockquote>
<p>相关文档:<br><a href="http://www.oschina.net/p/foundation/" target="_blank" rel="noopener">Foundation简介</a></p>
</blockquote>
<p><strong>UIkit:</strong> 很早就接触到的框架,但是一直没用过.好像他的特色是很小.</p>
<blockquote>
<p>相关文档:<br><a href="http://www.getuikit.net/index.html" target="_blank" rel="noopener">官方网站</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端技术 </tag>
            
            <tag> 前台框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel核心理解 ServiceProvider(服务提供者) Container(容器) Facades(门面)]]></title>
      <url>http://elickzhao.github.io/2017/01/laravel%E6%A0%B8%E5%BF%83%E7%90%86%E8%A7%A3%20ServiceProvider(%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85)%20Container(%E5%AE%B9%E5%99%A8)%20Facades(%E9%97%A8%E9%9D%A2)/</url>
      <content type="html"><![CDATA[<p>时间紧迫先简单说明下</p>
<blockquote>
<p><strong>服务提供者:</strong> 是绑定服务到容器的工具.</p>
<p><strong>容器:</strong> 是laravel装载服务提供者提供的服务实例的集合或对象</p>
<p><strong>门面:</strong> 使用这些服务的快捷方式.也就是静态方法.</p>
<p><strong>注意:</strong> 如果一个类没有基于任何接口那么就没有必要将其绑定到容器。容器并不需要被告知如何构建对象，因为它会使用 PHP 的反射服务自动解析出具体的对象。(?后面这个明白意思,但不知道怎么做)</p>
</blockquote>
<a id="more"></a>
<h2 id="Provider-服务提供者"><a href="#Provider-服务提供者" class="headerlink" title="Provider (服务提供者)"></a>Provider (服务提供者)</h2><h3 id="主要作用就是绑定服务到容器中-看下面例子"><a href="#主要作用就是绑定服务到容器中-看下面例子" class="headerlink" title="主要作用就是绑定服务到容器中,看下面例子."></a>主要作用就是绑定服务到容器中,看下面例子.</h3><blockquote>
<p>在一个服务提供者中，可以通过 $this-&gt;app 变量访问容器，然后使用 bind 方法注册一个绑定，该方法需要两个参数，第一个参数是我们想要注册的类名或接口名称，第二个参数是返回类的实例的闭包</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Riak</span>\<span class="title">Connection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiakServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在容器中注册绑定。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="comment">//这是5.3写法</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(Connection::class, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Connection(config(<span class="string">'riak'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//5.2以前这么写 $this-&gt;app-&gt;singleton('Riak\Contracts\Connection', function ($app)&#123;...&#125;</span></span><br><span class="line">        <span class="comment">// Connection::class 返回的就是命名空间字符串(可以看另一个我的文章),所以跟5.2是一样的.  </span></span><br><span class="line">        <span class="comment">//这里千万注意'Riak\Contracts\Connection'是个字符串,相当于在容器中定义了一个名字并把实例赋值给了这个名字.</span></span><br><span class="line">        <span class="comment">//并没有其他更高深的含义</span></span><br><span class="line">        <span class="comment">//所以只要在 config/app 下的provider数组里 注册一下就可以使用了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>但是最经常用的方式是:</strong></p>
<blockquote>
<p>服务容器的一个非常强大的特性是其绑定接口到实现的能力。我们假设有一个 EventPusher 接口及其 RedisEventPusher 实现，编写完该接口的 RedisEventPusher 实现后，就可以将其注册到服务容器：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EventPusher 为契约接口</span></span><br><span class="line"><span class="comment">//RedisEventPusher 为实现这个接口的redis工具</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;bind(<span class="string">'App\Contracts\EventPusher'</span>, <span class="string">'App\Services\RedisEventPusher'</span>);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>这样做的妙处在于这里:</strong></p>
<blockquote>
<p>这段代码告诉容器当一个类需要 EventPusher 的实现时将会注入 RedisEventPusher，现在我们可以在构造器或者任何其它通过服务容器注入依赖的地方进行 EventPusher 接口的类型提示,就会把RedisEventPusher的实例传给类</p>
<p>还有个好处就是,当想要换掉EventPusher,很方便你不需要改别的地方的代码只要在provider把绑定类换掉就可以了,换成另一个实现了 EventPusher 类就ok了. 当然还有更强大一个接口绑定多个实现,然后根据条件选择使用的类,这个 laravel 也能做到.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Contracts</span>\<span class="title">EventPusher</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个新的类实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  EventPusher  $pusher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(EventPusher $pusher)</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;pusher = $pusher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="绑定到容器后-就是注册到Provider-让-laravel-可以自动加载"><a href="#绑定到容器后-就是注册到Provider-让-laravel-可以自动加载" class="headerlink" title="绑定到容器后,就是注册到Provider,让 laravel 可以自动加载"></a>绑定到容器后,就是注册到Provider,让 laravel 可以自动加载</h3><p>这次很简单 就是添加到 config/app 下的 Provider数组里<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">'providers'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Laravel Framework Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Illuminate\Auth\AuthServiceProvider::class,</span><br><span class="line">        Illuminate\Broadcasting\BroadcastServiceProvider::class,</span><br><span class="line">        Illuminate\Bus\BusServiceProvider::class,</span><br><span class="line">        Illuminate\Cache\CacheServiceProvider::class,</span><br><span class="line">.... </span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p>
<h3 id="然后就是使用了"><a href="#然后就是使用了" class="headerlink" title="然后就是使用了"></a>然后就是使用了</h3><p>其实上面已经说过了 使用最长用的方法就是 __construct()里注入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Contracts</span>\<span class="title">EventPusher</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个新的类实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  EventPusher  $pusher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(EventPusher $pusher)</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;pusher = $pusher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//当然还可以手动调用 </span></span><br><span class="line">    $fooBar = <span class="keyword">$this</span>-&gt;app-&gt;make(<span class="string">'FooBar'</span>);</span><br><span class="line">    <span class="comment">//其次，你可以以数组方式访问容器，因为其实现了 PHP 的 ArrayAccess 接口：</span></span><br><span class="line">    $fooBar = <span class="keyword">$this</span>-&gt;app[<span class="string">'FooBar'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="容器说明"><a href="#容器说明" class="headerlink" title="容器说明"></a>容器说明</h2><p>容器很简单 就是$this-&gt;app 或者帮助函数app()获得就是laravel实例 里面就是容器</p>
<h2 id="门面说明"><a href="#门面说明" class="headerlink" title="门面说明"></a>门面说明</h2><p>有空具体写一下, 门面有两个情形,一种是Cache类的,一种是Config类的. Config比较简单就是实现了一个接口,然后关联一个服务. 而且好像是laravel自动加载的,不需要手动在config/app的数组里添加.<br>但是Cache就不同了,他必须在config/app里手动添加.而且他还有一个服务提供者Provider,在容器里的’cache’其实首先指定的是这个Provider,并不像Config那么简单直接指向服务了.</p>
<p>这是门面类, 这里的’cache’是容器里的实例. 这个在Config/app的alias里.  但你会发现Cache绑定容器的Provider,帮的’cache’是个管理类. 但是Config却找不到这个Provider在哪里.他只有简单的继承了一个接口就完了.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> <span class="keyword">extends</span> <span class="title">Facade</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取组件注册名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'cache'</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm 及 node.js 升级自己]]></title>
      <url>http://elickzhao.github.io/2017/01/Npm%E5%8F%8A%20node.js%20%E5%8D%87%E7%BA%A7%E8%87%AA%E5%B7%B1%20/</url>
      <content type="html"><![CDATA[<h1 id="npm-自身升级"><a href="#npm-自身升级" class="headerlink" title="npm 自身升级"></a>npm 自身升级</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure>
<h1 id="node-js-自身升级"><a href="#node-js-自身升级" class="headerlink" title="node.js 自身升级"></a>node.js 自身升级</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># node有一个模块叫n（这名字可够短的。。。），是专门用来管理node.js的版本的。</span><br><span class="line"># 首先安装n模块：</span><br><span class="line">npm install -g n </span><br><span class="line"></span><br><span class="line">#升级node.js到最新稳定版</span><br><span class="line">n stable</span><br><span class="line"></span><br><span class="line"># n 后面也可以跟随版本号比如： </span><br><span class="line">n v0.10.26</span><br></pre></td></tr></table></figure>
<hr>
<p>有一次升级遇到问题,根本无法通过上面方法实现升级,而且会报错提示级别太低.<br>这是唯一的办法是下载新的windows版本重载才行.<br>还有就是 <code>n</code>这个程序好像只是在linux下才好使,windows下是没用的.</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack的'Cannot find module 'webpacklibnodeNodeTemplatePlugin'问题]]></title>
      <url>http://elickzhao.github.io/2017/01/webpack%E7%9A%84'Cannot%20find%20module%20'webpacklibnodeNodeTemplatePlugin'%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<ul>
<li>第一步：<code>npm config get prefix</code> ，获取输出path <code>C:\Users\jaxGu\AppData\Roaming\npm</code>加上<code>\node_modules</code>用于第二步值</li>
</ul>
<ul>
<li>第二步：添加系统环境变量：<code>NODE_PATH:C:\Users\jaxGu\AppData\Roaming\npm\node_modules</code></li>
</ul>
<ul>
<li>第三步：关掉命令行，重新打开。</li>
</ul>
<p><strong>参考文档</strong><br><a href="http://www.cnblogs.com/guxuelong/p/5288390.html" target="_blank" rel="noopener">『奇葩问题集锦』Cannot find module ‘webpack/lib/node/NodeTemplatePlugin’</a><br><a href="http://www.bubuko.com/infodetail-1420423.html" target="_blank" rel="noopener">webpack的问题</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node.js中的path.resolve方法使用说明]]></title>
      <url>http://elickzhao.github.io/2017/01/node.js%E4%B8%AD%E7%9A%84path.resolve%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>方法说明：<br>将参数 to 位置的字符解析到一个绝对路径里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.resolve([from ...], to)</span><br></pre></td></tr></table></figure></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当使用插件不在标准路径的时候,可以使用这个函数方便的引入.</p>
<hr>
<p><strong>由于该方法属于path模块，使用前需要引入path模块（var path= require(“path”) ）</strong><br><strong>接收参数：</strong><br>from                     源路径<br>to                         将被解析到绝对路径的字符串</p>
<p><strong>例子：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// returns</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'/foo/bar/baz'</span></span><br><span class="line"> </span><br><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'/tmp/file/'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// returns</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'/tmp/file'</span></span><br><span class="line"> </span><br><span class="line">path.resolve(<span class="string">'wwwroot'</span>, <span class="string">'static_files/png/'</span>, <span class="string">'../gif/image.gif'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// if currently in /home/myself/node, it returns</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'/home/myself/node/wwwroot/static_files/gif/image.gif'</span></span><br></pre></td></tr></table></figure>
<p><a href="http://www.jb51.net/article/58295.htm" target="_blank" rel="noopener">node.js中的path.resolve方法使用说明</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Velocity.js简单介绍]]></title>
      <url>http://elickzhao.github.io/2017/01/Velocity.js%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Velocity 是一个简单易用、高性能、功能丰富的轻量级JS动画库。它能和 jQuery 完美协作，并和$.animate()有相同的 API， 但它不依赖 jQuery，可单独使用。 Velocity 不仅包含了 $.animate() 的全部功能， 还拥有：颜色动画、转换动画(transforms)、循环、 缓动、SVG 动画、和 滚动动画 等特色功能。</p>
<p>它比 $.animate() 更快更流畅，性能甚至高于 CSS3 animation， 是 jQuery 和 CSS3 transition 的最佳组合，它支持所有现代浏览器，最低可兼容到 IE8 和 Android 2.3。</p>
<p>Velocity 目前已被数以千计的公司使用在自己的项目中，包括 WhatsApp, Tumblr, Windows, Samsung, Uber 等，这里 Libscore.com 统计了哪些站点正使用 velocity.js。</p>
<p><strong>参数概述和基础写法</strong><br>Velocity 接收一组 css 属性键值对 (css map) 作为它的第一个参数，该参数作为动画效果的最终属性。第二个参数是可选参数 为动画的额外配置项。下面为参数的写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$element.velocity(&#123;</span><br><span class="line">    width: <span class="string">"500px"</span>,        <span class="comment">// 动画属性 宽度到 "500px" 的动画</span></span><br><span class="line">    property2: value2      <span class="comment">// 属性示例</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="comment">/* Velocity 动画配置项的默认值 */</span></span><br><span class="line">    duration: <span class="number">400</span>,         <span class="comment">// 动画执行时间</span></span><br><span class="line">    easing: <span class="string">"swing"</span>,       <span class="comment">// 缓动效果</span></span><br><span class="line">    queue: <span class="string">""</span>,             <span class="comment">// 队列</span></span><br><span class="line">    begin: <span class="literal">undefined</span>,      <span class="comment">// 动画开始时的回调函数</span></span><br><span class="line">    progress: <span class="literal">undefined</span>,   <span class="comment">// 动画执行中的回调函数（该函数会随着动画执行被不断触发）</span></span><br><span class="line">    complete: <span class="literal">undefined</span>,   <span class="comment">// 动画结束时的回调函数</span></span><br><span class="line">    display: <span class="literal">undefined</span>,    <span class="comment">// 动画结束时设置元素的 css display 属性</span></span><br><span class="line">    visibility: <span class="literal">undefined</span>, <span class="comment">// 动画结束时设置元素的 css visibility 属性</span></span><br><span class="line">    loop: <span class="literal">false</span>,           <span class="comment">// 循环</span></span><br><span class="line">    delay: <span class="literal">false</span>,          <span class="comment">// 延迟</span></span><br><span class="line">    mobileHA: <span class="literal">true</span>         <span class="comment">// 移动端硬件加速（默认开启）</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>简单就说这些吧,具体看下面例子.更多的看参考文档,因为很难在简单篇幅里简单解释完全,以后遇到什么问题再补充,还有就是这里还需要一点 <code>easing</code> 的东西,这可以看<a href="http://elickzhao.github.io/2017/01/jQuery%20Easing%20%E7%AE%80%E5%8D%95%E8%AE%B2%E8%A7%A3/">以前的文章</a>.</p>
<iframe width="100%" height="380" src="https://code.hcharts.cn/test123/I4Vflc/share/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.open-open.com/lib/view/open1435212597935.html" target="_blank" rel="noopener">Velocity.js介绍</a><br><a href="http://www.mrfront.com/docs/velocity.js/index.html" target="_blank" rel="noopener">Velocity.js中文文档</a><br><a href="http://codepen.io/collection/tIjGb/" target="_blank" rel="noopener">Velocity ui 动作样式</a><br><a href="http://www.jqcool.net/jquery-velocity.html" target="_blank" rel="noopener">极棒的jquery动画切换引擎插件Velocity.js</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery Easing 简单讲解]]></title>
      <url>http://elickzhao.github.io/2017/01/jQuery%20Easing%20%E7%AE%80%E5%8D%95%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>( ′◔ ‸◔`) 以前看过这个,不过时间长了,就记不清了. easing就是模拟物理动作模型.从图片来看就更清楚了.<br><a href="http://www.runoob.com/jqueryui/api-easings.html" target="_blank" rel="noopener">http://www.runoob.com/jqueryui/api-easings.html</a>在这里能看到,每个动作的演示,点击每个图片就能看到了</p>
<p><img src="http://www.gbin1.com/technology/javascript/20121017-js-css-easing-websites/1.jpg" alt=""></p>
<p>easing参数可选的值就有以下32种：</p>
<ol>
<li>linear</li>
<li>swing</li>
<li>easeInQuad</li>
<li>easeOutQuad</li>
<li>easeInOutQuad</li>
<li>easeInCubic</li>
<li>easeOutCubic</li>
<li>easeInOutCubic</li>
<li>easeInQuart</li>
<li>easeOutQuart</li>
<li>easeInOutQuart</li>
<li>easeInQuint</li>
<li>easeOutQuint</li>
<li>easeInOutQuint</li>
<li>easeInExpo</li>
<li>easeOutExpo</li>
<li>easeInOutExpo</li>
<li>easeInSine</li>
<li>easeOutSine</li>
<li>easeInOutSine</li>
<li>easeInCirc</li>
<li>easeOutCirc</li>
<li>easeInOutCirc</li>
<li>easeInElastic</li>
<li>easeOutElastic</li>
<li>easeInOutElastic</li>
<li>easeInBack</li>
<li>easeOutBack</li>
<li>easeInOutBack</li>
<li>easeInBounce</li>
<li>easeOutBounce</li>
<li>easeInOutBounce</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.sina.com.cn/s/blog_70a3539f0102v8az.html" target="_blank" rel="noopener">jQuery Easing 使用方法及其图解 </a><br><a href="http://api.jqueryui.com/easings/" target="_blank" rel="noopener">官网动作演示</a><br><a href="http://www.gbin1.com/technology/javascript/20121017-js-css-easing-websites/" target="_blank" rel="noopener">帮助你更好理解javascript中easing功能的网站 - Easings.net</a><br><a href="http://www.runoob.com/jqueryui/api-easings.html" target="_blank" rel="noopener">jQuery UI API - Easings</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> easing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx服务器端解决font字体文件跨域]]></title>
      <url>http://elickzhao.github.io/2017/01/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%A7%A3%E5%86%B3font%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_6ad624380102vlp0.html" target="_blank" rel="noopener">Nginx服务器端解决font字体文件跨域</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Atom插件推荐]]></title>
      <url>http://elickzhao.github.io/2017/01/Atom%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<p>下面的文章都有具体介绍了,就不一一写了,感觉比较常用或者比较易忘的记录一下.</p>
<p><strong>sync-settings</strong><br>插件备份、按键绑定备份<br><a href="https://atom.io/packages/sync-settings" target="_blank" rel="noopener">插件主页面</a><br>安装主页已经写了,最核心的是需要注册一个gist用于同步的仓库,这个在Github主页里能找到,gist好像是一个用于文本同步的东西.<br>这个是安装时的难点,使用就很简单了,把名字写上后,每次打开atom都会同步插件的.</p>
<blockquote>
<p>今天在另一个电脑上安装了,看来还是的记录下才行,没想象中那么容易</p>
</blockquote>
<p><strong>安装</strong><br>只需要填入 Personal Access Token 和 Gist ID 就可以了<br>Personal Access Token : <code>91c2f32691fee3e264df51417a3a8f40f7d7850b</code><br>Gist ID  : <code>b65042216cbcb67891be5dbcc34c0edf</code></p>
<p><strong>使用</strong><br>这里差点弄错.<br>如果是备份的话,就点扩展包里菜单的 <code>sync-settings:backup</code><br>恢复就用扩展包里菜单的 <code>sync-settings:restore</code></p>
<p>所以在新装电脑中点 <code>sync-settings:restore</code> 就能同步了,千万不要点 <code>sync-settings:backup</code></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.csdn.net/zsl10/article/details/51822715" target="_blank" rel="noopener">ATOM基础教程一ATOM插件推荐(4)</a><br><a href="http://blog.csdn.net/column/details/atom-tutorial.html" target="_blank" rel="noopener">Atom 基础教程</a></p>
]]></content>
      
        
        <tags>
            
            <tag> IDE </tag>
            
            <tag> atom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP访问控制(CORS)]]></title>
      <url>http://elickzhao.github.io/2017/01/HTTP%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6(CORS)/</url>
      <content type="html"><![CDATA[<p><a href="https://www.web-tinker.com/article/20961.html" target="_blank" rel="noopener">使用 Access-Control-Max-Age 来缓存 CORS 配置</a><br><a href="http://zawa.iteye.com/blog/1868108" target="_blank" rel="noopener">使用withCredentials发送跨域请求凭据</a><br><a href="http://www.tuicool.com/articles/7FVnMz" target="_blank" rel="noopener">Access-Control-Allow-Origin与跨域</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制(CORS)</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx 下装laravel]]></title>
      <url>http://elickzhao.github.io/2017/01/Nginx%E4%B8%8B%E8%A3%85laravel%20/</url>
      <content type="html"><![CDATA[<p>nginx 配置时 一定要做路由转换,因为laravel使用的是简洁版路由.apache因为在public目录里有 .htaccess所以不用管了, nginx就得自己配置了.</p>
<p>把这句添加进去就哦了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://segmentfault.com/q/1010000002422408" target="_blank" rel="noopener">Laravel Nginx 除 / 外所有路由 404</a><br><a href="https://laravel.com/docs/5.0/installation#pretty-urls" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 服务器相关技术 </tag>
            
            <tag> laravel </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript 简介]]></title>
      <url>http://elickzhao.github.io/2017/01/ECMAScript%20%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ECMAScript 6 简单来讲就是一个javascript的标准版本,和现用版本不是很相同.<br>而且由于浏览器支持的不同,很多新写法都不支持.只有等标准化完成后,统一了才能更实用.<br>现在一般的情况是用babel进行转化兼容使用,这个可以用webpace做到,不过最新可以用cooke做了.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/zfc2201/p/3452476.html" target="_blank" rel="noopener">ECMAScript的基础概念</a><br><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6简介</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack 配置选项详解]]></title>
      <url>http://elickzhao.github.io/2017/01/webpace%20%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>官方现在已经有了中文,而且文档比较完善了,参考还是看官方吧<br><a href="https://doc.webpack-china.org/" target="_blank" rel="noopener">webpace官方网站</a></p>
<p>几个问题</p>
<ol>
<li>webpack-dev-server 不会生成文件到 output 目录里 而是生成到内存里</li>
<li>webpack-dev-server 用命令行比Node.js Api方式简单太多了.Node.js Api方式还需要安装各种插件</li>
<li>webpack-dev-server 各种配置解释参考官方文档 特别全</li>
</ol>
<h2 id="以下都是旧文章了-可能用处不大了"><a href="#以下都是旧文章了-可能用处不大了" class="headerlink" title="以下都是旧文章了,可能用处不大了."></a>以下都是旧文章了,可能用处不大了.</h2><p><a href="http://www.jianshu.com/p/418e48e0cef1" target="_blank" rel="noopener">React+Webpack快速上手指南</a><br><a href="http://www.ituring.com.cn/article/200534" target="_blank" rel="noopener">Webpack 性能优化 （一）（使用别名做重定向）</a><br><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="noopener">Webpack 入门指迷</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016最后一天的纪念]]></title>
      <url>http://elickzhao.github.io/2016/12/2016%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%E7%9A%84%E7%BA%AA%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>唉 2016就这命悄悄匆匆的走了.这一年,真是休息了一整年啊.<br>工作上真是没啥建树啊,不过把车学了也算有点成绩了.<br>唉,钱也花光了啊.明年要加倍努力才行了.<br>唉,真是懒惰成性啊,有很多计划本应该完成的却没有完成啊.<br>动手能力实在太弱了啊.<br>今年唯一记忆的是,学车那段时间,虽然痛苦些,不过也蛮好玩的,尤其是考试的时候.<br>明天就是新的一年了,要开始加油了!<br>加油! 2016再见!</p>
]]></content>
      
        
        <tags>
            
            <tag> 心情随笔 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JWT简介]]></title>
      <url>http://elickzhao.github.io/2016/12/JWT%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<ol>
<li>客户端 token 只存简单的数据，如 userId 。永不过期，除非服务端返回 403 状态码。 </li>
<li>当 token 进来时，校验，解析出 userId ，从缓存（如 redis ）获得 userData ，若缓存存在，更新过期时间。 </li>
<li>若缓存没有命中，从数据库加载返回同时存入缓存，设置过期时间。 </li>
<li>基于安全考虑，可在 token 中再加入一个 version 字段，在第 2 步时校验该段。当改密码或其它需要将所有已登录的客户端重登时只需更新 version 字段，并清空缓存即可。<br>以上，客户端无需主动刷新，也无需定期更换 token ，只有在服务端声明 token 无效时抛弃即可，同时里面也不会包含太多的敏感信息（ jwt 只是 base64 编码，随手都可以解析数据出来，不应将敏感数据放在此处），数据量少 token 相对也短些，对传输也有好处；服务端可完全控制 token 的有效性，在必要的情况下可自主 revoke 已颁发的 token 。</li>
</ol>
</blockquote>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.tuicool.com/articles/R7Rj6r3" target="_blank" rel="noopener">JWT 简介</a><br><a href="https://zhuanlan.zhihu.com/p/22531819?refer=lsxiao" target="_blank" rel="noopener">从零实现Lumen-JWT扩展包(序):前因</a><br><a href="http://blog.csdn.net/hooloo/article/details/49714259" target="_blank" rel="noopener">Lumen上使用Dingo/Api做API开发时用JWT-Auth做认证的实现</a><br><a href="http://laravelacademy.org/post/3640.html" target="_blank" rel="noopener">Laravel 5 中使用 JWT（Json Web Token） 实现基于API的用户认证</a><br><a href="http://www.tuicool.com/articles/me6jua" target="_blank" rel="noopener">什么是JWT – JSON WEB TOKEN</a><br><a href="http://www.haomou.net/2014/08/13/2014_web_token/" target="_blank" rel="noopener">使用json web token</a><br><a href="http://blog.csdn.net/hooloo/article/details/50649712" target="_blank" rel="noopener"> Laravel (Lumen) 中使用JWT-Auth刷新token的问题</a><br><a href="https://www.itlipeng.cn/?p=764" target="_blank" rel="noopener">自定义中间件（Middleware）监听 Jwt-auth 身份认证（Laravel）</a><br><a href="http://blog.csdn.net/qq_28666081/article/details/52188549" target="_blank" rel="noopener"> Laravel实现dingo+JWT api接口之实战篇</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[极棒的jquery动画切换引擎插件Velocity.js]]></title>
      <url>http://elickzhao.github.io/2016/12/%E6%9E%81%E6%A3%92%E7%9A%84jquery%E5%8A%A8%E7%94%BB%E5%88%87%E6%8D%A2%E5%BC%95%E6%93%8E%E6%8F%92%E4%BB%B6Velocity.js/</url>
      <content type="html"><![CDATA[<p><strong>Velocity.js</strong>是一款jquery动画引擎插件，它拥有与jquery中的$.animate()相同的API，还打包了颜色动画，转换，循环，easing效果，类动画、滚动等功能，因此大家可以像使用$.animate()方法一样使用velocity，您可以快速的上手velocity.js。简单点说：Velocity就是实现页面元素中的飞入，飞出，旋转、颜色变换，esaing效果的jquery动画插件。</p>
<p>这个插件速度很快,但是还没具体用过,先记录一下,具体使用看下面文档吧.哦,对了,这个插件其实可以配合jquery一起用,不用jquery,单独使用也是可以的.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.jqcool.net/jquery-velocity.html" target="_blank" rel="noopener">极棒的jquery动画切换引擎插件Velocity.js</a><br><a href="http://velocityjs.org/" target="_blank" rel="noopener">官方网站</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos 服务器加固]]></title>
      <url>http://elickzhao.github.io/2016/12/centos%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A0%E5%9B%BA/</url>
      <content type="html"><![CDATA[<p><a href="http://www.centoscn.com/CentOS/2013/0413/295.html" target="_blank" rel="noopener">CentOS下SSH端口修改</a><br><a href="http://www.111cn.net/sys/CentOS/53293.htm" target="_blank" rel="noopener">CentOS防火墙iptables的配置方法详解</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[H5+ 遇到的一些问题总结]]></title>
      <url>http://elickzhao.github.io/2016/12/H5+%20%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="chrome调试-必须在配置文件里打开调试的选项-遇到显示手机不显示页面-说明安卓4-4以下系统-白屏是因为必须翻墙"><a href="#chrome调试-必须在配置文件里打开调试的选项-遇到显示手机不显示页面-说明安卓4-4以下系统-白屏是因为必须翻墙" class="headerlink" title="chrome调试,必须在配置文件里打开调试的选项.遇到显示手机不显示页面,说明安卓4.4以下系统.白屏是因为必须翻墙"></a>chrome调试,必须在配置文件里打开调试的选项.遇到显示手机不显示页面,说明安卓4.4以下系统.白屏是因为必须翻墙</h2><hr>
<h2 id="调用入口页面-也就是首页-可使用下面方法"><a href="#调用入口页面-也就是首页-可使用下面方法" class="headerlink" title="调用入口页面,也就是首页.可使用下面方法."></a>调用入口页面,也就是首页.可使用下面方法.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查找应用首页窗口对象</span><br><span class="line">var h=plus.webview.getWebviewById( plus.runtime.appid );</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="预加载时-id和url都必须的设置-要不真机调试时不会出错-打包后会出现空页面-这次遇到的就是id忘记加了"><a href="#预加载时-id和url都必须的设置-要不真机调试时不会出错-打包后会出现空页面-这次遇到的就是id忘记加了" class="headerlink" title="预加载时,id和url都必须的设置.要不真机调试时不会出错.打包后会出现空页面.这次遇到的就是id忘记加了"></a>预加载时,id和url都必须的设置.要不真机调试时不会出错.打包后会出现空页面.这次遇到的就是id忘记加了</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mui.init(&#123;</span><br><span class="line">  preloadPages:[</span><br><span class="line">    &#123;</span><br><span class="line">      id:preload-page-id,</span><br><span class="line">      url:prelaod-page-url,</span><br><span class="line">      styles:&#123;&#125;,//窗口参数</span><br><span class="line">      extras:&#123;&#125;,//自定义扩展参数</span><br><span class="line">      subpages:[&#123;&#125;,&#123;&#125;]//预加载页面的子页面</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  preloadLimit:5//预加载窗口数量限制(一旦超出,先进先出)默认不限制</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="类点击事件这么写-一定要先选类的外层-然后在选要点击的类"><a href="#类点击事件这么写-一定要先选类的外层-然后在选要点击的类" class="headerlink" title="类点击事件这么写,一定要先选类的外层,然后在选要点击的类."></a>类点击事件这么写,一定要先选类的外层,然后在选要点击的类.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line">					&lt;div class=&quot;mui-slider-item&quot;&gt;</span><br><span class="line">						&lt;a href=&quot;javascript:;&quot;&gt;</span><br><span class="line">							&lt;img src=&quot;img/start1.png&quot; id=&quot;_d1&quot;&gt;</span><br><span class="line">							&lt;p class=&quot;jump&quot; &gt;&lt;/p&gt;</span><br><span class="line">						&lt;/a&gt;</span><br><span class="line">					&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line">// .on的第二个参数为选择器 与.addEventListener()不一样 .addEventListener第二个参数为回调函数了.</span><br><span class="line">		mui(&apos;.mui-slider-item&apos;).on(&apos;tap&apos;,&apos;.jump&apos;,function()&#123;</span><br><span class="line">			redirect();</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="子webview的监听"><a href="#子webview的监听" class="headerlink" title="子webview的监听"></a>子webview的监听</h2><p>一定要等到webview创建好后,并且显示了.才能创建监听否则会报错的.还有一定要写在 <code>mui.plusReady(function() {})</code> 里否则也会报错<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mui.plusReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	currentWebview = plus.webview.currentWebview();</span><br><span class="line">	main = plus.webview.currentWebview().opener();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//currentWebview的监听只能写在这里 写在外面就会报错</span></span><br><span class="line">	currentWebview.addEventListener(<span class="string">'maskClick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		mui.fire(main, <span class="string">"menu:swipeleft"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//外面只能是整个窗口的监听,不过因为webview是嵌套的,</span></span><br><span class="line"><span class="comment">//mask只是作用在当期webview,所以用window是不起作用的</span></span><br><span class="line">   <span class="built_in">window</span>.addEventListener(<span class="string">"swipeleft"</span>, closeMenu);</span><br><span class="line">   <span class="comment">//子页面没有创建,监听会报错</span></span><br><span class="line"><span class="comment">//curSub.addEventListener('maskClick', closeMenu());</span></span><br></pre></td></tr></table></figure></p>
<h2 id="mask一些问题"><a href="#mask一些问题" class="headerlink" title="mask一些问题"></a>mask一些问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遮罩子页面	按照文档说法应该子页面也遮罩为啥我这个不行呢</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* mask: (String 类型 )窗口的遮罩</span></span><br><span class="line"><span class="comment">*用于设置Webview窗口的遮罩层样式，遮罩层会覆盖Webview中所有内容，包括子webview，</span></span><br><span class="line"><span class="comment">* 并且截获webview的所有触屏事件，此时Webview窗口的点击操作会触发maskClick事件。</span></span><br><span class="line"><span class="comment">* 字符串类型，可取值： rgba格式字符串，定义纯色遮罩层样式，</span></span><br><span class="line"><span class="comment">* 如"rgba(0,0,0,0.5)"，表示黑色半透明； "none"，表示不使用遮罩层； 默认值为"none"，即无遮罩层。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这是用的很笨的方法 在主页面里使用子页面遮罩</span></span><br><span class="line"><span class="comment">//					curSub.setStyle(&#123;</span></span><br><span class="line"><span class="comment">//						mask:'rgba(0,0,0,.3)'</span></span><br><span class="line"><span class="comment">//					&#125;)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 这个是当侧滑栏出现时,主页面绘制 mask,这个绘制的mask就能把apeend的子页面遮盖住</span></span><br><span class="line">		mainWebView.setStyle(&#123;</span><br><span class="line">			left: <span class="string">'70%'</span>,</span><br><span class="line">			mask: <span class="string">'rgba(0,0,0,.3)'</span>,</span><br><span class="line">			transition: &#123;</span><br><span class="line">					duration: <span class="number">150</span> <span class="comment">//动画持续时间</span></span><br><span class="line">			&#125;</span><br><span class="line">        <span class="comment">//但是这个绘制的mask不知道如何监听滑动,只能监听点击</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//还有个生成mask的方法是这个</span></span><br><span class="line">        mask = mui.createMask(_closeMenu);  <span class="comment">// _closeMenu是回调函数,当点击时候如何操作</span></span><br><span class="line">        mask.show();    <span class="comment">//显示遮罩  //这个遮罩支持滑动监听 而且默认关闭menu 但有个问题子页面不能遮罩上</span></span><br><span class="line">        mask.close();   <span class="comment">//关闭遮罩</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> APP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Babel 使用简介]]></title>
      <url>http://elickzhao.github.io/2016/12/Babel%20%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>这个教程是单独使用,并不是和webpace配合的那种.这个视频讲的非常详细.<br>但是这个视频比较早期了,所以有些东西已经不适用了.<br>比如那个 browser.js 的位置,已经不在那里了.如果想用就用<br><a href="https://cdnjs.com/" target="_blank" rel="noopener">https://cdnjs.com/</a> 从外在引用好了.<br>但是有个问题是报错了,不知道什么引起的.<br>而且chrome浏览器已经支持一些方法了,根本不需要babel,IE是不行的.</p>
<p><a href="http://ninghao.net/video/3076" target="_blank" rel="noopener">参考教程</a><br><a href="http://babeljs.cn/" target="_blank" rel="noopener">官方网站</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 数组的 push 与 concat 区别]]></title>
      <url>http://elickzhao.github.io/2016/12/JS%20%E6%95%B0%E7%BB%84%E7%9A%84%20push%20%E4%B8%8E%20concat%20%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">a.push(<span class="number">5</span>);  <span class="comment">//a 现在是1,2,3,4,5</span></span><br></pre></td></tr></table></figure></p>
<p>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> c = a.concat(b); <span class="comment">// a,b 数组都不变，c变成了1,2,3,4,5,6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里要注意是 c 变成了合并数组 不是 b , 所以这和push是有区别的</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p>因为concat()会生成个副本这个特性,所以有人说可能速度会有一些影响,但我没测试过,不好说,这里记录下吧.<br>他给出的解决方案是这样的.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];  </span><br><span class="line">arr1.push.apply(arr1,[<span class="number">4</span>,<span class="number">5</span>]);  <span class="comment">// 这时 arr1 就是 [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></p>
<p>这个 apply() 也不是很懂,有空研究下. 先看看这个吧 <a href="http://www.360doc.com/content/13/0807/19/13328522_305431575.shtml" target="_blank" rel="noopener">Js apply方法详解</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="">不用concat解决Javascript连接多个数组</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用dingo返回数据]]></title>
      <url>http://elickzhao.github.io/2016/12/%E4%BD%BF%E7%94%A8dingo%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用dingo返回数据,一开始有点懵,现在开始有点明晰了.</p>
<h2 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h2><p><strong>方法一</strong><br>用Dingo的Transformer. 其实这两种写法都可以 用Transformer()更简洁和灵活一些.<br>因为Transformer()不仅可以利用 <code>return $ECUser-&gt;attributesToArray();</code> 将属性转换成数组<br>还可以添加和转换数据库中没有的字段,还可以用 <code>include</code> 做类似关联表的作用,具体看这里: <a href="https://www.zybuluo.com/mdeditor#553839" target="_blank" rel="noopener">Dingo Transformers 的使用(Fractal)</a><br>所以这个很灵活,可以在这个类里添加更多的操作,当然只是返回array的话,还是稍显麻烦因为还得建立个文件.</p>
<p><strong>补充:</strong><br>Dingo返回数据几种形式:</p>
<p>Responding With An Array 响应一个数组<br><code>return $this-&gt;response-&gt;array($user-&gt;toArray());</code></p>
<p>Responding With A Single Item 响应一个元素<br><code>return $this-&gt;response-&gt;item($user, new UserTransformer);</code></p>
<p>Responding With A Collection Of Items 响应一个元素集合<br><code>return $this-&gt;response-&gt;collection($users, new UserTransformer);</code></p>
<p>Responding With Paginated Items 分页响应<br><code>return $this-&gt;response-&gt;paginator($users, new UserTransformer);</code></p>
<p><a href="https://github.com/liyu001989/dingo-api-wiki-zh/blob/master/Responses.md" target="_blank" rel="noopener">更多看这里……..</a></p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$cat = Category::where([[<span class="string">'parent_id'</span>, $cid], [<span class="string">'is_show'</span>, <span class="number">1</span>]])-&gt;select(<span class="string">'cat_id'</span>, <span class="string">'cat_name'</span>, <span class="string">'parent_id'</span>, <span class="string">'style'</span>)-&gt;orderBy(<span class="string">'sort_order'</span>)-&gt;get();</span><br><span class="line"><span class="comment">//用dingo的response就是省了加json头这个步骤了</span></span><br><span class="line"><span class="comment">//看来不仅如此啊 加上返回的是一个数组 data[&#123;取出的数据&#125;] 如果不用就返回&#123;取出的数据&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response-&gt;collection($cat, <span class="keyword">new</span> CategoryTransformer());</span><br></pre></td></tr></table></figure>
<p><strong>方法二</strong><br>直接用array开发是更快一些,因为不用去建立文件.<br>这里是利用的Dingo的reponse并不是laravel的,所以要看清</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里返回一定要是toArray()</span></span><br><span class="line">$wallet = ECUser::where(<span class="string">'user_id'</span>,$id)-&gt;select(<span class="string">'user_money'</span>,<span class="string">'pay_points'</span>)-&gt;first()-&gt;toArray();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response-&gt;array($wallet);</span><br></pre></td></tr></table></figure>
<p><strong>方法三</strong><br>完全用laravel来返回 json, 不用插件来做.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$wallet = ECUser::where(<span class="string">'user_id'</span>,$id)-&gt;select(<span class="string">'user_money'</span>,<span class="string">'pay_points'</span>)-&gt;first()-&gt;toArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面那个用的是dingo的response和下面这个不一样,下面的是laravel的</span></span><br><span class="line"><span class="comment">//这两个是有区别的 dingo的只有array()没有json, laravel的正好相反,有json()没有array() 但他们的结果是一样的</span></span><br><span class="line"><span class="keyword">return</span> response()-&gt;json($wallet);</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> dingo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dingo Transformers 的使用(Fractal)]]></title>
      <url>http://elickzhao.github.io/2016/12/Dingo%20Transformers%20%E7%9A%84%E4%BD%BF%E7%94%A8(Fractal)/</url>
      <content type="html"><![CDATA[<p><strong>Post</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">($postId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $post = <span class="keyword">$this</span>-&gt;postRepository-&gt;find($postId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! $post) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response-&gt;errorNotFound();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 研究一下cursor，这里应该无限下拉</span></span><br><span class="line">    $comments = <span class="keyword">$this</span>-&gt;postCommentRepository</span><br><span class="line">        -&gt;where([<span class="string">'post_id'</span> =&gt; $postId])</span><br><span class="line">        -&gt;paginate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response-&gt;paginator($comments, <span class="keyword">new</span> PostCommentTransformer());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里主要需要说明的是, include的用法. include 的作用是,把附加信息带上.<br>比如你要查询post的评论.你只需要 <code>http://jwt.cc/api/posts?include=user</code> 带上个参数就可以了.<br>而不需要多加个路由. 这个参数不是随便起的,必须先定义.<br>这个方便是方便,不过还是有点疑问.就是缓存需要怎么做呢.所以这次追求速度就把这个方法舍弃了<br>还有就是带参数那个不知道怎么请求 <code>public function includeComments(Post $post, ParamBag $params = null)</code></p>
</blockquote>
<hr>
<p><strong>补充:</strong><br>最近又看了一遍,又有了更全面的认识.他这里做到的表关联,其实还是用的laravel表关联. <code>$post-&gt;user</code>其实就是表关联方法,就在model里.<br>经过测试 include 必须是关联表,因为我用 return 返回原表数据格式报错了.<br>看来一个表只能一种转换格式,不能有多个格式,这是问题啊.比如我一个页面有图片字段,另一个页面没有.<br>就不能通过多个格式返回来操作,只能是舍弃多的那个字段,不过要是区别很大的话就还是比较麻烦.</p>
<p><strong>PostTransformers</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ApiDemo</span>\<span class="title">Transformers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">ApiDemo</span>\<span class="title">Models</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">League</span>\<span class="title">Fractal</span>\<span class="title">TransformerAbstract</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTransformer</span> <span class="keyword">extends</span> <span class="title">TransformerAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里定义 include</span></span><br><span class="line">    <span class="keyword">protected</span> $availableIncludes = [<span class="string">'user'</span>, <span class="string">'comments'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transform</span><span class="params">(Post $post)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $post-&gt;attributesToArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    <span class="comment">//http://jwt.cc/api/posts?include=user</span></span><br><span class="line">    <span class="comment">//返回结果,就是把user信息添加到结果里了</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//    "data": [</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//    "id": 1,</span></span><br><span class="line"><span class="comment">//    "user_id": 1,</span></span><br><span class="line"><span class="comment">//    "title": "测试个标题",</span></span><br><span class="line"><span class="comment">//    "content": "简单内容测试",</span></span><br><span class="line"><span class="comment">//    "created_at": "2016-10-20 08:57:09",</span></span><br><span class="line"><span class="comment">//    "user": &#123;</span></span><br><span class="line"><span class="comment">//    "data": &#123;</span></span><br><span class="line"><span class="comment">//    "id": 1,</span></span><br><span class="line"><span class="comment">//    "email": "xwiwi@tom.com",</span></span><br><span class="line"><span class="comment">//    "name": "elick",</span></span><br><span class="line"><span class="comment">//    "avatar": null,</span></span><br><span class="line"><span class="comment">//    "created_at": "2016-10-20 08:48:10",</span></span><br><span class="line"><span class="comment">//    "updated_at": "2016-10-20 08:48:10",</span></span><br><span class="line"><span class="comment">//    "deleted_at": null</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    &#125;, ......</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">includeUser</span><span class="params">(Post $post)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这句就是model实例,其中的user方法. 看下面post的model</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;item($post-&gt;user, <span class="keyword">new</span> UserTransformer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数这个还不不对,如何用url传参还没弄明白</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">includeComments</span><span class="params">(Post $post, ParamBag $params = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $limit = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> ($params) &#123;</span><br><span class="line">            $limit = (<span class="keyword">array</span>) $params-&gt;get(<span class="string">'limit'</span>);</span><br><span class="line">            $limit = (int) current($limit);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $comments = $post-&gt;comments()-&gt;limit($limit)-&gt;get();</span><br><span class="line">        $total = $post-&gt;comments()-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;collection($comments, <span class="keyword">new</span> PostCommentTransformer())-&gt;setMeta([<span class="string">'total'</span> =&gt; $total]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Post</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ApiDemo</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">SoftDeletes</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">BaseModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SoftDeletes</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $casts = [<span class="string">'extra'</span> =&gt; <span class="string">'array'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'ApiDemo\Models\User'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'ApiDemo\Models\PostComment'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://fractal.thephpleague.com/transformers/" target="_blank" rel="noopener">官方文档</a><br><a href="https://github.com/dingo/api/wiki/Transformers" target="_blank" rel="noopener">Github说明</a></p>
]]></content>
      
        
        <tags>
            
            <tag> laravel dingo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue2 组件传递数据 props一些小改变]]></title>
      <url>http://elickzhao.github.io/2016/12/vue2%20%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%20props%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%94%B9%E5%8F%98/</url>
      <content type="html"><![CDATA[<p>vue 和 vue2 在 props 使用上面有些不同,在 vue2 里,模版传递过去的值,必须在 html 标签里,否则不显示.<br>而vue使用时没有这个限制.还有就是 <code>&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;</code> 必须用双引号,单引号可能会出现问题.<br>再有就是 这个表示的是传递一个字符串,如果要传vue内data数据,必须绑定 <code>&lt;pic-list v-bind:items=&quot;items&quot;&gt;&lt;/pic-list&gt;</code>,这样才可以传递其他类型的数据.</p>
<p><strong>例子</strong></p>
<iframe width="100%" height="380" src="http://code.hcharts.cn/test123/FNE0Wo/share/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cooking 简介 安装与使用]]></title>
      <url>http://elickzhao.github.io/2016/12/cooking%20%E7%AE%80%E4%BB%8B%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>cooking 更易上手的前端构建工具</p>
</blockquote>
<p>cooking可以简单的配置一个webpace,而且中文文档很详细,的确是比配置webpace更简单.<br>呵呵,接触构建工具比较晚. 发现一个比一个容易,gulp,webpace,cooking.新东西就是好啊.</p>
<hr>
<h2 id="简单安装"><a href="#简单安装" class="headerlink" title="简单安装"></a>简单安装</h2><p><strong>首先确保是在 NPM 3+, Node 4+, Python 2.7+ 环境下运行</strong></p>
<p>第一步：安装 cooking 命令行工具</p>
<blockquote>
<p>npm i cooking-cli -g</p>
</blockquote>
<p>第二步：使用创建项目</p>
<blockquote>
<p>cooking create my-project vue</p>
</blockquote>
<p>第三步：开始开发</p>
<blockquote>
<p>cd my-project &amp;&amp; cooking watch</p>
</blockquote>
<p>后续：打包、测试等</p>
<blockquote>
<p>cooking build # or cooking run test</p>
</blockquote>
<p><code>cooking-clig 升级后真是好多了,不仅配置简单了,而且你缺什么都会有提示,所以按着提示走,很快就能建立个项目</code></p>
<p><a href="https://cookingjs.github.io/zh-cn/intro.html" target="_blank" rel="noopener">官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/22387692" target="_blank" rel="noopener">用 cooking 搭建一个简单又优雅的 Vue 项目开发环境 (入门篇)</a><br><a href="https://github.com/ElemeFE/cooking/blob/master/README_zh-cn.md" target="_blank" rel="noopener">Github仓库</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue + webpack 学习简介]]></title>
      <url>http://elickzhao.github.io/2016/12/vue%20+%20webpack%20%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h2 id="一些经验"><a href="#一些经验" class="headerlink" title="一些经验"></a>一些经验</h2><p><strong>自动刷新问题:</strong><br>用 <strong>vue-cli</strong> 建立的vue项目,配合 webpack 测试时, webpack 可以自动更新浏览器输出结果,但是 vue.js 的数据修改,是不会显示在浏览器中的,必须手动刷新才行.<br>比如下面例子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;  hi 你好<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 在这里修改就会立马显示  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// note: changing this line won't causes changes</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// with hot-reload because the reloaded component</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// preserves its current state and we are modifying</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// its initial state.</span></span></span><br><span class="line"><span class="javascript">      msg: <span class="string">'Hello World! hi 你好'</span> <span class="comment">//修改这里浏览器不会自动刷新</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://www.open-open.com/lib/view/open1435200052247.html" target="_blank" rel="noopener">Vue.js + webpack 项目实践</a><br><a href="http://www.w2bc.com/article/159036" target="_blank" rel="noopener">Vue.js——60分钟webpack项目模板快速入门</a><br><a href="http://www.w2bc.com/Article/50764" target="_blank" rel="noopener">一小时包教会 —— webpack 入门指南</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中的 ~ 运算符]]></title>
      <url>http://elickzhao.github.io/2016/12/js%E4%B8%AD%E7%9A%84%20~%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>今天遇到这个 <code>!~id.indexOf(&#39;category-detail&#39;)</code> 以前没碰到过,不是很理解.后来一查明白了,这是位移运算符.</p>
<p><strong>运算符就是完成操作的一系列符号，它有七类</strong>：<br>赋值运算符 <code>=,+=,-=,*=,/=,%=,&lt;&lt;=,&gt;&gt;=,|=,&amp;=</code>、<br>算术运算符 <code>+,-,*,/,++,--,%</code>、<br>比较运算符 <code>&gt;,&lt;,&lt;=,&gt;=,==,===,!=,!==</code>、<br>逻辑运算符 <code>||,&amp;&amp;,!</code>、<br>条件运算   <code>?:</code>、<br>位移运算符 <code>|,&amp;,&lt;&lt;,&gt;&gt;,~,^</code><br>字符串运算符 <code>+</code>。</p>
<p>看下面例子更容易理解些,就不用多解释了</p>
<iframe width="100%" height="380" src="http://code.hcharts.cn/test123/dMe0in/share/result,js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 系统下设置Nodejs NPM全局路径]]></title>
      <url>http://elickzhao.github.io/2016/12/Windows%20%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%AE%BE%E7%BD%AENodejs%20NPM%E5%85%A8%E5%B1%80%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我因为手动安装npm造成系统里存在两个npm,而nodejs自带npm全局包位置不是很喜欢,所以手动改一下.下面是文章里写的办法,我用命令可以改,不知道他为啥非得改文件.</p>
<h3 id="第二次安装"><a href="#第二次安装" class="headerlink" title="第二次安装"></a>第二次安装</h3><p>这次安装也出现了下面文章说的使用命令安装不上的问题,通过命令查看配置文件 <code>npm config ls -l</code> 原来是 <code>C:\Program Files</code> 这个空格的问题.使用命令后,用户配置文件<code>C:\Users\elick\.npmrc</code>里面记录的就是<code>C:\Program</code>没有后面的目录了.所以我直接改了用户配置文件,而没想下面文章写的改写全局配置.<br>我安装的路径<code>C:\Program Files\nodejs</code> 这个路径里<code>node_modules</code>就是放npm的默认位置,而且全局的命令也在这个目录下,所以更新npm就直接替换了.所以想来这个应该就是默认配置目录</p>
<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>查看配置命令<br><code>npm config ls -l</code></p>
<p>Windows下的Nodejs npm路径是appdata，很不爽，想改回来，但是在cmd下执行以下命令也无效</p>
<p>npm config set cache “C:\Program Files\nodejs\node_cache”</p>
<p>npm config set prefix “C:\Program Files\nodejs”</p>
<p>最后在nodejs的安装目录中找到node_modules\npm.npmrc文件</p>
<p>修改如下即可：</p>
<p>prefix = D:\nodejs\node_global<br>cache = D:\nodejs\node_global</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/picaso/p/3848209.html" target="_blank" rel="noopener">Windows 系统下设置Nodejs NPM全局路径</a></p>
]]></content>
      
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 一些经验]]></title>
      <url>http://elickzhao.github.io/2016/12/laravel%20%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>Route::auth(); 5.2新加的用于生成auth路由</p>
<p>Auth::guard($guard) 试图从本地缓存中获取保护 官方直译是这么写的 但还是不明白啥意思 而且这也是5.2新加的<br>有点懂这个guard了 主要用这个机制应对同一应用不同登录验证 比如前台用户登录和后台管理员登录 就可以放在两个表里然后配置不同的guard</p>
<p>5.2和5.1的Auth部分变化很大,两个config/auth.php配置就有很大区别</p>
<p>5.2把单独Auth/Guard 类 拆成了三个,SessionGuard和TokenGuard,GuardHelpers.<br>GuardHelpers主要是共有方法,另外两个是根据不同驱动,也就是登录信息保存方法.<br>同时也就是根据pc和移动的登录验证分成了两个类.</p>
<hr>
<pre><code>laravel是区分大小写的,即使在windows下如果url路径写错(大小写不一致),也会造成找不到页面错误
</code></pre><hr>
<p>TaskRepository 分担查询数据库内容的工作 其实放到model也可以 不过这样解耦 以后方便改吧</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RouteServiceProvider --&gt; $router-&gt;model(<span class="string">'task'</span>,<span class="string">'App\Task'</span>); <span class="comment">#路由绑定模型 还得需要前边 路由的配合</span></span><br><span class="line">Route::delete(<span class="string">'tasks/&#123;task&#125;'</span>,<span class="string">'TaskController@destroy'</span>);  <span class="comment">#再说明一次 task是指第一个参数 也就是起得名字</span></span><br><span class="line"></span><br><span class="line">AuthServiceProvider --&gt;     <span class="keyword">protected</span> $policies = [</span><br><span class="line">        <span class="string">'App\Model'</span> =&gt; <span class="string">'App\Policies\ModelPolicy'</span>,</span><br><span class="line">        <span class="string">'App\Task'</span> =&gt; <span class="string">'App\Policies\TaskPolicy'</span>,</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure>
<p>关联策略的 策略是用于检查是否有权限进行这个操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">(User $user, Task $task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $user-&gt;id === $task-&gt;user_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;authorize(&apos;destroy&apos;,$task);</span><br></pre></td></tr></table></figure>
<p>调用策略验证  同名功能 其实可以不用第一个参数</p>
<blockquote>
<p>默认策略必须在AuthServiceProvider这个支持者里进行设定才能应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Providers;</span><br><span class="line"></span><br><span class="line">use App\Post;</span><br><span class="line">use App\Policies\PostPolicy;</span><br><span class="line">use Illuminate\Contracts\Auth\Access\Gate as GateContract;</span><br><span class="line">use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;</span><br><span class="line"></span><br><span class="line">class AuthServiceProvider extends ServiceProvider</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * The policy mappings for the application.</span><br><span class="line">     *应用策略映射</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected $policies = [</span><br><span class="line">        &apos;App\Model&apos; =&gt; &apos;App\Policies\ModelPolicy&apos;,</span><br><span class="line">        //放在这里直接映射了 下面就不用在boot里挨个写了 那样太凌乱了</span><br><span class="line">        Post::class=&gt;PostPolicy::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Register any application authentication / authorization services.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Contracts\Auth\Access\Gate  $gate</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function boot(GateContract $gate)</span><br><span class="line">    &#123;</span><br><span class="line">        parent::registerPolicies($gate);</span><br><span class="line"></span><br><span class="line">        //定义权限</span><br><span class="line">        $gate-&gt;define(&apos;update-post&apos;,function($user,$post)&#123;</span><br><span class="line">           return $user-&gt;id === $post-&gt;user_id;</span><br><span class="line">        &#125;);</span><br><span class="line">        //也可以这么写</span><br><span class="line">        //$gate-&gt;define(&apos;update-post&apos;, &apos;PostPolicy@update&apos;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p><strong>如果要指定一个表seed迁移的话命令这么写</strong><br>如果是新添加的表增加内容 一定要用这个–class 要不有可能无法添加进去内容<br><code>artisan db:seed --class=RoleTableSeeder</code><br>一定要加 –class 要不无法添加的数据库内</p>
<p>工厂模式也很简单 只要在工厂文件里ModelFactory不断定义要迁移的表就可以了</p>
<p>然后在seed文件里就可以使用factory(App\Models\Role::class,10)-&gt;create();了</p>
<p><strong>Fnaker常用表</strong><br><a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener">详细地址</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;title&apos; =&gt; $faker-&gt;text(5),         //最大为5的随机字母</span><br><span class="line">&apos;content&apos; =&gt; $faker-&gt;realText(),    //默认为200的完整意义的话</span><br><span class="line">&apos;desc&apos; =&gt; $faker-&gt;realText(10),     //10就是10个字符了 很难有完整意义了</span><br><span class="line">&apos;user_id&apos; =&gt; $faker-&gt;numberBetween(1,4),    //限定最小最大值的随机数字</span><br><span class="line">&apos;status&apos; =&gt; $faker-&gt;numberBetween(0,1)</span><br><span class="line">&apos;name&apos; =&gt; $faker-&gt;country           //国家名</span><br><span class="line">&apos;name&apos; =&gt; $faker-&gt;name,             //人名</span><br><span class="line">&apos;email&apos; =&gt; $faker-&gt;email,           //电子邮件</span><br><span class="line">&apos;content&apos; =&gt; &apos;comment &apos;.$faker-&gt;randomDigitNotNull, //个位数 没有空 随机</span><br><span class="line">&apos;item_type&apos; =&gt; &apos;App\Model\\&apos;.$faker-&gt;randomElement([&apos;Post&apos;,&apos;Video&apos;]) //限定元素 随机</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-admin 启动服务器测试报错 require not define 解决]]></title>
      <url>http://elickzhao.github.io/2016/12/vue-admin%20%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%95%E6%8A%A5%E9%94%99%20require%20not%20define%20%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p>原因就是chart.js需要Chart.bundle.js支持. 不过 vue-admin 把chart.js设置成不解析依赖的了,所以就会报错.<br>这个配置就在 79 行.</p>
<p>webpace.base.conf.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> projectRoot = path.resolve(__dirname, <span class="string">'../'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    publicPath: config.build.assetsPublicPath,</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],</span><br><span class="line">    fallback: [path.join(__dirname, <span class="string">'../node_modules'</span>)],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">      <span class="string">'assets'</span>: path.resolve(__dirname, <span class="string">'../src/assets'</span>),</span><br><span class="line">      <span class="string">'components'</span>: path.resolve(__dirname, <span class="string">'../src/components'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    fallback: [path.join(__dirname, <span class="string">'../node_modules'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    preLoaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'eslint'</span>,</span><br><span class="line">        include: projectRoot,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'eslint'</span>,</span><br><span class="line">        include: projectRoot,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel'</span>,</span><br><span class="line">        include: projectRoot,</span><br><span class="line">        <span class="comment">// /node_modules\/(?!vue-bulma-.*)/</span></span><br><span class="line">        exclude: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`node_modules\\<span class="subst">$&#123;path.sep&#125;</span>\(\?\!vue-bulma-.*\)`</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">        loader: <span class="string">'json'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-html'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url'</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url'</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//忽略已知文件解析</span></span><br><span class="line">    noParse: [</span><br><span class="line">      <span class="comment">// /chart\.js/,   //我去这个真的好使了,看这个插件还是有依赖的,所以不能忽略</span></span><br><span class="line">      /handsontable\.(full\.)?js/,</span><br><span class="line">      /plotly\.js/</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  eslint: &#123;</span><br><span class="line">    formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  vue: &#123;</span><br><span class="line">    loaders: utils.cssLoaders()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://stackoverflow.com/questions/38176769/uncaught-referenceerror-require-is-not-defined-chart-js" target="_blank" rel="noopener">Uncaught ReferenceError : require is not defined - Chart.js</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 类(class)的趣味理解]]></title>
      <url>http://elickzhao.github.io/2016/12/php%20%E7%B1%BB(class)%E7%9A%84%E8%B6%A3%E5%91%B3%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="类是什么"><a href="#类是什么" class="headerlink" title="类是什么"></a>类是什么</h2><p>类是抽象的一个定义,只是定义不能用.<br><strong>class.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">//枪的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gun</span></span>&#123;</span><br><span class="line">    <span class="comment">// 弹匣不同的枪有不同弹匣和装弹数量</span></span><br><span class="line">    <span class="keyword">protected</span> $magazine =<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化弹夹,也就是给抢上弹夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__construct</span><span class="params">(int $magazine=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;magazine = $magazine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开火,单发点射.消耗弹夹子弹量.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fire</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;magazine--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMagazine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;magazine;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏开始 先买一把AWP</span></span><br><span class="line"><span class="comment">//echo 'I am AWP';  //有趣带 , 的 echo 前面不能有 echo 否则不显示</span></span><br><span class="line">$AWP = <span class="keyword">new</span> gun(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Use AWP\n"</span>,$AWP-&gt;getMagazine(),<span class="string">"\n"</span>;</span><br><span class="line">$AWP-&gt;fire();</span><br><span class="line"><span class="keyword">echo</span> $AWP-&gt;getMagazine(),<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//再买一把AK</span></span><br><span class="line">$AK47 = <span class="keyword">new</span> gun(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Use AK\n"</span>,$AK47-&gt;getMagazine(),<span class="string">"\n"</span>;</span><br><span class="line">$AK47-&gt;fire();</span><br><span class="line">$AK47-&gt;fire();</span><br><span class="line">$AK47-&gt;fire();</span><br><span class="line"><span class="keyword">echo</span> $AK47-&gt;getMagazine(),<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure></p>
<p>运行命令 <code>php class.php</code> 得输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Use AWP</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">Use AK</span><br><span class="line">30</span><br><span class="line">27</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>从上面的例子可以看出,类和类的实例是一个什么样的关系.<br>类就是一项事物的抽象总结.他是个概念,不能用于实际操作,只是定义了一类物品统一的属性与功能.<br>上面<code>枪</code>类的属性就是<code>弹夹</code>,功能就是<code>开火</code>.<br>而实例呢就是真家伙了.利用类<code>枪</code>类这个图纸,做出了<code>AWP</code>和<code>AK</code>.这两个是两个家伙,虽然有共同的属性和方法,但是他们的确是两个家伙,所以开火以后剩余的子弹数是不一样的.所以说为什么<code>类</code>是个图纸,如果两个地方用到类,属性是同一个那岂不完蛋.<br><strong>所以要记住,类是图纸,实例才是工具</strong></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个计算php页面运行时间的函数]]></title>
      <url>http://elickzhao.github.io/2016/12/%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97php%E9%A1%B5%E9%9D%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>代码片段</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ 计算php程序运行时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">microtime_float</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">list</span>($usec, $sec) = explode(” “, microtime());</span><br><span class="line"><span class="keyword">return</span> ((float)$usec + (float)$sec);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始计时，放在头部</span></span><br><span class="line">$starttime = microtime_float();</span><br><span class="line"><span class="comment">//结束计时，放在最底部</span></span><br><span class="line">$runtime = number_format((microtime_float() – $starttime), <span class="number">4</span>).<span class="string">'s'</span>;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="keyword">echo</span> ‘RunTime:<span class="string">'.$runtime;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 数据库查询优化]]></title>
      <url>http://elickzhao.github.io/2016/12/laravel%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Cache::remember 缓存结果是个不错的选择,能大大优化访问速度</span></span><br><span class="line">    $cid = <span class="string">'分类ID'</span>;</span><br><span class="line">    $cat = Cache::remember(<span class="string">'cat-'</span> . $cid, Carbon::now()-&gt;addMinutes(<span class="number">60</span>), <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($cid)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> Category::where([[<span class="string">'parent_id'</span>, $cid], [<span class="string">'is_show'</span>, <span class="number">1</span>]])</span><br><span class="line">          -&gt;select(<span class="string">'cat_id'</span>, <span class="string">'cat_name'</span>, <span class="string">'parent_id'</span>, <span class="string">'style'</span>)</span><br><span class="line">          -&gt;orderBy(<span class="string">'sort_order'</span>)</span><br><span class="line">          -&gt;get();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $allCat = Cache::remember(<span class="string">'allCat'</span>, Carbon::now()-&gt;addHour(<span class="number">3</span>), <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Category::where(<span class="string">'is_show'</span>, <span class="number">1</span>)</span><br><span class="line">            -&gt;select(<span class="string">'cat_id'</span>, <span class="string">'cat_name'</span>, <span class="string">'parent_id'</span>)</span><br><span class="line">            -&gt;orderBy(<span class="string">'sort_order'</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;toArray();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/wish123/p/5503870.html" target="_blank" rel="noopener">Laravel 5 性能优化技巧</a><br><a href="https://laravel-china.org/topics/301" target="_blank" rel="noopener">使用 OpCache 提升 PHP 5.5+ 程序性能</a><br><a href="http://www.ithao123.cn/content-960653.html" target="_blank" rel="noopener">大数据量高并发的数据库优化</a><br><a href="http://www.tuicool.com/articles/bIVBFj" target="_blank" rel="noopener">使用 Laravel 的服务容器来优化读写数据库中的 options</a><br><a href="http://blog.csdn.net/geniuslinchao/article/details/51491308" target="_blank" rel="noopener">Laravel大量数据库查询导致php进程内存耗尽</a></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginxconflicting server name  0.0.0.080, ignored]]></title>
      <url>http://elickzhao.github.io/2016/11/Nginxconflicting%20server%20name%20%200.0.0.080,%20ignored/</url>
      <content type="html"><![CDATA[<p>Nginx:conflicting server name * 0.0.0.0:80, ignored<br>在编写了nginx配置文件后，重启nginx时出现如下警告:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[jh@VM_84_179_centos conf.d]$ sudo /etc/init.d/nginx restart</span><br><span class="line">nginx: [warn] conflicting server name &quot;blog.jianghang.name&quot; on 0.0.0.0:80, ignored</span><br><span class="line">Stopping nginx:                                            [  OK  ]</span><br><span class="line">Starting nginx: nginx: [warn] conflicting server name &quot;blog.jianghang.name&quot; on 0.0.0.0:80, ignored</span><br><span class="line">                                                           [  OK  ]</span><br></pre></td></tr></table></figure></p>
<p>这一般是由于技术员的粗心造成的。原因是blog.jianghang.name这个域名出现了两次甚至多次，把同一个域名解析到了不同的目录。一般将配置文件单独分离出来容易出现这个错误。<br>接下来就是解决办法：<br>1.查询哪些文件里面包含了 blog.jianghang.name字段 。使用grep命令，该命令实例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep -r blog.jianghang.name /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure></p>
<p>参数 -r 是指明确要求搜索子目录，此处的目录就是/etc/nginx/conf.d/ ，因为我知道配置文件都是在这个目录下，所以用了 -r 参数。如果不知道具体目录，可以用 * 代替，其实就是正则表达式啦。这里不细讲。<br>找到了出现 blog.jianghang.name 的文件之后，就将设置不正确的地方该正确吧。</p>
<p>记住一个域名只能有一个对应的目录，一个目录可以有多个对应的域名。</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 修改用户验证为MD5加密方式]]></title>
      <url>http://elickzhao.github.io/2016/11/laravel%20%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E9%AA%8C%E8%AF%81%E4%B8%BAMD5%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>真是被这个搞的头都大了.绕来绕去的,到现在AUTH和GUARD倒地是如何分工的,还是不太明白.算了先说怎么弄的吧.</p>
</blockquote>
<h2 id="解决方案一-简单粗暴"><a href="#解决方案一-简单粗暴" class="headerlink" title="解决方案一 简单粗暴"></a>解决方案一 简单粗暴</h2><p>现在用的就是这个方法,也是很多无奈.因为用的JWT插件,一改的话得改很多,而且怎么都得动源代码,不是laravel就是JWT的 所以索性就最简单粗暴吧</p>
<p>Illuminate\Auth\EloquentUserProvider<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 114行左右</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Validate a user against the given credentials.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Illuminate\Contracts\Auth\Authenticatable  $user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array  $credentials</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateCredentials</span><span class="params">(UserContract $user, array $credentials)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $plain = $credentials[<span class="string">'password'</span>];</span><br><span class="line">    <span class="comment">//XXX 自己修改的 md5验证, 这是最快捷的方式,虽然存在隐患,以后再解决吧</span></span><br><span class="line">    <span class="keyword">return</span> md5($plain) == $user-&gt;getAuthPassword();</span><br><span class="line">    <span class="comment">//return $this-&gt;hasher-&gt;check($plain, $user-&gt;getAuthPassword());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="解决方案二-看似高大上"><a href="#解决方案二-看似高大上" class="headerlink" title="解决方案二 看似高大上"></a>解决方案二 看似高大上</h2><p>第二种方法就是实现 <strong>Hasher</strong> 接口,然后替换掉原来的 <strong>BcryptHasher</strong> 这个类,用自己的加密解密方式.<br>这个方法的好处是哪天又要改回来很简单.<br>但有个问题,这TMD不是还是得该源代码,那天要升级 <strong>lumen</strong> 还是有问题,靠.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Hashing</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hasher</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($value, array $options = [])</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($value, $hashedValue, array $options = [])</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">needsRehash</span><span class="params">($hashedValue, array $options = [])</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现这个接口很简单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateCredentials</span><span class="params">(UserContract $user, array $credentials)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $plain = $credentials[<span class="string">'password'</span>];</span><br><span class="line">        <span class="comment">//return md5($plain) == $user-&gt;getAuthPassword();</span></span><br><span class="line">        <span class="comment">//这里的 hasher 的就行了. 不过还是得改代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasher-&gt;check($plain, $user-&gt;getAuthPassword());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决方案三-完美解决-可惜我这次用不上"><a href="#解决方案三-完美解决-可惜我这次用不上" class="headerlink" title="解决方案三 完美解决 可惜我这次用不上"></a>解决方案三 完美解决 可惜我这次用不上</h2><p>这个方法是自己写个服务提供者,继承于 <strong>EloquentUserProvider</strong> 然后修改 <strong>validateCredentials</strong> 方法,这样即使升级也不怕了.完美!<br>但是我用不了,靠.现在这个系统是结合了 <strong>dingo</strong> 和 <strong>jwt</strong>. 这个验证已经扩展了 <strong>jwt</strong> 已经没法再扩展了. 而且要改会改很多地方.唉….</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">EloquentUserProvider</span> <span class="title">as</span> <span class="title">BaseEloquentUserProvider</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EloquentUserProvider</span> <span class="keyword">extends</span> <span class="title">BaseEloquentUserProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($model)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = $model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateCredentials</span><span class="params">(Authenticatable $user, array $credentials)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $plain = $credentials[<span class="string">'password'</span>];</span><br><span class="line">        $authPassword = $user-&gt;getAuthPassword();</span><br><span class="line">        <span class="keyword">return</span> $authPassword == md5($plain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册自定义登录验证方式</span></span><br><span class="line"><span class="comment">//这段代码放在 AuthServiceProvider 的 boot 里,或者 lumen 的 app.php 里</span></span><br><span class="line"></span><br><span class="line">Auth::extend(<span class="string">'custom'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> EloquentUserProvider(<span class="string">'User'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//然后修改guard就好了</span></span><br><span class="line"><span class="comment">// config/auth.php</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'guards'</span> =&gt; [</span><br><span class="line">        <span class="string">'api'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'custom'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>真心被这个 Dingo 和 JWT 搞懵了, 有很多乱码七糟的配置不知道是干什么的.跳来跳去的,太复杂了.<br>下面这个就是, 看似是扩展驱动 jwt 但实际并不是. 扩展驱动,是在 <strong>Tymon\JWTAuth\Providers\LumenServiceProvider</strong> 这个里, 在注册的时候,同时自己注册了很多东西,其中就包括 <strong>guard</strong> 的扩展驱动.</p>
<p>至于下面那个 <strong>Dingo\Api\Auth\Auth</strong> 干什么用的,还是没搞懂.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jwt   //这里是注册guards &gt; api &gt; driver 下面那个并不是 有点晕.  在 AbstractServiceProvider 73行</span></span><br><span class="line">$app-&gt;register(Tymon\JWTAuth\Providers\LumenServiceProvider::class);</span><br><span class="line"><span class="comment">// email 或者放在 provider里面</span></span><br><span class="line">$app-&gt;register(Illuminate\Mail\MailServiceProvider::class);</span><br><span class="line"></span><br><span class="line">app(<span class="string">'Dingo\Api\Auth\Auth'</span>)-&gt;extend(<span class="string">'jwt'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Auth\Provider\JWT($app[<span class="string">'Tymon\JWTAuth\JWTAuth'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>最倒霉的是,做这个时候安装了一个 <strong>debugbar</strong>, 结果不报错 不显示.. 晕死了….</p>
<p>这次一点心得就是,看来md5加密被抛弃了,现在用的是下面这个很简单,而且好像也很强壮<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//要加密的密码</span></span><br><span class="line">$passwod = <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line">password_hash($passwod, PASSWORD_DEFAULT);</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">password_verify($password, $hash)   <span class="comment">// $hash 是加密后的字符串</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://laravel-china.org/topics/651" target="_blank" rel="noopener">请问 Laravel 5 如何更改密码为 md5 加密方式？</a><br><a href="http://www.jianshu.com/p/450f6a277883" target="_blank" rel="noopener">Laravel5.1自带认证系统（Auth）改变加密方式带来的思考</a><br><a href="https://segmentfault.com/a/1190000003024932" target="_blank" rel="noopener">PHP处理密码的几种方式</a><br><a href="https://laravel-china.org/docs/5.2/authentication" target="_blank" rel="noopener">laravel 用户认证</a></p>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dingo和jwt插件使用及中间件问题]]></title>
      <url>http://elickzhao.github.io/2016/11/dingo%E5%92%8Cjwt%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在使用的时候,对一个中间件找不到位置.头疼不已,经过一顿寻找终于搞明白了,这里记录下,因为虽然注释了,不过几天后又蒙圈了.前后台一起搞真是玩自己啊.</p>
<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//routes</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里用的中间件 并不是app.php里注册的那个 'auth' =&gt; App\Http\Middleware\Authenticate::class,</span></span><br><span class="line">    <span class="comment">// 而是dinggo的api里的middleware就是Auth. 如果用app.php那个会无法验证过期的.</span></span><br><span class="line">    <span class="comment">// 这个注册和jwt一样 都是在 LumenServiceProvider 里完成的 所以不注意会找不到</span></span><br><span class="line">    $api-&gt;group([<span class="string">'middleware'</span> =&gt; <span class="string">'api.auth'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($api)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// USER</span></span><br><span class="line">        <span class="comment">// my detail</span></span><br><span class="line">        $api-&gt;get(<span class="string">'user'</span>, [</span><br><span class="line">            <span class="string">'as'</span> =&gt; <span class="string">'user.show'</span>,</span><br><span class="line">            <span class="string">'uses'</span> =&gt; <span class="string">'UserController@userShow'</span>,</span><br><span class="line">        ]);</span><br><span class="line">    .......</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//app</span></span><br><span class="line"></span><br><span class="line">    $app-&gt;routeMiddleware([</span><br><span class="line">        <span class="string">'auth'</span> =&gt; App\Http\Middleware\Authenticate::class,</span><br><span class="line">        <span class="string">'cors'</span> =&gt; App\Http\Middleware\Cors::class,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dingo\Api\Provider\LumenServiceProvider</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">$this</span>-&gt;app-&gt;routeMiddleware([</span><br><span class="line">        <span class="string">'api.auth'</span> =&gt; Auth::class,</span><br><span class="line">        <span class="string">'api.throttle'</span> =&gt; RateLimit::class,</span><br><span class="line">        <span class="string">'api.controllers'</span> =&gt; PrepareController::class,</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="一点小启示"><a href="#一点小启示" class="headerlink" title="一点小启示"></a>一点小启示</h2><p>通过dingo和jwt使用有一点小启示.就是服务提供者会在boot()里注册一些中间件或者扩展auth的guards驱动.<br>看代码吧,说也说不清,估计过几天又会看不懂的.</p>
<p>app.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dingo/api</span></span><br><span class="line">$app-&gt;register(Dingo\Api\Provider\LumenServiceProvider::class);</span><br><span class="line"><span class="comment">//jwt  </span></span><br><span class="line">$app-&gt;register(Tymon\JWTAuth\Providers\LumenServiceProvider::class);</span><br></pre></td></tr></table></figure></p>
<p>dingo/api<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Dingo\Api\Provider;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LumenServiceProvider</span> <span class="keyword">extends</span> <span class="title">DingoServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Boot the service provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::boot();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;configure(<span class="string">'api'</span>);</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">        <span class="comment">// 这里就是注册了中间件.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;routeMiddleware([</span><br><span class="line">            <span class="string">'api.auth'</span> =&gt; Auth::class,</span><br><span class="line">            <span class="string">'api.throttle'</span> =&gt; RateLimit::class,</span><br><span class="line">            <span class="string">'api.controllers'</span> =&gt; PrepareController::class,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>jwt<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LumenServiceProvider</span> <span class="keyword">extends</span> <span class="title">AbstractServiceProvider</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主要看 AbstractServiceProvider</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 73行 这里就是扩展auth 这样在auth配置里就可以使用driver的jwt</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extend Laravel's Auth.</span></span><br><span class="line"><span class="comment">     * 注册扩展jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">extendAuthGuard</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app[<span class="string">'auth'</span>]-&gt;extend(<span class="string">'jwt'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app, $name, array $config)</span> </span>&#123;</span><br><span class="line">            $guard = <span class="keyword">new</span> JwtGuard(</span><br><span class="line">                $app[<span class="string">'tymon.jwt'</span>],</span><br><span class="line">                $app[<span class="string">'auth'</span>]-&gt;createUserProvider($config[<span class="string">'provider'</span>]),</span><br><span class="line">                $app[<span class="string">'request'</span>]</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            $app-&gt;refresh(<span class="string">'request'</span>, $guard, <span class="string">'setRequest'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $guard;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>config/auth<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line"></span><br><span class="line">    <span class="string">'defaults'</span> =&gt; [</span><br><span class="line">        <span class="string">'guard'</span> =&gt; env(<span class="string">'AUTH_GUARD'</span>, <span class="string">'api'</span>),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">'guards'</span> =&gt; [</span><br><span class="line">        <span class="string">'api'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,  <span class="comment">//就是这个了,这就是上面注册的</span></span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSON.parse()和JSON.stringify()]]></title>
      <url>http://elickzhao.github.io/2016/11/JSON.parse()%E5%92%8CJSON.stringify()/</url>
      <content type="html"><![CDATA[<p>parse用于从一个字符串中解析出json对象,如</p>
<pre><code>var str = &apos;{&quot;name&quot;:&quot;huangxiaojian&quot;,&quot;age&quot;:&quot;23&quot;}&apos;
</code></pre><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Object</span><br><span class="line"></span><br><span class="line">age: &quot;23&quot;</span><br><span class="line">name: &quot;huangxiaojian&quot;</span><br><span class="line">__proto__: Object</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>
<hr>
<p>stringify()用于从一个对象解析出字符串，如</p>
<pre><code>var a = {a:1,b:2}
</code></pre><p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>参考文档<br><a href="http://blog.csdn.net/wangxiaohu__/article/details/7254598" target="_blank" rel="noopener">JSON.parse()和JSON.stringify()</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="noopener"> MDN JSON.parse()</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器相关技术]]></title>
      <url>http://elickzhao.github.io/2016/11/YUM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>yum是一个用于管理rpm包的后台程序，用python写成，可以非常方便的解决rpm的依赖关系。在建立好yum服务器后，yum客户端可以通过 http、ftp方式获得软件包，并使用方便的命令直接管理、更新所有的rpm包，甚至包括kernel的更新。它也可以理解为红旗环境下的apt管理工具。</p>
<p>   以前写过一份[原]使用yum更新红旗Linux ，但其中提到的命令不是很完整，现再整理一下。</p>
<p>一、列举包文件</p>
<p>列出资源库中所有可以安装或更新的rpm包</p>
<h1 id="yum-list"><a href="#yum-list" class="headerlink" title="yum list"></a>yum list</h1><p>列出资源库中特定的可以安装或更新以及已经安装的rpm包</p>
<h1 id="yum-list-perl-列出名为perl-的包"><a href="#yum-list-perl-列出名为perl-的包" class="headerlink" title="yum list perl           //列出名为perl  的包"></a>yum list perl           //列出名为perl  的包</h1><h1 id="yum-list-perl-列出perl-开头的包"><a href="#yum-list-perl-列出perl-开头的包" class="headerlink" title="yum list perl*         //列出perl 开头的包"></a>yum list perl*         //列出perl 开头的包</h1><p>列出资源库中所有可以更新的rpm包</p>
<h1 id="yum-list-updates"><a href="#yum-list-updates" class="headerlink" title="yum list updates"></a>yum list updates</h1><p>列出已经安装的所有的rpm包</p>
<h1 id="yum-list-installed"><a href="#yum-list-installed" class="headerlink" title="yum list installed"></a>yum list installed</h1><p>列出已经安装的但是不包含在资源库中的rpm包</p>
<h1 id="yum-list-extras"><a href="#yum-list-extras" class="headerlink" title="yum list extras"></a>yum list extras</h1><p>注:extras是repos.d中定义的资源列表名称</p>
<p>二、列举资源信息</p>
<p>列出资源库中所有可以安装或更新的rpm包的信息</p>
<h1 id="yum-info"><a href="#yum-info" class="headerlink" title="yum info"></a>yum info</h1><p>列出资源库中特定的可以安装或更新以及已经安装的rpm包的信息</p>
<h1 id="yum-info-perl-列出perl-包信息"><a href="#yum-info-perl-列出perl-包信息" class="headerlink" title="yum info perl           //列出perl 包信息"></a>yum info perl           //列出perl 包信息</h1><h1 id="yum-info-perl-列出perl-开头的所有包的信息"><a href="#yum-info-perl-列出perl-开头的所有包的信息" class="headerlink" title="yum info perl*         //列出perl 开头的所有包的信息"></a>yum info perl*         //列出perl 开头的所有包的信息</h1><p>列出资源库中所有可以更新的rpm包的信息</p>
<h1 id="yum-info-updates"><a href="#yum-info-updates" class="headerlink" title="yum info updates"></a>yum info updates</h1><p>列出已经安装的所有的rpm包的信息</p>
<h1 id="yum-info-installed"><a href="#yum-info-installed" class="headerlink" title="yum info installed"></a>yum info installed</h1><p>列出已经安装的但是不包含在资源库中的rpm包的信息</p>
<h1 id="yum-info-extras"><a href="#yum-info-extras" class="headerlink" title="yum info extras"></a>yum info extras</h1><p>三、搜索</p>
<p>搜索匹配特定字符的rpm包</p>
<h1 id="yum-search-perl-在包名称、包描述等中搜索"><a href="#yum-search-perl-在包名称、包描述等中搜索" class="headerlink" title="yum search perl            //在包名称、包描述等中搜索"></a>yum search perl            //在包名称、包描述等中搜索</h1><p>搜索有包含特定文件名的rpm包</p>
<h1 id="yum-provides-realplay"><a href="#yum-provides-realplay" class="headerlink" title="yum provides realplay"></a>yum provides realplay</h1><p>四、管理包</p>
<p>安装rpm包</p>
<h1 id="yum-install-perl-安装perl-包"><a href="#yum-install-perl-安装perl-包" class="headerlink" title="yum install perl     //安装perl 包"></a>yum install perl     //安装perl 包</h1><h1 id="yum-install-perl-安装perl-开头的包"><a href="#yum-install-perl-安装perl-开头的包" class="headerlink" title="yum install perl*     //安装perl 开头的包"></a>yum install perl*     //安装perl 开头的包</h1><p>删除rpm包,包括与该包有倚赖性的包</p>
<h1 id="yum-remove-perl-会删除perl-所有包"><a href="#yum-remove-perl-会删除perl-所有包" class="headerlink" title="yum remove perl            //会删除perl- 所有包"></a>yum remove perl<em>            //会删除perl-</em> 所有包</h1><p>五、更新</p>
<p>检查可更新的rpm包</p>
<h1 id="yum-check-update"><a href="#yum-check-update" class="headerlink" title="yum check-update"></a>yum check-update</h1><p>更新所有的rpm包</p>
<h1 id="yum-update"><a href="#yum-update" class="headerlink" title="yum update"></a>yum update</h1><p>更新指定的rpm包,如更新kernel和kernel source</p>
<h1 id="yum-update-kernel-kernel-source"><a href="#yum-update-kernel-kernel-source" class="headerlink" title="yum update kernel kernel-source"></a>yum update kernel kernel-source</h1><p>大规模的版本升级,与yum update不同的是,连旧的淘汰的包也升级</p>
<h1 id="yum-upgrade"><a href="#yum-upgrade" class="headerlink" title="yum upgrade"></a>yum upgrade</h1><p>六、清空缓存</p>
<p>清除暂存中rpm包文件</p>
<h1 id="yum-clean-packages"><a href="#yum-clean-packages" class="headerlink" title="yum clean packages"></a>yum clean packages</h1><p>清除暂存中rpm头文件</p>
<h1 id="yum-clearn-headers"><a href="#yum-clearn-headers" class="headerlink" title="yum clearn headers"></a>yum clearn headers</h1><p>清除暂存中旧的rpm头文件</p>
<h1 id="yum-clean-oldheaders"><a href="#yum-clean-oldheaders" class="headerlink" title="yum clean oldheaders"></a>yum clean oldheaders</h1><p>清除暂存中旧的rpm头文件和包文件</p>
<h1 id="yum-clearn"><a href="#yum-clearn" class="headerlink" title="yum clearn"></a>yum clearn</h1><p>或</p>
<h1 id="yum-clearn-all"><a href="#yum-clearn-all" class="headerlink" title="yum clearn all"></a>yum clearn all</h1><p>七、其他</p>
<p>安装Livna.org rpms GPG key</p>
<h1 id="rpm-–import-http-rpm-livna-org-RPM-LIVNA-GPG-KEY"><a href="#rpm-–import-http-rpm-livna-org-RPM-LIVNA-GPG-KEY" class="headerlink" title="rpm –import http://rpm.livna.org/RPM-LIVNA-GPG-KEY"></a>rpm –import <a href="http://rpm.livna.org/RPM-LIVNA-GPG-KEY" target="_blank" rel="noopener">http://rpm.livna.org/RPM-LIVNA-GPG-KEY</a></h1><p>检查GPG Key</p>
<h1 id="rpm-qa-gpg-pubkey"><a href="#rpm-qa-gpg-pubkey" class="headerlink" title="rpm -qa gpg-pubkey*"></a>rpm -qa gpg-pubkey*</h1><p>显示Key信息</p>
<h1 id="rpm-qi-gpg-pubkey-a109b1ec-3f6e28d5"><a href="#rpm-qi-gpg-pubkey-a109b1ec-3f6e28d5" class="headerlink" title="rpm -qi gpg-pubkey-a109b1ec-3f6e28d5"></a>rpm -qi gpg-pubkey-a109b1ec-3f6e28d5</h1><p>删除Key</p>
<h1 id="rpm-e-gpg-pubkey-a109b1ec-3f6e28d5"><a href="#rpm-e-gpg-pubkey-a109b1ec-3f6e28d5" class="headerlink" title="rpm -e gpg-pubkey-a109b1ec-3f6e28d5"></a>rpm -e gpg-pubkey-a109b1ec-3f6e28d5</h1>]]></content>
      
        <categories>
            
            <category> 服务器相关技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[css定位position学习]]></title>
      <url>http://elickzhao.github.io/2016/11/css%E5%AE%9A%E4%BD%8Dposition%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>absolute</td>
<td style="text-align:left">生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>
</tr>
<tr>
<td>relative</td>
<td style="text-align:left">生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td>
</tr>
<tr>
<td>fixed</td>
<td style="text-align:left">生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>
</tr>
<tr>
<td>static</td>
<td style="text-align:left">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>
</tr>
<tr>
<td>inherit</td>
<td style="text-align:left">规定应该从父元素继承 position 属性的值。</td>
</tr>
</tbody>
</table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><iframe width="100%" height="380" src="http://code.hcharts.cn/test123/4FS0lq/share/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><blockquote>
<p>z-index在实际使用中,也经常遇到.虽然这个理解上没有问题,不过在实际情况中往往打不到想要的效果,不知道为什么.</p>
</blockquote>
<p><strong>Z-index</strong><br><a href="http://www.w3school.com.cn/tiy/t.asp?f=csse_zindex2" target="_blank" rel="noopener">Z-index可被用于将在一个元素放置于另一元素之后。</a><br><strong>Z-index</strong><br><a href="http://www.w3school.com.cn/tiy/t.asp?f=csse_zindex1" target="_blank" rel="noopener">上面的例子中的元素已经更改了Z-index。</a></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css伪类 first-child  伪元素   before]]></title>
      <url>http://elickzhao.github.io/2016/11/css%E4%BC%AA%E7%B1%BB%20first%20child%20%20%E4%BC%AA%E5%85%83%E7%B4%A0%20%20%20before%20/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  在使用mui时,遇到 ul li 就会有下边框,可是又跟 border 没有关系, 只要去掉 position: relative 就可以了. 刚开始图省事就这么做了,可后面的问题多多.最后不得已翻看源码才知道,这个东西是拿伪类弄出来的.其实以前也见过,就是没仔细研究,这次遇到了,所以弄明白点了.</p>
<h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>先讲这两个,比较常见的.</p>
<p><strong>“:before”</strong> 伪元素可以在元素的内容前面插入新内容。<br><strong>“:after”</strong> 伪元素可以在元素的内容后面插入新内容。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面就是困扰我的那行代码,通过变形拉伸,露出页面底色,看上去就是绘制出一个横线.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.mui-table-view</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mui-table-view</span><span class="selector-pseudo">:after</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(.5);</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.5);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c8c7cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mui-table-view</span><span class="selector-pseudo">:before</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(.5);</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.5);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c8c7cc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>:first-child</strong> 伪类来选择元素的第一个子元素。<br><strong>:last-child</strong> 伪类来选择元素的最后一个子元素。<br><strong>:nth-last-child(3)</strong> 伪类来选择元素的倒数第三个子元素。</p>
<p>上面这俩很好理解,不展示例子了.关键的来了,如果又是第一个元素,又是元素之后改变如何写呢,看下面.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>导航条<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">		ul &#123;</span></span><br><span class="line"><span class="undefined">                list-style-type: none;</span></span><br><span class="line"><span class="undefined">                text-align: center;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            li &#123;</span></span><br><span class="line"><span class="undefined">                display: inline;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span><span class="selector-pseudo">:after</span> &#123;     <span class="comment">/*这里的 not 是除了最后一个以外,所有元素*/</span></span></span><br><span class="line"><span class="undefined">                content:' |';</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>One<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里是演示地址</p>
<iframe width="100%" height="380" src="http://code.hcharts.cn/test123/IHE0nk/share/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>更多的选择器,请看手册:<br><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">CSS 选择器参考手册</a><br><a href="http://www.w3school.com.cn/css/css_pseudo_classes.asp" target="_blank" rel="noopener">CSS 伪类 (Pseudo-classes)</a><br><a href="http://www.w3school.com.cn/css/css_pseudo_elements.asp" target="_blank" rel="noopener">CSS 伪元素 (Pseudo-elements)</a><br><a href="http://suanfazu.com/t/css-not-last-child-after-selector/9330" target="_blank" rel="noopener">算法组</a></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在nginx下多个php版本共存 及php7 安装及出现的问题]]></title>
      <url>http://elickzhao.github.io/2016/11/%E5%9C%A8nginx%E4%B8%8B%E5%A4%9A%E4%B8%AAphp%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98%20%E5%8F%8Aphp7%20%E5%AE%89%E8%A3%85%E5%8F%8A%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在nginx下多个php版本的时候,需要启动两个php-fpm,在配置时php7把当前服务的配置放在了<code>usr/local/etc/php-fpm.d/</code>下了,默认里面有个default,不过需要改成 <code>www.conf</code> 否则就会出现下面那个错误.</p>
<blockquote>
<p>3.WARNING: Nothing matches the include pattern ‘/usr/local/etc/php-fpm.d/*.conf’ from /usr/local/etc/php-fpm.conf at line 125.<br>ERROR:. No pool defined at least one pool section must be specified in config file<br>ERROR: failed to post process the configuration<br>ERROR: FPM initialization failed</p>
<p>solution:</p>
<p>cp www.conf.default www.conf</p>
</blockquote>
<p>php.ini需要配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#这里的.sock位置 需要 ps aux | grep -i mysql 命令查询</span><br><span class="line">pdo_mysql.default_socket=/var/lib/mysql/mysqld.sock</span><br><span class="line">mysql.default_socket =/var/lib/mysql/mysqld.sock</span><br><span class="line">mysqli.default_socket =/var/lib/mysql/mysqld.sock</span><br></pre></td></tr></table></figure></p>
<p>否则出现下面报错<br><code>SQLSTATE[HY000] [2002] No such file or directory</code></p>
<p>安装php7 主要看下面的 <code>Linux环境PHP7.0安装</code></p>
<p>编译时出现的问题,主要会报错一些插件没有安装,主要看下面的 <code>编译安装PHP 时遇到问题解决方法.</code><br>这里每次出现的报错不会相同,主要看你的linux发行版环境而定.</p>
<p><a href="http://blog.csdn.net/21aspnet/article/details/47658127" target="_blank" rel="noopener">Linux环境Nginx安装多版本PHP</a><br><a href="http://www.cnblogs.com/z-ping/archive/2012/06/18/2553929.html" target="_blank" rel="noopener">编译安装PHP 时遇到问题解决方法.</a><br><a href="http://www.admpub.com/blog/?post=169" target="_blank" rel="noopener">解决error: xslt-config not found. Please reinstall the libxslt &gt;= 1.1.0 distribution</a><br><a href="http://blog.csdn.net/21aspnet/article/details/47708763" target="_blank" rel="noopener">Linux环境PHP7.0安装</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLSTATE[HY000] [2002] No such file or directory 报错处理]]></title>
      <url>http://elickzhao.github.io/2016/11/SQLSTATE%5BHY000%5D%20%5B2002%5D%20No%20such%20file%20or%20directory%20%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在装lumen时突然出现了这个错误,主要是因为多个版本php共存,新装的php7配置php.ini时,没有把<code>*.default_socket</code>设置上而造成无法连接数据库的问题.</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li>首先说明这个是在使用nginx时,必须使用php-fpm时出现的.</li>
<li><p>现在找到 <code>socket</code> 的位置. 使用命令 <code>ps aux | grep -i mysql</code> 看到如下结果</p>
<blockquote>
<p>mysql    12388  0.0  0.2 390744 44636 pts/0    Sl   14:02   0:01 /opt/mysql/product/bin/mysqld –basedir=/opt/mysql/product –datadir=/opt/mysql/product/data –plugin-dir=/opt/mysql/product/lib/plugin –user=mysql –log-error=/opt/mysql/product/data/oracle1.err –pid-file=/opt/mysql/product/data/oracle1.pid –<strong>socket</strong>=/var/lib/mysql/mysqld.sock –port=3306  <code>这就是位置</code></p>
</blockquote>
</li>
<li><p>然后打开 <code>php.ini</code> 添加 <code>/var/lib/mysql/mysqld.sock</code> 默认为空</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// mysql.default_socket =  // php7里已经没有了这个</span><br><span class="line">pdo_mysql.default_socket=/var/lib/mysql/mysqld.sock // 默认是空的,这个就是新添加的地址</span><br><span class="line">mysqli.default_socket =/var/lib/mysql/mysqld.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后重启 <code>php-fpm</code> 就解决了.</p>
</li>
</ul>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li>php7 以后就不实用<code>mysql</code>这个驱动了 而使用<code>mysqlnd</code> 所以你在<code>phpinfo()</code>里不会再看到mysql项</li>
<li>重启<code>php-fpm</code> 需要用 <code>ps aux|grep php</code> 命令查看 <code>php-fpm</code> 的 pid,然后 <code>kill pid</code>.这里注意啊 要是多个<code>php-fpm</code>一定要看配置文件位置,不要删错了.</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.th7.cn/db/mysql/201412/83563.shtml" target="_blank" rel="noopener">YII2数据库操作出现类似Database Exception</a><br><a href="http://www.cnblogs.com/AloneSword/p/3188012.html" target="_blank" rel="noopener">安装roundcube 时出现 “DSN (write): NOT OK(SQLSTATE[HY000] [2002] No such file or directory)”</a><br><a href="https://segmentfault.com/q/1010000004241965" target="_blank" rel="noopener">php7不支持mysql扩展，如何使用mysqlnd?</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome 控制台console的用法]]></title>
      <url>http://elickzhao.github.io/2016/11/Chrome%20%E6%8E%A7%E5%88%B6%E5%8F%B0console%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>大家都有用过各种类型的浏览器，每种浏览器都有自己的特色，本人拙见，在我用过的浏览器当中，我是最喜欢Chrome的，因为它对于调试脚本及前端设计调试都有它比其它浏览器有过之而无不及的地方。可能大家对console.log会有一定的了解，心里难免会想调试的时候用alert不就行了，干嘛还要用console.log这么一长串的字符串来替代alert输出信息呢，下面我就介绍一些调试的入门技巧，让你爱上console.log</p>
<p>先的简单介绍一下chrome的控制台，打开chrome浏览器，按f12就可以轻松的打开控制台<br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t5dsyh4j211y0k6q7k.jpg" alt=""></p>
<a id="more"></a>
<p>大家可以看到控制台里面有一首诗还有其它信息，如果想清空控制台，可以点击左上角那个<img src="http://images.cnitblog.com/blog/457824/201411/230851146562060.png" alt="">来清空，当然也可以通过在控制台输入console.clear()来实现清空控制台信息。如下图所示<br><img src="http://ww4.sinaimg.cn/mw690/6941baebjw1eo6t5c40imj20il04jgm4.jpg" alt=""></p>
<p>现在假设一个场景，如果一个数组里面有成百上千的元素，但是你想知道每个元素具体的值，这时候想想如果你用alert那将是多惨的一件事情，因为alert阻断线程运行，你不点击alert框的确定按钮下一个alert就不会出现。</p>
<p>下面我们用console.log来替换，感受一下它的魅力。<br><img src="http://ww3.sinaimg.cn/mw690/6941baebjw1eo6t5bd0ymj20o905jabn.jpg" alt=""></p>
<p>看了上面这张图，是不是认识到log的强大之处了，下面我们来看看console里面具体提供了哪些方法可以供我们平时调试时使用。<br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t5ae765j20ea0cimz7.jpg" alt=""></p>
<p>目前控制台方法和属性有：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"$$"</span>, <span class="string">"$x"</span>, <span class="string">"dir"</span>, <span class="string">"dirxml"</span>, <span class="string">"keys"</span>, <span class="string">"values"</span>, <span class="string">"profile"</span>, <span class="string">"profileEnd"</span>, <span class="string">"monitorEvents"</span>, <span class="string">"unmonitorEvents"</span>, <span class="string">"inspect"</span>, <span class="string">"copy"</span>, <span class="string">"clear"</span>, <span class="string">"getEventListeners"</span>, <span class="string">"undebug"</span>, <span class="string">"monitor"</span>, <span class="string">"unmonitor"</span>, <span class="string">"table"</span>, <span class="string">"$0"</span>, <span class="string">"$1"</span>, <span class="string">"$2"</span>, <span class="string">"$3"</span>, <span class="string">"$4"</span>, <span class="string">"$_"</span>]</span><br></pre></td></tr></table></figure></p>
<p>下面我们来一一介绍一下各个方法主要的用途。</p>
<p>一般情况下我们用来输入信息的方法主要是用到如下四个</p>
<ol>
<li><p><strong>console.log</strong> 用于输出普通信息</p>
</li>
<li><p><strong>console.info</strong> 用于输出提示性信息</p>
</li>
<li><p><strong>console.error</strong>用于输出错误信息</p>
</li>
<li><p><strong>console.warn</strong>用于输出警示信息</p>
</li>
<li><p><strong>console.debug</strong>用于输出调试信息</p>
</li>
</ol>
<p>用图来说话<br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t59n8uej209w03mdfx.jpg" alt=""></p>
<p>console对象的上面5种方法，都可以使用printf风格的占位符。不过，占位符的种类比较少，<strong>只支持字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）</strong>四种。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%d年%d月%d日"</span>,<span class="number">2011</span>,<span class="number">3</span>,<span class="number">26</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"圆周率是%f"</span>,<span class="number">3.1415926</span>);</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t58xe0jj20f9037aao.jpg" alt=""></p>
<p><strong>%o</strong>占位符，可以用来查看一个对象内部情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dog = &#123;&#125;;</span><br><span class="line">dog.name = <span class="string">"大毛"</span>;</span><br><span class="line">dog.color = <span class="string">"黄色"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%o"</span>, dog);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://ww4.sinaimg.cn/mw690/6941baebjw1eo6tbbgxqfj2095043jrr.jpg" alt=""></p>
<ol>
<li><strong>console.dirxml</strong>用来显示网页的某个节点（node）所包含的html/xml代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table id=<span class="string">"mytable"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;A&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;A&lt;/</span>td&gt;</span><br><span class="line">            &lt;td&gt;A&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;bbb&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;aaa&lt;/</span>td&gt;</span><br><span class="line">            &lt;td&gt;ccc&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;<span class="number">111</span>&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;333&lt;/</span>td&gt;</span><br><span class="line">            &lt;td&gt;<span class="number">222</span>&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">    &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> mytable = <span class="built_in">document</span>.getElementById(<span class="string">'mytable'</span>);</span><br><span class="line">        <span class="built_in">console</span>.dirxml(mytable);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://ww2.sinaimg.cn/mw690/6941baebjw1eo6tc9egt1j209807kq3e.jpg" alt=""></p>
<ol>
<li><p><strong>console.group</strong> 输出一组信息的开头</p>
</li>
<li><p><strong>console.groupEnd</strong> 结束一组输出信息</p>
</li>
</ol>
<p>看你需求选择不同的输出方法来使用，如果上述四个方法再配合group和groupEnd方法来一起使用就可以输入各种各样的不同形式的输出信息。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/6941baebjw1eo6tdedmvnj20ec04iq38.jpg" alt=""></p>
<p>哈哈，是不是觉得很神奇呀！</p>
<ol>
<li><strong>console.assert</strong> 对输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台<br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t587ydgj20gx03ddgg.jpg" alt=""></li>
</ol>
<ol>
<li><strong>console.count</strong>（这个方法非常实用哦）当你想统计代码被执行的次数<br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t57cdldj20e306c75a.jpg" alt=""></li>
</ol>
<ol>
<li><strong>console.dir</strong> (这个方法是我经常使用的 可不知道比for in方便了多少) 直接将该DOM结点以DOM树的结构进行输出，可以详细查对象的方法发展等等<br><img src="http://ww4.sinaimg.cn/mw690/6941baebjw1eo6t56i2p8j20ew0avab2.jpg" alt=""></li>
</ol>
<ol>
<li><p><strong>console.time</strong> 计时开始</p>
</li>
<li><p><strong>console.timeEnd</strong>  计时结束（看了下面的图你瞬间就感受到它的厉害了）<br><img src="http://ww4.sinaimg.cn/mw690/6941baebjw1eo6t55rxtej20e808ndhq.jpg" alt=""></p>
</li>
<li><p><strong>console.profile</strong>和<strong>console.profileEnd</strong>配合一起使用来查看CPU使用相关信息<br><img src="http://ww3.sinaimg.cn/mw690/6941baebjw1eo6t54ndn6j20e906b0tr.jpg" alt=""></p>
</li>
</ol>
<p>在Profiles面板里面查看就可以看到cpu相关使用信息<br><img src="http://ww4.sinaimg.cn/mw690/6941baebjw1eo6t53grshj20iw05vab0.jpg" alt=""></p>
<ol>
<li><p><strong>console.timeLine</strong>和<strong>console.timeLineEnd</strong>配合一起记录一段时间轴</p>
</li>
<li><p><strong>console.trace</strong>  堆栈跟踪相关的调试</p>
</li>
</ol>
<p>上述方法只是我个人理解罢了。如果想查看具体API，可以上官方看看，具体地址为：<a href="https://developer.chrome.com/devtools/docs/console-api" target="_blank" rel="noopener">https://developer.chrome.com/devtools/docs/console-api</a></p>
<p>下面介绍一下控制台的一些快捷键</p>
<ol>
<li><p><strong>方向键盘的上下键</strong>，大家一用就知晓。比如用上键就相当于使用上次在控制台的输入符号</p>
</li>
<li><p><strong>$_</strong>命令返回最近一次表达式执行的结果，功能跟按向上的方向键再回车是一样的<br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t52eylvj20f604sdg3.jpg" alt=""></p>
</li>
</ol>
<p>上面的$_需要领悟其奥义才能使用得当，而$0~$4则代表了最近5个你选择过的DOM节点。</p>
<p>什么意思？在页面右击选择审查元素，然后在弹出来的DOM结点树上面随便点选，这些被点过的节点会被记录下来，而$0会返回最近一次点选的DOM结点，以此类推，$1返回的是上上次点选的DOM节点，最多保存了5个，如果不够5个，则返回undefined。<br><img src="http://ww1.sinaimg.cn/large/6941baebjw1eo6t51jeohg20n80cntdf.gif" alt=""></p>
<ol>
<li><strong>Chrome 控制台中原生支持类jQuery的选择器</strong>也就是说你可以用$加上熟悉的css选择器来选择DOM节点<br><img src="http://ww2.sinaimg.cn/mw690/6941baebjw1eo6t4zmpnyj20zo0bojvq.jpg" alt=""></li>
</ol>
<ol>
<li><strong>copy</strong>通过此命令可以将在控制台获取到的内容复制到剪贴板<br><img src="http://ww3.sinaimg.cn/mw690/6941baebjw1eo6t4y2o5uj20fi03f3ys.jpg" alt=""></li>
</ol>
<p>（哈哈 刚刚从控制台复制的body里面的html可以任意粘贴到哪 比如记事本  是不是觉得功能很强大）</p>
<ol>
<li><strong>keys和values</strong> 前者返回传入对象所有属性名组成的数据，后者返回所有属性值组成的数组<br><img src="http://ww2.sinaimg.cn/mw690/6941baebjw1eo6t4wuki6j20du05umxv.jpg" alt=""></li>
</ol>
<p>说到这，不免想起console.table方法了<br><img src="http://ww2.sinaimg.cn/mw690/6941baebjw1eo6t4vy093j210y0gzgnj.jpg" alt=""></p>
<ol>
<li><strong>monitor &amp; unmonitor</strong></li>
</ol>
<p>monitor(function)，它接收一个函数名作为参数，比如function a,每次a被执行了，都会在控制台输出一条信息，里面包含了函数的名称a及执行时所传入的参数。<br>而unmonitor(function)便是用来停止这一监听。<br><img src="http://ww4.sinaimg.cn/mw690/6941baebjw1eo6t4uttxoj20f405c74y.jpg" alt=""></p>
<p>看了这张图，应该明白了，也就是说在monitor和unmonitor中间的代码，执行的时候会在控制台输出一条信息，里面包含了函数的名称a及执行时所传入的参数。当解除监视（也就是执行unmonitor时）就不再在控制台输出信息了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment">// 简单理解就是 document.querySelector 而已。</span></span><br><span class="line">$$ <span class="comment">// 简单理解就是 document.querySelectorAll 而已。</span></span><br><span class="line">$_ <span class="comment">// 是上一个表达式的值</span></span><br><span class="line">$<span class="number">0</span>-$<span class="number">4</span> <span class="comment">// 是最近5个Elements面板选中的DOM元素，待会会讲。</span></span><br><span class="line">dir <span class="comment">// 其实就是 console.dir</span></span><br><span class="line">keys <span class="comment">// 取对象的键名, 返回键名组成的数组</span></span><br><span class="line">values <span class="comment">// 去对象的值, 返回值组成的数组</span></span><br></pre></td></tr></table></figure></p>
<p>下面看一下console.log的一些技巧</p>
<p><strong>1、重写console.log 改变输出文字的样式</strong><br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t4txwawj20nt06xjtd.jpg" alt=""></p>
<p><strong>2、利用控制台输出图片</strong><br><img src="http://ww4.sinaimg.cn/large/6941baebjw1eo6t4tc4szg20mc080758.gif" alt=""></p>
<p><strong>3、指定输出文字的样式</strong><br><img src="http://ww3.sinaimg.cn/mw690/6941baebjw1eo6t4s44kvj210b04zq56.jpg" alt=""></p>
<p>最后说一下chrome控制台一个简单的操作，如何查看页面元素，看下图就知道了<br><img src="http://ww1.sinaimg.cn/mw690/6941baebjw1eo6t4r4nc2j20os0amwh5.jpg" alt=""></p>
<p>你在控制台简单操作一遍就知道了，是不是觉得很简单！</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[winSCP 不允许拖拽问题]]></title>
      <url>http://elickzhao.github.io/2016/11/winSCP%20%E4%B8%8D%E5%85%81%E8%AE%B8%E6%8B%96%E6%8B%BD%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这个问题是因为windows上没有Shell扩展.解决办法是通过临时文件,再复制到目标文件夹内.</p>
<p>在winSCP里的 <code>选项-&gt;选项</code> 打开选项界面. 找到 <code>拖拽</code> 这个选项菜单,进行修改就ok了.</p>
<p><img src="/image/16-11/1.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手机APP页面开发框架]]></title>
      <url>http://elickzhao.github.io/2016/10/%E6%89%8B%E6%9C%BAAPP%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  这里只总结了一些只针对APP页面开发的框架.像妹子UI,ZUI,semantic-ui等一些既能开发pc端页面,也能开发APP页面的框架,就不在这里记录了. 可以看这里 <a href="https://www.zybuluo.com/mdeditor#436892" target="_blank" rel="noopener">不错的前台框架 总结 Semantic UI,slicy,Amaze ui 等等</a></p>
<h2 id="总结介绍"><a href="#总结介绍" class="headerlink" title="总结介绍"></a>总结介绍</h2><p><strong>MUI:</strong> 这是个新的UI,应该是国产的.而且还有一整套解决方案.而且有个不错的IDE,所以这个以后可以试试.后台用的是自己的 HTML5+替代手机浏览器内核也就是增强版,Native.js为调用手机硬件的js插件</p>
<blockquote>
<p>参考文档<br><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">MUI网站</a><br><a href="http://www.dcloud.io/index.html" target="_blank" rel="noopener">官方主网站</a></p>
</blockquote>
<p><strong>Ionic:</strong>  这个不光是个UI库 他和 AngularJS 结合特别深.所以可以算是一套APP解决方案.其他的 UI框架都必须用jquery,Zepto.js,React 等js框架才能使用.</p>
<blockquote>
<p>参考文档<br><a href="http://www.ionic.wang/" target="_blank" rel="noopener">官方网站</a><br><a href="http://blog.csdn.net/i348018533/article/details/47258449/" target="_blank" rel="noopener"> Ionic开发实战</a><br><a href="http://www.runoob.com/ionic/ionic-install.html" target="_blank" rel="noopener">ionic 安装 | 菜鸟教程</a></p>
</blockquote>
<p><strong>framework7:</strong> 这个刚开是因为类似IOS原生页面受到瞩目,而且速度很快.现在也支持安卓,不过貌似不是那么特别好.</p>
<blockquote>
<p>参考文档<br><a href="http://framework7.taobao.org/" target="_blank" rel="noopener">官方网站</a></p>
</blockquote>
<p><strong>Mint UI:</strong> 基于 Vue.js 的移动端组件库 这个可以快速开发不过就是太简单了 不够好看<br><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">官方网站</a></p>
<a id="more"></a>
<p><strong>SUI Mobile:</strong> 阿里爸爸的框架,不过更新速度很慢,而且是仿照 Framework7 来搞的,所以不如直接用 Framework7.</p>
<blockquote>
<p>参考文档<br><a href="http://m.sui.taobao.org/" target="_blank" rel="noopener">官方网站</a></p>
</blockquote>
<p><strong>FrozenUI:</strong> 这个是新了解到的框架,不过好做最近不怎么更新了.也就了解下吧</p>
<blockquote>
<p>参考文档<br><a href="http://frozenui.github.io/" target="_blank" rel="noopener">官方网站</a></p>
</blockquote>
<p><strong>Planeui:</strong> 看着不错,不过已经停更一年了.看来也不能跟进了.</p>
<blockquote>
<p>参考文档<br><a href="https://pandao.github.io/planeui/" target="_blank" rel="noopener">官方网站</a><br><a href="http://www.oschina.net/p/plane-ui" target="_blank" rel="noopener">HTML5 跨终端响应式前端界面框架 Plane UI</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> APP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些想看的新玩意]]></title>
      <url>http://elickzhao.github.io/2016/10/%E4%B8%80%E4%BA%9B%E6%83%B3%E7%9C%8B%E7%9A%84%E6%96%B0%E7%8E%A9%E6%84%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>swoole， C扩展实现的PHP异步并行网络通信框架，可以重新定义PHP。过去PHP只能做Web项目，现在有了Swoole。任意服务器端程序都可以用PHP来写。<br>swoole_framework，基于swoole扩展开发的一个开发框架<br>php-webim，基于swoole实现的Web即时聊天工具，支持websocket+http comet长链接推送，可以发送文字内容和图片<br>workerman，类似swoole，不过是纯PHP实现的，官网有很多示例项目。底层功能比swoole少一些，但相对简单，应用层面的功能比swoole丰富。<br>zephir，这个有点厉害，可以用近似PHP的一种中间代码写程序，然后自动转为C++，并作为扩展来运行。可以解决PHP语言密集计算性能差的问题。<br>redis-async，基于swoole扩展写的异步redis客户端，压测起来性能跟Go语言之类的差不多</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文／skywalker（简书作者）</span><br><span class="line">原文链接：http://www.jianshu.com/p/bba4239c7c03</span><br><span class="line">著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</span><br></pre></td></tr></table></figure>
<p><strong>hprose</strong><br><a href="http://www.hprose.com/" target="_blank" rel="noopener">http://www.hprose.com/</a><br><a href="https://www.oschina.net/p/hprose" target="_blank" rel="noopener">https://www.oschina.net/p/hprose</a><br><a href="https://www.oschina.net/question/987851_145235" target="_blank" rel="noopener">使用HPROSE 创建服务端、客户端简明教程</a><br><a href="https://segmentfault.com/a/1190000007299367" target="_blank" rel="noopener">PHP 混合 Go 协程并发</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
            <tag> 待读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[apidoc安装与使用说明]]></title>
      <url>http://elickzhao.github.io/2016/10/apiDoc%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>安装很简单,全局安装这样就可以使用 <strong>apidoc</strong> 的命令了<br><code>npm install apidoc -g</code></p>
<p>使用</p>
<ul>
<li><p>首先必须在项目根目录建立个 <code>apidoc.json</code> 的配置文件.里面大概这么写.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"lumen-api-demo"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"LUMEN API DEMO"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"lumen api demo"</span>,</span><br><span class="line">    <span class="attr">"url"</span> : <span class="string">"http://jwt.cc/api"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用命令生成文档文件 <code>apidoc -i  app/Http/Controllers/Api/V1 -o public/apidoc</code></p>
</li>
<li><p><code>@apiSuccess (Reponse 200) {json} [data=&#39;&quot;&quot;&#39;] 如果有数据返回</code> []就是可选项在表格显示中有提示</p>
</li>
<li><p>多个版本很简单 只要把注释里的<code>@apiVersion 0.1.0</code>修改一下就可以了. 使用生成命令时,记得一定要在版本的上一级目录才可以.<code>apidoc -i  app/Http/Controllers/Api -o public/apidoc</code> 这里Api目录下面有 v1和v2两个目录.还有记得修改<code>apidoc.json</code>里的 <code>version</code> 要不默认显示的还是老版本</p>
</li>
</ul>
<h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@api &#123;method&#125; path [title]</span><br><span class="line">  只有使用@api标注的注释块才会在解析之后生成文档，title会被解析为导航菜单(@apiGroup)下的小菜单</span><br><span class="line">  method可以有空格，如&#123;POST GET&#125;</span><br><span class="line">@apiGroup name</span><br><span class="line">  分组名称，被解析为导航栏菜单</span><br><span class="line">@apiName name</span><br><span class="line">  接口名称，在同一个@apiGroup下，名称相同的@api通过@apiVersion区分，否者后面@api会覆盖前面定义的@api</span><br><span class="line">@apiDescription text</span><br><span class="line">  接口描述，支持html语法</span><br><span class="line">@apiVersion verison</span><br><span class="line">  接口版本，major.minor.patch的形式</span><br><span class="line"></span><br><span class="line">@apiIgnore [hint]</span><br><span class="line">  apidoc会忽略使用@apiIgnore标注的接口，hint为描述</span><br><span class="line">@apiSampleRequest url</span><br><span class="line">  接口测试地址以供测试，发送请求时，@api method必须为POST/GET等其中一种</span><br><span class="line"></span><br><span class="line">@apiDefine name [title] [description]</span><br><span class="line">  定义一个注释块(不包含@api)，配合@apiUse使用可以引入注释块</span><br><span class="line">  在@apiDefine内部不可以使用@apiUse</span><br><span class="line">@apiUse name</span><br><span class="line">  引入一个@apiDefine的注释块</span><br><span class="line"></span><br><span class="line">@apiParam [(group)] [&#123;type&#125;] [field=defaultValue] [description]</span><br><span class="line">@apiHeader [(group)] [&#123;type&#125;] [field=defaultValue] [description]</span><br><span class="line">@apiError [(group)] [&#123;type&#125;] field [description]</span><br><span class="line">@apiSuccess [(group)] [&#123;type&#125;] field [description]</span><br><span class="line">  用法基本类似，分别描述请求参数、头部，响应错误和成功</span><br><span class="line">  group表示参数的分组，type表示类型(不能有空格)，入参可以定义默认值(不能有空格)</span><br><span class="line">@apiParamExample [&#123;type&#125;] [title] example</span><br><span class="line">@apiHeaderExample [&#123;type&#125;] [title] example</span><br><span class="line">@apiErrorExample [&#123;type&#125;] [title] example</span><br><span class="line">@apiSuccessExample [&#123;type&#125;] [title] example</span><br><span class="line">  用法完全一致，但是type表示的是example的语言类型</span><br><span class="line">  example书写成什么样就会解析成什么样，所以最好是书写的时候注意格式化，(许多编辑器都有列模式，可以使用列模式快速对代码添加*号)</span><br><span class="line"></span><br><span class="line">@apiPermission name</span><br><span class="line">  name必须独一无二，描述@api的访问权限，如admin/anyone</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://apidocjs.com/#demo" target="_blank" rel="noopener">官方网站</a><br><a href="http://www.jianshu.com/p/bb5a4f5e588a" target="_blank" rel="noopener">Web API文档生成工具apidoc</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中let和var定义变量的区别 const 说明]]></title>
      <url>http://elickzhao.github.io/2016/10/js%E4%B8%ADlet%E5%92%8Cvar%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB%20const%20%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><strong>let</strong> 和 <strong>var</strong> 是一样的用于定义,最主要的是 <strong>let</strong> 是javascript 严格模式.</p>
<p><strong>主要区别如下:</strong></p>
<ul>
<li>作用范围不一样, <strong>var</strong>是全局的, <strong>let</strong>是局部的.</li>
<li>而且使用严格模式,文件开头一定要声明 <strong>‘use strict’;</strong> 否则会报错.</li>
<li>还有必须先声明再使用.</li>
<li>在同一作用域,重复声明会报错.</li>
</ul>
<p><a href="http://blog.csdn.net/nfer_zhuang/article/details/48781671" target="_blank" rel="noopener">参考文档</a><br><a href="http://www.infoq.com/cn/articles/es6-in-depth-let-and-const/" target="_blank" rel="noopener">深入浅出ES6（十四）：let和const</a><br><a href="http://www.tuicool.com/articles/zEruqm" target="_blank" rel="noopener">在JavaScript ES6中使用let和const定义变量</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 里面 class 用法]]></title>
      <url>http://elickzhao.github.io/2016/10/php%20%E9%87%8C%E9%9D%A2%20class%20%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>自 PHP 5.5 起，关键词 class 也可用于类名的解析。使用 ClassName::class 你可以获取一个字符串，包含了类 ClassName 的完全限定名称。这对使用了 命名空间 的类尤其有用。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>\<span class="title">V1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">ApiDemo</span>\<span class="title">Repositories</span>\<span class="title">Contracts</span>\<span class="title">UserRepositoryContract</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 当使用命名空间时 得到的结果是类文件所在位置  ??不过这个位置现在是不对的 可能我用法错误 </span></span><br><span class="line"></span><br><span class="line">var_dump(ApiDemo\Repositories\Contracts\UserRepositoryContract::class);</span><br><span class="line"><span class="comment">//"App\Http\Controllers\Api\V1\ApiDemo\Repositories\Contracts\UserRepositoryContract"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 当使用命名空间时  得到的是命名空间</span></span><br><span class="line"></span><br><span class="line">var_dump(UserRepositoryContract::class);</span><br><span class="line"><span class="comment">// "ApiDemo\Repositories\Contracts\UserRepositoryContract"</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 抽象类的用法 (abstract)]]></title>
      <url>http://elickzhao.github.io/2016/10/php%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95%20(abstract)/</url>
      <content type="html"><![CDATA[<p>抽象类(abstract),一般用于基类,所有的公共方法都可以放在里面,抽象类是不能被实例化的,只能被继承.而且抽象方法是必须被重写的,其他可以根据需要选择.这样你可以简单只写一个抽象方法,其他方法大家都有了,省着写了.</p>
<p><strong>以下是官方说法</strong></p>
<blockquote>
<p>PHP 5 支持抽象类和抽象方法。定义为抽象的类不能被实例化。任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</p>
</blockquote>
<a id="more"></a>
<p><strong>例子:</strong><br>抽象类 <code>BaseRepository</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ApiDemo</span>\<span class="title">Repositories</span>\<span class="title">Eloquent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = app()-&gt;make(<span class="keyword">$this</span>-&gt;model());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">model</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">paginate</span><span class="params">($limit = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model</span><br><span class="line">            -&gt;paginate($limit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span><span class="params">(array $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;where($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;first();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;find($id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(array $attributes)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $model = <span class="keyword">$this</span>-&gt;model-&gt;newInstance($attributes);</span><br><span class="line">        $model-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($id, array $attributes)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 感觉不太对</span></span><br><span class="line">        $model = <span class="keyword">$this</span>-&gt;model-&gt;find($id);</span><br><span class="line">        $model-&gt;fill($attributes)-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;destroy($id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>集成类 UserRepository<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ApiDemo</span>\<span class="title">Repositories</span>\<span class="title">Eloquent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">ApiDemo</span>\<span class="title">Repositories</span>\<span class="title">Contracts</span>\<span class="title">UserRepositoryContract</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">BaseRepository</span> <span class="keyword">implements</span> <span class="title">UserRepositoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">model</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'ApiDemo\Models\User'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面可以看到,只要实现抽象方法 <code>model()</code> 就可以了.这样指定了表,一些相同查询方法,大家都可以用了.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://php.net/manual/zh/language.oop5.abstract.php" target="_blank" rel="noopener">官方网站</a></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用composer 报错提示 Failed to decode response zlib_decode() data error]]></title>
      <url>http://elickzhao.github.io/2016/10/%E4%BD%BF%E7%94%A8composer%20%E6%8A%A5%E9%94%99%E6%8F%90%E7%A4%BA%20zlib_decode()%20data%20error/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed to decode response: zlib_decode(): data error</span><br><span class="line">Retrying with degraded mode, check https://getcomposer.org/doc/articles/troubleshooting.md#degraded-mode for more info</span><br></pre></td></tr></table></figure>
<p>网上有人说这个只要使用 <code>composer selfupdate</code> 就可以解决. 其实并不完全对.<br>因为我是再使用 <code>composer selfupdate</code> 这个时提示这个错误的.<br>其原因是因为权限不足造成的.我再 <strong>windows</strong> 下并没有使用 <strong>cmd</strong> 而是使用自己下载的 <strong>Cmder</strong>.<br>所以会有权限的问题.同理 <strong>linux</strong> 下如果权限不足也会出现这个错误.</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> composer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(laravel插件) laravel-backup 备份插件]]></title>
      <url>http://elickzhao.github.io/2016/10/%5Blaravel%E6%8F%92%E4%BB%B6%5D%20laravel-backup%20%E5%A4%87%E4%BB%BD%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="插件地址"><a href="#插件地址" class="headerlink" title="插件地址"></a>插件地址</h2><p><a href="https://packagist.org/packages/spatie/laravel-backup" target="_blank" rel="noopener">https://packagist.org/packages/spatie/laravel-backup</a></p>
<h2 id="安装及配置简介"><a href="#安装及配置简介" class="headerlink" title="安装及配置简介"></a>安装及配置简介</h2><p>安装文档 <a href="https://docs.spatie.be/laravel-backup/v3/installation-and-setup" target="_blank" rel="noopener">https://docs.spatie.be/laravel-backup/v3/installation-and-setup</a> 被墙了</p>
<p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line"></span><br><span class="line">    &apos;backup&apos; =&gt; [</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * The name of this application. You can use this name to monitor</span><br><span class="line">         * the backups.</span><br><span class="line">         */</span><br><span class="line">        //&apos;name&apos; =&gt; env(&apos;APP_URL&apos;),   //这个备份时的目录名,如果是服务器上域名是不错的不过本地的话改一下比较好</span><br><span class="line">        &apos;name&apos; =&gt; &apos;elick blog&apos;,</span><br><span class="line"></span><br><span class="line">        &apos;source&apos; =&gt; [</span><br><span class="line">            //这个强大啊 还能备份文件</span><br><span class="line">            &apos;files&apos; =&gt; [</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                /*</span><br><span class="line">                 * The list of directories that should be part of the backup. You can</span><br><span class="line">                 * specify individual files as well.</span><br><span class="line">                 * 这个是目录迭代器 但是当迭代node_modules时会出错 所以注销了</span><br><span class="line">                 * 这样也就无法备份文件系统了 明天可以试试把排除放在前面看看可不可以</span><br><span class="line">                 * 排除放在前面也不可以，但是可以挨个指定目录或文件</span><br><span class="line">                 * 没有这个迭代还不可以 只有排除是不行的</span><br><span class="line">                 * node_modules还是不行 里面全是链接目录一层套一层的 也不知道怎么搞的 不知道其他项目node目录是不是也这样</span><br><span class="line">                 */</span><br><span class="line">                &apos;include&apos; =&gt; [</span><br><span class="line">                    //base_path(),</span><br><span class="line">                     base_path(&apos;app&apos;),</span><br><span class="line">                    // base_path(&apos;artisan&apos;),   //目录和单个文件都是可以的</span><br><span class="line">                ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                 // * These directories will be excluded from the backup.</span><br><span class="line">                 // * You can specify individual files as well.</span><br><span class="line"></span><br><span class="line">                &apos;exclude&apos; =&gt; [</span><br><span class="line">                    base_path(&apos;vendor&apos;),</span><br><span class="line">                    base_path(&apos;node_modules&apos;),</span><br><span class="line">                    storage_path(),</span><br><span class="line">                    base_path(&apos;.git&apos;),</span><br><span class="line">                    base_path(&apos;.idea&apos;),</span><br><span class="line">                ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                /*</span><br><span class="line">                 * Determines if symlinks should be followed.</span><br><span class="line">                 */</span><br><span class="line">                &apos;followLinks&apos; =&gt; false,</span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * The names of the connections to the databases that should be part of the backup.</span><br><span class="line">             * Currently only MySQL- and PostgreSQL-databases are supported.</span><br><span class="line">             */</span><br><span class="line">            &apos;databases&apos; =&gt; [</span><br><span class="line">                &apos;mysql&apos;,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        &apos;destination&apos; =&gt; [</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * The disk names on which the backups will be stored.</span><br><span class="line">             * 保存位置在这</span><br><span class="line">             * storage\app\http---localhost</span><br><span class="line">             */</span><br><span class="line">            &apos;disks&apos; =&gt; [</span><br><span class="line">                &apos;local&apos;,        //这个配置位置在 config/filesystems.php</span><br><span class="line">                &apos;backup&apos;,       //这个就是我自己加的</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &apos;cleanup&apos; =&gt; [</span><br><span class="line">        /*</span><br><span class="line">         * The strategy that will be used to cleanup old backups.</span><br><span class="line">         * The youngest backup will never be deleted.</span><br><span class="line">         */</span><br><span class="line">        &apos;strategy&apos; =&gt; \Spatie\Backup\Tasks\Cleanup\Strategies\DefaultStrategy::class,</span><br><span class="line"></span><br><span class="line">        &apos;defaultStrategy&apos; =&gt; [</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * The amount of days that all backups must be kept.</span><br><span class="line">             */</span><br><span class="line">            &apos;keepAllBackupsForDays&apos; =&gt; 7,</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * The amount of days that all daily backups must be kept.</span><br><span class="line">             */</span><br><span class="line">            &apos;keepDailyBackupsForDays&apos; =&gt; 16,</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * The amount of weeks of which one weekly backup must be kept.</span><br><span class="line">             */</span><br><span class="line">            &apos;keepWeeklyBackupsForWeeks&apos; =&gt; 8,</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * The amount of months of which one monthly backup must be kept.</span><br><span class="line">             */</span><br><span class="line">            &apos;keepMonthlyBackupsForMonths&apos; =&gt; 4,</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * The amount of years of which one yearly backup must be kept.</span><br><span class="line">             */</span><br><span class="line">            &apos;keepYearlyBackupsForYears&apos; =&gt; 2,</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * After cleaning up the backups remove the oldest backup until</span><br><span class="line">             * this amount of megabytes has been reached.</span><br><span class="line">             */</span><br><span class="line">            &apos;deleteOldestBackupsWhenUsingMoreMegabytesThan&apos; =&gt; 5000,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     *  In this array you can specify which backups should be monitored.</span><br><span class="line">     *  If a backup does not meet the specified requirements the</span><br><span class="line">     *  UnHealthyBackupWasFound-event will be fired.</span><br><span class="line">     */</span><br><span class="line">    &apos;monitorBackups&apos; =&gt; [</span><br><span class="line">        [</span><br><span class="line">            &apos;name&apos; =&gt; env(&apos;APP_URL&apos;),</span><br><span class="line">            &apos;disks&apos; =&gt; [&apos;local&apos;],</span><br><span class="line">            &apos;newestBackupsShouldNotBeOlderThanDays&apos; =&gt; 1,</span><br><span class="line">            &apos;storageUsedMayNotBeHigherThanMegabytes&apos; =&gt; 5000,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        [</span><br><span class="line">            &apos;name&apos; =&gt; &apos;name of the second app&apos;,</span><br><span class="line">            &apos;disks&apos; =&gt; [&apos;local&apos;, &apos;s3&apos;],</span><br><span class="line">            &apos;newestBackupsShouldNotBeOlderThanDays&apos; =&gt; 1,</span><br><span class="line">            &apos;storageUsedMayNotBeHigherThanMegabytes&apos; =&gt; 5000,</span><br><span class="line">        ],</span><br><span class="line">        */</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &apos;notifications&apos; =&gt; [</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * This class will be used to send all notifications.</span><br><span class="line">         */</span><br><span class="line">        &apos;handler&apos; =&gt; Spatie\Backup\Notifications\Notifier::class,</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Here you can specify the ways you want to be notified when certain</span><br><span class="line">         * events take place. Possible values are &quot;log&quot;, &quot;mail&quot;, &quot;slack&quot;,</span><br><span class="line">         * &quot;pushover&quot;, and &quot;telegram&quot;.</span><br><span class="line">         *</span><br><span class="line">         * Slack requires the installation of the maknz/slack package.</span><br><span class="line">         * Telegram requires the installation of the irazasyed/telegram-bot-sdk package.</span><br><span class="line">         */</span><br><span class="line">        &apos;events&apos; =&gt; [</span><br><span class="line">            &apos;whenBackupWasSuccessful&apos;     =&gt; [&apos;log&apos;],</span><br><span class="line">            &apos;whenCleanupWasSuccessful&apos;    =&gt; [&apos;log&apos;],</span><br><span class="line">            &apos;whenHealthyBackupWasFound&apos;   =&gt; [&apos;log&apos;],</span><br><span class="line">            &apos;whenBackupHasFailed&apos;         =&gt; [&apos;log&apos;, &apos;mail&apos;],</span><br><span class="line">            &apos;whenCleanupHasFailed&apos;        =&gt; [&apos;log&apos;, &apos;mail&apos;],</span><br><span class="line">            &apos;whenUnhealthyBackupWasFound&apos; =&gt; [&apos;log&apos;, &apos;mail&apos;],</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Here you can specify how emails should be sent.</span><br><span class="line">         */</span><br><span class="line">        &apos;mail&apos; =&gt; [</span><br><span class="line">            &apos;from&apos; =&gt; &apos;your@email.com&apos;,</span><br><span class="line">            &apos;to&apos;   =&gt; &apos;your@email.com&apos;,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Here you can specify how messages should be sent to Slack.</span><br><span class="line">         */</span><br><span class="line">        &apos;slack&apos; =&gt; [</span><br><span class="line">            &apos;channel&apos;  =&gt; &apos;#backups&apos;,</span><br><span class="line">            &apos;username&apos; =&gt; &apos;Backup bot&apos;,</span><br><span class="line">            &apos;icon&apos;     =&gt; &apos;:robot:&apos;,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Here you can specify how messages should be sent to Pushover.</span><br><span class="line">         */</span><br><span class="line">        &apos;pushover&apos; =&gt; [</span><br><span class="line">            &apos;token&apos;  =&gt; env(&apos;PUSHOVER_APP_TOKEN&apos;),</span><br><span class="line">            &apos;user&apos;   =&gt; env(&apos;PUSHOVER_USER_KEY&apos;),</span><br><span class="line">            &apos;sounds&apos; =&gt; [</span><br><span class="line">                &apos;success&apos; =&gt; env(&apos;PUSHOVER_SOUND_SUCCESS&apos;, &apos;pushover&apos;),</span><br><span class="line">                &apos;error&apos;   =&gt; env(&apos;PUSHOVER_SOUND_ERROR&apos;, &apos;siren&apos;),</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Here you can specify how messages should be sent to Telegram Bot API.</span><br><span class="line">         */</span><br><span class="line">        &apos;telegram&apos; =&gt; [</span><br><span class="line">            &apos;bot_token&apos; =&gt; env(&apos;TELEGRAM_BOT_TOKEN&apos;),</span><br><span class="line">            &apos;chat_id&apos;   =&gt; env(&apos;TELEGRAM_CHAT_ID&apos;),</span><br><span class="line">            &apos;async_requests&apos; =&gt; env(&apos;TELEGRAM_ASYNC_REQUESTS&apos;, false),</span><br><span class="line">            &apos;disable_web_page_preview&apos; =&gt; env(&apos;TELEGRAM_DISABLE_WEB_PAGE_PREVIEW&apos;, true),</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> laravel插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(laravel插件) Api响应格式化插件 laravel5-fractal]]></title>
      <url>http://elickzhao.github.io/2016/10/%5Blaravel%E6%8F%92%E4%BB%B6%5D%20Api%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6%20laravel5-fractal/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这个插件用到的是 <strong>Fractal</strong>,并把它与 <strong>laravel</strong> 结合.使 <strong>larvel</strong> 响应请求时有美化的格式,不用每个都去手动改写.<br>例如,数据库里的表名往往是简称或英文.但是你返回给程序时,最好直接就能用,而不用再一次进行操作,并且可以添加没有记录在数据库里的数据.</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从数据里读出的数据</span></span><br><span class="line">$books = [</span><br><span class="line">	[</span><br><span class="line">		<span class="string">'id'</span> =&gt; <span class="string">'1'</span>,</span><br><span class="line">		<span class="string">'title'</span> =&gt; <span class="string">'Hogfather'</span>,</span><br><span class="line">		<span class="string">'yr'</span> =&gt; <span class="string">'1998'</span>,</span><br><span class="line">		<span class="string">'author_name'</span> =&gt; <span class="string">'Philip K Dick'</span>,</span><br><span class="line">		<span class="string">'author_email'</span> =&gt; <span class="string">'philip@example.org'</span>,</span><br><span class="line">	],</span><br><span class="line">	[</span><br><span class="line">		<span class="string">'id'</span> =&gt; <span class="string">'2'</span>,</span><br><span class="line">		<span class="string">'title'</span> =&gt; <span class="string">'Game Of Kill Everyone'</span>,</span><br><span class="line">		<span class="string">'yr'</span> =&gt; <span class="string">'2014'</span>,</span><br><span class="line">		<span class="string">'author_name'</span> =&gt; <span class="string">'George R. R. Satan'</span>,</span><br><span class="line">		<span class="string">'author_email'</span> =&gt; <span class="string">'george@example.org'</span>,</span><br><span class="line">	]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模版</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transform</span><span class="params">($books)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'id'</span>      =&gt; (int) $book[<span class="string">'id'</span>],</span><br><span class="line">        <span class="string">'title'</span>   =&gt; $book[<span class="string">'title'</span>],</span><br><span class="line">        <span class="string">'year'</span>    =&gt; (int) $book[<span class="string">'yr'</span>],     <span class="comment">// 把数据库不标准的命名改成可读性强的</span></span><br><span class="line">        <span class="string">'author'</span>  =&gt; [                      <span class="comment">// 整理在author下 数据库是没有这个层级关系的</span></span><br><span class="line">        	<span class="string">'name'</span>  =&gt; $book[<span class="string">'author_name'</span>],</span><br><span class="line">        	<span class="string">'email'</span> =&gt; $book[<span class="string">'author_email'</span>],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'links'</span>   =&gt; [                  <span class="comment">// 连接这种东西就完全没必要存在数据库里 直接组合就成了</span></span><br><span class="line">            [</span><br><span class="line">                <span class="string">'rel'</span> =&gt; <span class="string">'self'</span>,</span><br><span class="line">                <span class="string">'uri'</span> =&gt; <span class="string">'/books/'</span>.$book[<span class="string">'id'</span>],</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样返回就好了 就是有一定格式的数据了 省着写程序了</span></span><br><span class="line"><span class="keyword">return</span> Fractal::collection($users, <span class="keyword">new</span> UserTransformer);</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>首先去建立个模版,使用命令 <code>php artisan make:transformer</code> 这个命令会建立一个目录 <code>App\Transfomers\</code> 把所有的模版都放在下面</li>
<li><p>紧接着修改模版到你想输出的样式</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transform</span><span class="params">($user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">           <span class="string">'id'</span> =&gt; $user-&gt;user_id,</span><br><span class="line">           <span class="string">'name'</span> =&gt; <span class="string">"&#123;$user-&gt;user_firstname&#125; &#123;$user-&gt;user_lastname&#125;"</span>,</span><br><span class="line">           ...</span><br><span class="line">           ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.0版 你可以直接用这个命令 生成对应model的模版 <code>php artisan make:transformer UserTransformer -m User</code></p>
</li>
<li>填写数据使用模版<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个数据使用 item</span></span><br><span class="line">$user = User::find(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Fractal::item($user, <span class="keyword">new</span> UserTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个数据使用 collection</span></span><br><span class="line">$users = User::get(); <span class="comment">// $users = User::paginate();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Fractal::collection($users, <span class="keyword">new</span> UserTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想用数组这么写</span></span><br><span class="line">Fractal::collection($user, <span class="keyword">new</span> UserTransformer)-&gt;getArray();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/Cyvelnet/laravel5-fractal" target="_blank" rel="noopener">Cyvelnet/laravel5-fractal</a><br><a href="http://fractal.thephpleague.com/simple-example/" target="_blank" rel="noopener">Fractal</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前台工具小技巧 使用别人的工具 node]]></title>
      <url>http://elickzhao.github.io/2016/10/%E5%89%8D%E5%8F%B0%E5%B7%A5%E5%85%B7%E5%B0%8F%E6%8A%80%E5%B7%A7%20%E4%BD%BF%E7%94%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E5%B7%A5%E5%85%B7%20node/</url>
      <content type="html"><![CDATA[<p>最近一直在高前端,所以难免会在Github上用别人的工具.但是现在好多高前端都用一些高大上的东西,node什么的还好说,前段用gulp,最近又开始流行webpace,真是时代潮流不好追啊.而且有些人文档写的很简略,再加上中国的网络情况,有时你弄下来却是各种的不好使.真是头疼.这里总结下别人的东西怎么用.</p>
<ol>
<li>先 <code>npm install</code> 把依赖都安装好</li>
<li>最好先用<code>npm install</code> 如果有装不上的 比如该死的 <code>node-sass</code> 在用<code>cnpm install</code> 因为这个总有莫名其妙的错误,而且下载下来的包特别的大,所以能用 <code>npm</code> 就用 <code>npm</code></li>
<li>再有看看<code>package.json</code> 这里的 <code>scripts</code> 下面都是可运行命令 一般情况下在用webpace的时候 会有启动服务器的命令,这样直接就查看效果了 省着自己动手.</li>
<li><code>UNMET PEER DEPENDENCY</code> 如果出现这个错误 那是有的插件依赖版本不对.所以需要手动调整<code>package.json</code>,如果不行那就下载这个插件新的版本吧</li>
<li>今天又发现个事,好像最近 <code>build</code> 目录不再是生成目录了. <code>dist</code>是生成目录. <code>build</code>主要用于放置build时或者dev服务器的配置文件.以后需要注意下</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Element UI 安装时的一点小问题]]></title>
      <url>http://elickzhao.github.io/2016/10/Element%20UI%20%E5%AE%89%E8%A3%85%E6%97%B6%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>Element 用到了 <code>vue-markdown-loader</code> 使 md 文件生成网页. 但是他在 <code>webpace</code> 启动时 把生成的网页缓存到了. <code>vue-markdown-loader</code> 目录下的 <code>.cache</code> 目录里. 但如果是windows系统的话.有可能因为权限问题无法创建 <code>.</code>开头文件造成错误. 所以 自己建立一个就好了</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Atom 编辑器配置sync-setting]]></title>
      <url>http://elickzhao.github.io/2016/10/Atom%20%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AEsync-setting/</url>
      <content type="html"><![CDATA[<h2 id="sync-settings简介"><a href="#sync-settings简介" class="headerlink" title="sync-settings简介"></a>sync-settings简介</h2><p>sync-settings是一款备份插件，可以备份ATOM的全局设置、插件、按键绑定(keymaps)、界面样式、代码片段(snippets )、 init script。这样不管走到那里使用的Atom都是自己最熟悉的那个,这样省去了很多麻烦.</p>
<a id="more"></a>
<h2 id="sync-settings配置"><a href="#sync-settings配置" class="headerlink" title="sync-settings配置"></a>sync-settings配置</h2><ul>
<li><p>申请生成token和gist id</p>
<ul>
<li>申请goken<br><img src="http://img.blog.csdn.net/20160712181041681" alt=""></li>
<li>Select scopes 记住一定要把<code>gist</code>打上勾.要不无法找到 <code>gist</code><br><img src="/image/16-10/1.png" alt=""></li>
<li>创建新的gist<ul>
<li>登陆github，点击Gist图标(使用gist功能需要翻墙)：<br><img src="http://img.blog.csdn.net/20160712174133844" alt=""></li>
<li>创建个gist项目,这个项目是私人或公开的都可以<br><img src="http://img.blog.csdn.net/20160712174836003" alt=""></li>
<li>成功创建后将会跳转到刚刚创建的gist项目浏览页面，url处昵称后面的字符即为gist id，粘贴到sync-settings的配置处即可<br><img src="http://img.blog.csdn.net/20160712175604129" alt=""></li>
</ul>
</li>
</ul>
</li>
<li><p>设置sync-setting<br><img src="http://img.blog.csdn.net/20160712173400621" alt=""></p>
</li>
</ul>
<h2 id="测试下是否正常"><a href="#测试下是否正常" class="headerlink" title="测试下是否正常"></a>测试下是否正常</h2><ul>
<li>在文档编辑页面,按下全局命令搜索面板(Ctrl+shift+p)</li>
<li>搜索sync- ,会有可选项<ul>
<li>sync-settings:backup – 这条命令是备份当前的配置</li>
<li>sync-settings:restore – 这条命令是回复配置,是直接覆盖的;</li>
<li>sync-settings:view-backup – 这条是当你执行备份后到线上查询你的备份的,也就是到你的gist code里面</li>
<li>sync-settings:check-backup – 这条是查询最后一次是否正常</li>
</ul>
</li>
</ul>
<p>备份成功和失败都有一条信息提醒,看图.<br><img src="http://img3.07net01.com/upload/images/2015/08/05/1647021050918243.png" alt=""></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.07net01.com/2015/08/893825.html" target="_blank" rel="noopener">Atom编辑器折腾记_(12)Sync-setttings(插件-备份神器)</a><br><a href="http://blog.csdn.net/zsl10/article/details/51891306" target="_blank" rel="noopener">ATOM基础教程一sync-settings配置(11)</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> IDE </tag>
            
            <tag> atom </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[箭头函数 ()=>{....}]]></title>
      <url>http://elickzhao.github.io/2016/10/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>箭头函数 这是es6新建的 就是匿名函数的简写,当然还有些区别没有细研究. 第一个参数是本身的形参</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">config.map(<span class="function"><span class="params">nav</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nav.groups) &#123;</span><br><span class="line">      nav.groups.map(<span class="function"><span class="params">group</span> =&gt;</span> &#123;</span><br><span class="line">        group.list.map(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line">          addRoute(page);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nav.children) &#123;</span><br><span class="line">      nav.children.map(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line">        addRoute(page);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      addRoute(nav);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<p>补充:<br>有人说这种写法是匿名函数的简写,从下面这段看的确是这样.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= textflowArr.length) &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> textFlow = textflowArr[count];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切换描述内容</span></span><br><span class="line">    <span class="comment">// Switch to described content</span></span><br><span class="line">    textfield.textFlow = textFlow;</span><br><span class="line">    <span class="keyword">let</span> tw = egret.Tween.get(textfield);</span><br><span class="line">    tw.to(&#123;<span class="string">"alpha"</span>: <span class="number">1</span>&#125;, <span class="number">200</span>);</span><br><span class="line">    tw.wait(<span class="number">2000</span>);</span><br><span class="line">    tw.to(&#123;<span class="string">"alpha"</span>: <span class="number">0</span>&#125;, <span class="number">200</span>);</span><br><span class="line">    tw.call(change, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">change();</span><br></pre></td></tr></table></figure>
<p>匿名函数是什么样的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里可以直接添加括号这样可以立即执行</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"><span class="comment">// 也可以赋值给个变量 留着以后执行</span></span><br><span class="line"><span class="keyword">var</span> change = (<span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    alert(count);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>);  <span class="comment">//咦 这个跟函数也没区别了啊,虽然change是个变量,但是使用的时候,跟函数是一样的啊</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    alert(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>//测试如下</p>
<iframe width="100%" height="450" src="http://code.hcharts.cn/test123/OFH8Df/share/result,js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>参考文档:</strong><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a><br><a href="https://www.zhihu.com/question/38242264" target="_blank" rel="noopener">知乎提问</a><br><a href="http://yanhaijing.com/javascript/2015/09/11/learn-es2015/" target="_blank" rel="noopener">ECMAScript 2015 简易教程</a><br><a href="http://www.cnblogs.com/rainman/archive/2009/05/04/1448899.html" target="_blank" rel="noopener">JavaScript中的匿名函数及函数的闭包</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js创建对象]]></title>
      <url>http://elickzhao.github.io/2016/10/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'bb'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> bb();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">   <span class="keyword">return</span> <span class="string">"啊打"</span>;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ee</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">"李小龙"</span>;  </span><br><span class="line">    <span class="keyword">this</span>.age=<span class="string">"30"</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> ee();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(aa));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(bb));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(b));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(cc));</span><br><span class="line"><span class="built_in">console</span>.log(cc());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(dd));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(ee));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(e));</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">object      </span><br><span class="line"><span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">object</span></span></span><br><span class="line"><span class="function"><span class="title">function</span></span></span><br><span class="line"><span class="function">1</span></span><br><span class="line"><span class="function"><span class="title">function</span></span></span><br><span class="line"><span class="function"><span class="title">function</span></span></span><br><span class="line"><span class="function"><span class="title">object</span></span></span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/w-wanglei/p/5672167.html" target="_blank" rel="noopener">Javascript进阶之路-论对象的重要性 <em>**</em></a></p>
<p><a href="http://www.jb51.net/article/46249.htm" target="_blank" rel="noopener">js中创建对象的几种方式示例介绍</a><br><a href="http://www.cnblogs.com/koeltp/archive/2012/09/08/2676028.html" target="_blank" rel="noopener">JS函数与面向对象</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中let和var定义变量的区别]]></title>
      <url>http://elickzhao.github.io/2016/10/js%E4%B8%ADlet%E5%92%8Cvar%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p><strong>let</strong> 和 <strong>var</strong> 是一样的用于定义,最主要的是 <strong>let</strong> 是javascript 严格模式.</p>
<p><strong>主要区别如下:</strong></p>
<ul>
<li>作用范围不一样, <strong>var</strong>是全局的, <strong>let</strong>是局部的.</li>
<li>而且使用严格模式,文件开头一定要声明 <strong>‘use strict’;</strong> 否则会报错.</li>
<li>还有必须先声明再使用.</li>
<li>在同一作用域,重复声明会报错.</li>
</ul>
<p><a href="http://blog.csdn.net/nfer_zhuang/article/details/48781671" target="_blank" rel="noopener">参考文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue.js 中国好教程]]></title>
      <url>http://elickzhao.github.io/2016/10/vue.js%20%E4%B8%AD%E5%9B%BD%E5%A5%BD%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/keepfool/vue-tutorials" target="_blank" rel="noopener">Vue.js教程</a><br><a href="http://www.cnblogs.com/luozhihao/p/5329440.html" target="_blank" rel="noopener">浅谈Vue.js</a><br><a href="http://www.tuicool.com/articles/AFzQFzN" target="_blank" rel="noopener">vue.js学习笔记1 – 搭建vue.js本地开发框架</a><br><a href="https://github.com/bhnddowinf/vuejs-learn" target="_blank" rel="noopener">vuejs-learn</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 引入css和js文件]]></title>
      <url>http://elickzhao.github.io/2016/10/laravel%20%E5%BC%95%E5%85%A5css%E5%92%8Cjs%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  一般情况下是不会有问题的,类似这样 <code>bootstrap/css/bootstrap.min.css</code> 或者 <code>/bootstrap/css/bootstrap.min.css</code>,当网站使用域名的时候后者不会出错,可是当使用本地测试时,是在<code>http://localhost/Admin/public/admin/</code>这样一个路径,就会出现加载位置出错.</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>  解决方法有几个 (没办法只能这么写,双括号 和 hexo冲突)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## .env文件加入`APP_URL`参数 在模版里读取 env('APP_URL')</span></span><br><span class="line">&#123;&#123; env(<span class="string">'APP_URL'</span>) &#125;&#125;<span class="string">"/libs/font-awesome/4.5.0/css/font-awesome.min.css"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用帮助函数 `asset()` 这个应该算是比较正统做法 但有个问题不知道在域名下是否正确,我没测试过</span></span><br><span class="line">&#123;&#123; asset(<span class="string">'/bootstrap/css/bootstrap.min.css'</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 还有他原本的形式是这样的</span></span><br><span class="line">&#123;&#123; URL::asset(<span class="string">'//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css'</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 还有个一个HtmlBuilder 这个需要安装 `composer require illuminate/html 5.*` 然后这么使用</span></span><br><span class="line">&#123;!!Html::style(<span class="string">'css/style.css'</span>)!!&#125;</span><br><span class="line">&#123;!!Html::script(<span class="string">'js/script.js'</span>)!!&#125;</span><br><span class="line"><span class="comment">## 这挺好不用自己写那么一长串了,这个5.1里我有,5.2还没有整理</span></span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://wenda.golaravel.com/question/828" target="_blank" rel="noopener">Laravel5如何在*.blade.php引用css/js文件</a><br><a href="http://www.cnblogs.com/ziyouchutuwenwu/p/4269715.html" target="_blank" rel="noopener">laravel加载js和css等资源</a><br><a href="http://laravelacademy.org/post/3672.html" target="_blank" rel="noopener">Laravel 5 中使用 HtmlBuilder 及 URL::asset() 引入站内或站外的 css 和 js 文件</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决 Gravatar 被墙导致无法显示的问题]]></title>
      <url>http://elickzhao.github.io/2016/10/%E8%A7%A3%E5%86%B3%20Gravatar%20%E8%A2%AB%E5%A2%99%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>Gravatar</strong></p>
<blockquote>
<p>Gravatar是Globally Recognized Avatar的缩写,是gravatar推出的一项服务，意为“全球通用头像”。如果在Gravatar的服务器上放置了你自己的头像，那么在任何支持Gravatar的blog或者留言本上留言时，只要提供你与这个头像关联的email地址，就能够显示出你的Gravatar头像来</p>
</blockquote>
<ol>
<li>使用未被墙的地址</li>
</ol>
<p>目前一共收集到 7 个 Gravatar 官方地址，其中前 4 个被墙了，所以我们使用未被墙的地址作为替代：</p>
<p><a href="http://www.gravatar.com" target="_blank" rel="noopener">http://www.gravatar.com</a><br><a href="http://0.gravatar.com" target="_blank" rel="noopener">http://0.gravatar.com</a><br><a href="http://1.gravatar.com" target="_blank" rel="noopener">http://1.gravatar.com</a><br><a href="http://2.gravatar.com" target="_blank" rel="noopener">http://2.gravatar.com</a><br><a href="http://gravatar.com" target="_blank" rel="noopener">http://gravatar.com</a><br><strong><a href="http://cn.gravatar.com" target="_blank" rel="noopener">http://cn.gravatar.com</a></strong> <code>使用这个就好了</code><br><a href="https://secure.gravatar.com" target="_blank" rel="noopener">https://secure.gravatar.com</a></p>
<hr>
<p><strong>参考文章</strong><br><a href="http://c7sky.com/unblock-gravatar.html" target="_blank" rel="noopener">4 种方法解决 Gravatar 被墙导致无法显示的问题</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack 零基础教程]]></title>
      <url>http://elickzhao.github.io/2016/10/webpace%20%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这套教材非常好 非常适合我.<br><a href="https://zhuanlan.zhihu.com/p/20367175" target="_blank" rel="noopener">Webpack傻瓜式指南（一）</a><br><a href="https://zhuanlan.zhihu.com/p/20397902" target="_blank" rel="noopener">Webpack傻瓜指南（二）开发和部署技巧</a><br><a href="https://zhuanlan.zhihu.com/p/20522487" target="_blank" rel="noopener">Webpack傻瓜指南（三）和React配合开发</a></p>
</blockquote>
<p>不过有个小问题: 里面的方法不能加括号<code>app.appendChild(sub());</code> 这个应当这么写 <code>app.appendChild(sub);</code> 这个错误原因可能是他手误了 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前</span></span><br><span class="line"><span class="comment">//只需要 sub</span></span><br><span class="line"><span class="comment">//这个是CommonJS风格代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'h2'</span>);</span><br><span class="line">	element.innerHTML = <span class="string">"Hello hddddaa world"</span>;</span><br><span class="line">	<span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = generateText();</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line"><span class="comment">//后面</span></span><br><span class="line"><span class="comment">// 所以需要sub()</span></span><br><span class="line"><span class="comment">//这个是ES6风格代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'h2'</span>);</span><br><span class="line">  element.innerHTML = <span class="string">"Hello h2 world hahaha"</span>;</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<p>这个教程又少写了一步:<br>在解决jquery老插件无法引入jquery的方法时<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先得引用才行  教程里没有提这个</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">	plugins: [</span><br><span class="line">		<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">			title: <span class="string">'Hello world app'</span></span><br><span class="line">		&#125;),</span><br><span class="line">		<span class="comment">//new webpack.HotModuleReplacementPlugin(), //这是hot的一个插件</span></span><br><span class="line">		<span class="comment">//webpack提供一个插件 把一个全局变量插入到所有的代码中</span></span><br><span class="line">		<span class="comment">//这个就是插入jquery到所有文件中,应对jquery老的插件不支持引用</span></span><br><span class="line">		<span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">			$: <span class="string">"jquery"</span>,</span><br><span class="line">			jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">			<span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></span><br><span class="line">		&#125;)	</span><br><span class="line">	],</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>配置hot时搜索的文档 <code>顺便说下hot 现在的感觉是同步组件修改 比如vue 不用这个插件 vue组件修改 浏览器不自动更新 这是我现在这么理解的</code><br><a href="http://my.oschina.net/bosscheng/blog/514638" target="_blank" rel="noopener">说说Webpack</a><br><a href="http://blog.csdn.net/lihongxun945/article/details/49942749" target="_blank" rel="noopener">七周七种前端框架二: React 之 webpack 简介</a></p>
<p>其他<br><a href="http://www.open-open.com/lib/view/open1450681593198.html" target="_blank" rel="noopener">WebPack常用功能介绍</a> –&gt; 这也是个很详细的文章<br><a href="http://www.gowhich.com/blog/698" target="_blank" rel="noopener">webpack分离css单独打包</a><br><a href="http://www.w2bc.com/Article/50764" target="_blank" rel="noopener">一小时包教会 —— webpack 入门指南</a><br><a href="http://webpackdoc.com/index.html" target="_blank" rel="noopener">Webpack 中文指南</a>  –&gt;手册包涵所有方面 但不是特别详细<br><a href="http://cnodejs.org/topic/56460e0d89b4b49902e7fbd3" target="_blank" rel="noopener">在node中使用babel6的一些简单分享</a>  –&gt;因为使用 <code>babel</code> 和 <code>babel-preset-es2015</code> 一直报错 <code>import</code> 所以查了这个</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NPM 安装 及 安装node-sass报错问题]]></title>
      <url>http://elickzhao.github.io/2016/08/NPM%20%E5%AE%89%E8%A3%85%20%E5%8F%8A%20%E5%AE%89%E8%A3%85node-sass%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这次安装是按照网上教程来的 不过好像有点老了 下次尝试新的  就是不用clone npm的git 因为看到现在下载的node.js里的node_modules里 就有了这个目录了 也许直接执行命令就好了</p>
</blockquote>
<ol>
<li>下载node.js安装 如果没有git的话下载git安装 或者直接下载git://github.com/isaacs/npm.git  压缩包也可以</li>
<li>git clone –recursive git://github.com/isaacs/npm.git 下载NPM</li>
<li>在NPM目录里 执行安装 node cli.js install npm -gf   (-gf 为全局安装 如果安装其他包也可以使用这个命令)</li>
<li>NPM -v 查看版本 是否安装成功</li>
</ol>
<hr>
<h2 id="再次安装心得"><a href="#再次安装心得" class="headerlink" title="再次安装心得"></a>再次安装心得</h2><p>npm已经是附带安装,所以不用再像上面那样手动安装npm.<br>不过默认安装的npm默认安装模块位置在<code>C:\Users\elick\AppData\Roaming</code>这个下面,不像手动安装是在nodejs目录里,而且自动安装的版本也比较低.<br>所以选择手动安装也不错.不过必须先得写在已经安装好的npm <code>npm uninstall npm</code></p>
<hr>
<p>在windows下开发真是麻烦重重,还的需要安装python,还得需要安装c++.比如说要用node-sass 就得必须用这两个. 而要开发socket.io和ionic都需要这个</p>
<h2 id="第三次安装"><a href="#第三次安装" class="headerlink" title="第三次安装"></a>第三次安装</h2><p>有时网上克隆下来的项目,还是有错误问题.又一次遇到了node-sass,这次用cnpm居然就可以了.所以可能上次安装的问题也是因为这个,有机会下次测试下.</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo 博客小技巧]]></title>
      <url>http://elickzhao.github.io/2016/07/hexo%20%E5%8D%9A%E5%AE%A2%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>hexo会把所有的MD文件转换成html文件.但是这样Github的<code>Readme</code>就没法展现了.我用的方法是把<code>Readme.md</code> 前面加了<code>_</code>变成<code>_Readme.md</code>,这样hexo就不会转换了,因为hexo默认过滤掉<code>_</code>开头文件或文件夹,除了<code>_post</code>.我把<code>Readme.md</code>直接扔到<code>public</code>文件夹.这样就不会转换成html文件了,这样就能是Github有Readme了.</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSFiddle 改写展示标签]]></title>
      <url>http://elickzhao.github.io/2016/07/JSFiddle%20%E6%94%B9%E5%86%99%E5%B1%95%E7%A4%BA%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://jsfiddle.net/elick/s03Lk51x/1/" target="_blank" rel="noopener">JSFiddle</a> 是一个用于前端代码展示与分享的网站,可以在这里写代码并测试,同时写完后可以用连接分享在博客里展示给大家.在国内也有个类似网站 <a href="http://code.hcharts.cn/blog-demo/OYZT3i/1" target="_blank" rel="noopener">HCODE</a></p>
<h2 id="简单讲解"><a href="#简单讲解" class="headerlink" title="简单讲解"></a>简单讲解</h2><p>  原有的标签顺序狠不好,JS文件在前显示结果在后.所以要改一下,把结果放在前面.<br>  <code>//jsfiddle.net/elick/s03Lk51x/embedded/result,js,html,css</code><br>  其实很简单,<code>embedded/</code>后面这个结构就是标签顺序.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/iamzhanglei/archive/2011/10/07/2199306.html" target="_blank" rel="noopener">CnBlogs博文demo演示技巧比较：jsfiddle完胜</a><br><a href="https://segmentfault.com/q/1010000000339531" target="_blank" rel="noopener">类似jsfiddle的网站还有哪些？</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[后台管理模版大搜集 都是前后分离的]]></title>
      <url>http://elickzhao.github.io/2016/07/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%A8%A1%E7%89%88%E5%A4%A7%E6%90%9C%E9%9B%86%20%E9%83%BD%E6%98%AF%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB%E7%9A%84/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/gismall/vue-kit" target="_blank" rel="noopener">Vue Start Kit:</a>  一个国内搞的用 Vue+Bulma UI 开发的后台模版.<del>不过我在本地测试时报错</del> 已经没问题了,必须用cnpm 安装node-sass才可以.<br><strong>Demo地址:</strong> <a href="http://vue-kit.gismall.com/" target="_blank" rel="noopener">http://vue-kit.gismall.com/</a><br><img src="https://github.com/gismall/vue-kit/raw/master/src/assets/img/screen-dashboard.png" alt=""></p>
<a id="more"></a>
<p><a href="https://github.com/misterGF/CoPilot" target="_blank" rel="noopener">CoPilot</a> 完全可用的后台UI 这个是利用了 - AdminLTE - BootStrap 3 - Vue.js 搭建的,功能很完备,以后有需要可以用这个试试.<br><strong>Demo地址:</strong> <a href="http://copilot.mistergf.io/" target="_blank" rel="noopener">http://copilot.mistergf.io/</a><br><img src="https://camo.githubusercontent.com/70a7a46cc0815b9f761f56efcfce0c2531d2576b/687474703a2f2f7265732e636c6f7564696e6172792e636f6d2f676174656332312f696d6167652f75706c6f61642f76313435393739393335302f73637265656e73686f745f74326b706f6c2e706e67" alt=""></p>
<p><a href="https://github.com/AlbertKellner/MaterializeTemplate" target="_blank" rel="noopener">MaterializeTemplate</a> 这个是google出的比较大气,而且挺炫的有3D效果 这个用<a href="http://www.materialscss.com/" target="_blank" rel="noopener">Materialize UI</a> 构建的后台模版.<strong>不过这个有个问题他好像用了墙外的文件 所以必须用chrome浏览器看才行</strong><br><img src="/image/16-7/3.png" alt=""></p>
<p><a href="https://github.com/720kb/hubuntu-ui" target="_blank" rel="noopener">hubuntu-ui</a> 这个也很好看 不过这只有一页测试. 功能没那么全. 这个也是拿<a href="http://www.materialscss.com/" target="_blank" rel="noopener">Materialize UI</a>做的<br><strong>Demo地址:</strong> <a href="https://720kb.github.io/hubuntu-ui/#" target="_blank" rel="noopener">https://720kb.github.io/hubuntu-ui/#</a><br><img src="/image/16-7/5.png" alt=""></p>
<p><a href="https://github.com/Copypeng/Semantic-Admin-Template" target="_blank" rel="noopener">Semantic-Admin-Template</a> 这是个产品后的后台,但全部是静态页,可以留着自己用php活vue做成动态的.  这个用的是 Semantic UI 一个比较潮流的UI 鲜艳活泼<br><img src="/image/16-7/2.png" alt=""></p>
<p><a href="https://github.com/gianmaster/idewall-admin" target="_blank" rel="noopener">idewall-admin</a> 这是laravel+vue+AdminLTE 构建的,不过好像缩放有点小问题.后面会接着测试<br><img src="/image/16-7/6.png" alt=""></p>
<p><a href="https://github.com/lazarohcm/MaterialAdmin" target="_blank" rel="noopener">MaterialAdmin</a> 这个就是个简单测试型后台.这个也是拿<a href="http://www.materialscss.com/" target="_blank" rel="noopener">Materialize UI</a>做的<br><img src="/image/16-7/4.png" alt=""></p>
<p><a href="https://github.com/sjerrys/vuetest" target="_blank" rel="noopener">触享:</a> 这个只能供学习之用,这个用的是vue-strap 也就是替换掉jq的bootstrap.<br><img src="/image/16-7/1.png" alt=""></p>
<hr>
<p>这两个使用<a href="http://ant.design/" target="_blank" rel="noopener">Ant.Design</a>构建的.只用作学习吧.因为都很简单<br><strong>react-antd-admin-master </strong> , <strong>www-nodejs-ant-design-web-master</strong><br>这俩就给Github连接了,全放在360文件夹里了,以及上面所有的</p>
<p><strong>360网盘地址:</strong><br><a href="https://yunpan.cn/c6KwNXGRyEW3U" target="_blank" rel="noopener">https://yunpan.cn/c6KwNXGRyEW3U </a>  <strong>访问密码:</strong> a995</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue 学习小例子]]></title>
      <url>http://elickzhao.github.io/2016/07/vue%20%E5%AD%A6%E4%B9%A0%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<h2 id="一些总结吧"><a href="#一些总结吧" class="headerlink" title="一些总结吧"></a>一些总结吧</h2><ul>
<li><p><strong>父组件和子组件之间通信用广播:</strong> vue可以用多种方法实现组件间沟通,比如用一个属性,<br>不过这必须用上同步 <code>:test.sync</code> 要不然子组件的状态父组件不知道.<br>但是这有个问题就是不利于解耦,捆绑太紧密了不能复用了,所以还是用广播.<br>不过还是有个小小的疑问,如果两个同名事件怎么办呢?? 按文档里说是第一个,那可能是父组件加载子组件的顺序吧<br>我想可能是这样的,如果存在同名的话,那就得手动调整顺序,我感觉最好不要同名.</p>
</li>
<li><p><strong>v-bind:fields=”columns” 绑定解释:</strong> 有时用简写就比较懵,简单记忆下: 如果原有属性就是绑定属性到vue属性.如果不是自带属性,那就是组件自定义的.比如 <code>:fields=&quot;columns&quot;</code> 这里就是一个. fields 子组件 : columns 父组件. 反正等号后面都是当前组件的.可以看下面例子.</p>
</li>
</ul>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定 attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定 class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; red: isRed &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, classB]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定 style --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: size + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定到一个对象 --&gt;</span> <span class="comment">&lt;!-- 这个怎么用不太了解 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">"&#123; id: someProp, 'other-attr': otherProp &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定，"prop" 必须在 my-component 组件内声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">"someThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 双向 prop 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop.sync</span>=<span class="string">"someThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单次 prop 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop.once</span>=<span class="string">"someThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>v-on:create-item=”createItem” 绑定事件监听器:</strong> 绑定默认动作,如果不是默认动作,就是自定义事件.<br><code>@create-item=&quot;createItem&quot;</code> 这样的写法是把动作绑定到一个方法里.<br>如果没有绑定,就需要把 <code>create-item</code>写在<code>events</code> 属性里了<br>详细看下面例子代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"doThat('hello', $event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 串联修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"onEnter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.13</span>=<span class="string">"onEnter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在子组件上监听自定义事件（当子组件触发 “my-event” 时将调用事件处理器）：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">"handleThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">"handleThis(123, $arguments)"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    store: store,</span><br><span class="line">    template: <span class="string">'&lt;App/&gt;'</span>, <span class="comment">//原来如此 这句相当于在 index.html里 #app容器里 添加了 组件&lt;App&gt;&lt;App/&gt; 就是下面那个</span></span><br><span class="line">    components: &#123;App&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>notepad<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span> <span class="attr">rel</span>=<span class="string">"SHORTCUT ICON"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;App&gt;&lt;/App&gt;  这个和main.js里的template作用是一样的 如果在new vue()的时候写 这样更简洁些 不过不利于阅读而已 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>this.dataList.$set($index, { … } 如何给数组修改数据:</strong><code>this.dataList[$index] = { ... }</code> 这么写可以 不过不能刷新页面.<br>所以要修改数组数据 就得这么写 <code>this.dataList.$set(index, { ... }</code><br>详细看下面例子详细代码</p>
</li>
<li><p><strong>this.item = this.dataList[index]:</strong> 这个真好不说,还不是十分明白.但是下面的例子确实是这样的.<br>如果赋值了 他们好像就是绑定了 因为在子组件修改时 父组件数据也同步变化了.根本不需要我再去写什么去修改这个dataList数组了.<br>详细看下面例子代码吧</p>
</li>
</ul>
<p><strong>例子:</strong></p>
<iframe width="80%" height="500" src="//jsfiddle.net/elick/s03Lk51x/2/embedded/result,js,html,css" frameborder="0"></iframe>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Atom 使用小技巧]]></title>
      <url>http://elickzhao.github.io/2016/07/Atom%20%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/Darren_code/p/atom.html" target="_blank" rel="noopener">Atom使用纪要</a><br><a href="http://www.iplaysoft.com/item/atom-shortcuts" target="_blank" rel="noopener">Atom 编辑器快捷键列表汇总整理</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux各个发行版简介]]></title>
      <url>http://elickzhao.github.io/2016/07/linux%E5%90%84%E4%B8%AA%E5%8F%91%E8%A1%8C%E7%89%88%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><strong>kali linux:</strong>  黑客专业系统 kali是基于Debian的Linux发行版， 设计用于数字取证和渗透测试 和 黑客攻防</p>
<blockquote>
<p>相关文档:<br><a href="http://www.kali.org.cn/forum.php?gid=67" target="_blank" rel="noopener">kali 中国论坛</a><br><a href="http://blog.chinaunix.net/uid-26349264-id-4041727.html" target="_blank" rel="noopener"> Kali Linux渗透测试实战 1.1 Kali Linux简介 </a><br><a href="http://www.2cto.com/Article/201304/200418.html" target="_blank" rel="noopener">Kali Linux 1.0 新手折腾笔记</a></p>
</blockquote>
<p><strong>Tiny Core linux:</strong> 最小的linux 最主要用于docker 现在服务器上也有人用了</p>
<blockquote>
<p>相关文档:<br><a href="http://server.zol.com.cn/189/1892853.html" target="_blank" rel="noopener">麻雀虽小五脏俱全 最小Linux系统试用</a></p>
</blockquote>
<p><strong>Elementary OS:</strong> 最美linux,这的确不假.虽然很多都是仿照苹果系统,不过的确比ubuntu好看又好用.</p>
<blockquote>
<p>相关文档:<br><a href="http://www.iplaysoft.com/elementary-os.html" target="_blank" rel="noopener">Elementary OS 中文版 - 号称最漂亮的 Linux 系统！基于 Ubuntu 的界面精美发行版</a><br><a href="http://tieba.baidu.com/f?kw=elementaryos&amp;fr=ala0&amp;tpl=5" target="_blank" rel="noopener">百度贴吧是个好去处</a></p>
</blockquote>
<p><strong>Tails:</strong>  保护隐私最好的版本</p>
<blockquote>
<p>相关文档:<br><a href="http://www.tuicool.com/articles/fEfU3q" target="_blank" rel="noopener">扫盲 Tails——专门强化隐匿性的 Linux 发行版</a><br><a href="http://www.csdn.net/article/2014-04-16/2819330" target="_blank" rel="noopener">Tails：专注于隐私保护的开源操作系统</a></p>
</blockquote>
<p><strong>RancherOS:</strong> 基于docker的linux发行版 处理内核以外全是docker运行的 所以也非常的小</p>
<blockquote>
<p>相关文档:<br><a href="http://www.open-open.com/lib/view/open1425256532072.html" target="_blank" rel="noopener">基于Docker的Linux发行版：RancherOS</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[svchost.exe占用cpu过高]]></title>
      <url>http://elickzhao.github.io/2016/07/svchost.exe%E5%8D%A0%E7%94%A8cpu%E8%BF%87%E9%AB%98/</url>
      <content type="html"><![CDATA[<p>今天发现cpu占用率一直很高,查看了进程发现是 svchost.exe 占用了太多的资源.<br>一顿百度,也没明确是那个问题.不过经过360打完补丁以后,恢复正常了,下次还出现这个问题,也可以这样解决试试</p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 隐藏下载地址]]></title>
      <url>http://elickzhao.github.io/2016/07/php%20%E9%9A%90%E8%97%8F%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<p>php下载时不想让别人看到真实的下载地址?怎样隐藏下载文件的真实地址?<br>首先要取得下载文件的URL，这里假设你通过PHP的操作取得文件的URL地址，变量为$URL<br>代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$file_size = filesize($url); </span><br><span class="line">header(<span class="string">"Content-type: application/octet-stream"</span>); </span><br><span class="line">header(<span class="string">"Accept-Ranges: bytes"</span>); </span><br><span class="line">header(<span class="string">"Accept-Length: $file_size"</span>);</span><br><span class="line">header(<span class="string">"Content-Disposition: attachment; filename="</span>.basename($url)); </span><br><span class="line">header(<span class="string">"location: $url"</span>);</span><br></pre></td></tr></table></figure>
<p>将上面代码加入PHP文件后，就可以隐藏真实的URL地址，当用户通过点击像<a href="http://localhost/soft.php?id=1这样的网址时，就可以下载了" target="_blank" rel="noopener">http://localhost/soft.php?id=1这样的网址时，就可以下载了</a></p>
<p>上面代码还有另一个功能，就是强制浏览器保存文件，而不是在浏览器当中打开文件。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.sina.com.cn/s/blog_8edc37a80101cz9v.html" target="_blank" rel="noopener">php,下载时不想让别人看到真实的下载地址?怎样隐藏下载文件的真实地址</a><br><a href="http://www.cnblogs.com/xcxc/archive/2013/03/04/2943124.html" target="_blank" rel="noopener">使用php隐藏下载文件的真实地址</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[非常火的js框架简介]]></title>
      <url>http://elickzhao.github.io/2016/07/%E9%9D%9E%E5%B8%B8%E7%81%AB%E7%9A%84js%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><strong>Vue.js:</strong> 轻量级js 数据驱动的组件，为现代化的 Web 界面而生.这类js框架都是应用比较大型功能类网站,有点类似webapp.或者单页面程序,比如我现在用的听歌浏览器插件. 他的做法是把某个功能开发成个组件,这个组件包括了模版,css,js,然后打包在一起.通过很多组件的组合,到达一个功能类网站,这样就非常的灵活了.这个主要针对pc端.</p>
<blockquote>
<p>参考文档<br><a href="http://cn.vuejs.org/" target="_blank" rel="noopener">官方网站</a><br><a href="http://cn.vuejs.org/guide/comparison.html" target="_blank" rel="noopener">对比其它框架</a><br><a href="http://www.csdn.net/article/1970-01-01/2825439" target="_blank" rel="noopener">Vue.js：轻量高效的前端组件化方案  *</a><br><a href="http://jiongks.name/blog/just-vue/?from=groupmessage&amp;isappinstalled=1" target="_blank" rel="noopener">Vue + webpack 项目实践</a><br><a href="http://jiongks.name/blog/vue-code-review/" target="_blank" rel="noopener">Vue.js 源码学习笔记</a><br><a href="http://www.vue-js.com/topic/577a07f6b883b03f4fe89da9" target="_blank" rel="noopener">同时使用reactjs+redux/vuejs+vuex/vuejs开发的卖座网，方便大家做技术选型</a><br><a href="http://www.vue-js.com/topic/56cfc64965cf1c422e006834" target="_blank" rel="noopener">vue.js 由浅至深学习宝典  *</a><br><a href="https://segmentfault.com/a/1190000004372736" target="_blank" rel="noopener">使用node+vue.js实现SPA应用,解决了SPA应用的最大缺点SEO</a></p>
</blockquote>
<p><strong>Vuex:</strong> 具体是做什么用的,现在还不是很了解.摘录别人一句话吧,<code>Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构</code>.总之是和vue.js十分密切的东西.</p>
<blockquote>
<p>参考文档<br><a href="https://segmentfault.com/a/1190000005863691" target="_blank" rel="noopener">使用 Vuex + Vue.js 构建单页应用 – *</a><br><a href="https://segmentfault.com/a/1190000004954409" target="_blank" rel="noopener">Vuex源码阅读笔记</a><br><a href="http://www.open-open.com/lib/view/open1462026719563.html" target="_blank" rel="noopener">Vuex + Firebase 构建 Notes App</a><br><a href="http://www.tuicool.com/articles/qUzMN3Y" target="_blank" rel="noopener">用 Vuex 构建一个笔记应用</a></p>
</blockquote>
<p><strong>Angular.js</strong> 这个不用多说了,现在最火的框架,不仅开发pc端也用来开发手机端.不过强大的功能,也带来很高的学习成本.</p>
<blockquote>
<p>参考文档<br><a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="noopener">AngularJS 教程</a><br><a href="http://www.apjs.net/" target="_blank" rel="noopener">中国官网</a><br><a href="http://www.angularjs.cn/A002" target="_blank" rel="noopener">AngularJS快速开始</a></p>
</blockquote>
<p><strong>React:</strong> 也是JavaScript MVC 框架，用于构建用户界面的JAVASCRIPT库–官方如此说主要用作Web App开发,不过因为小,貌似也用于手机程序开发,不过好像效果也不太好,以后有空再查查.</p>
<blockquote>
<p>参考文档<br><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React 入门实例教程</a><br><a href="http://www.cocoachina.com/webapp/20150721/12692.html" target="_blank" rel="noopener">一看就懂的ReactJs入门教程（精华版）</a><br><a href="http://react-china.org/" target="_blank" rel="noopener">React china</a><br><a href="http://reactjs.cn/react/docs/flux-overview.html" target="_blank" rel="noopener">Flux 这就像Vuex一样 就不另起一行了</a><br><a href="http://reactjs.cn/react/index.html" target="_blank" rel="noopener">中国官网</a></p>
</blockquote>
<p><strong>webix:</strong> 组件库 非常爽,不过好东西一般都收费 呵呵.<br><a href="http://www.csdn.net/article/2015-07-22/2825273-jinjiang-webix" target="_blank" rel="noopener">《近匠》Webix，跨浏览器的JavaScript UI组件库</a><br><a href="http://webix.com/" target="_blank" rel="noopener">官方网站</a></p>
<p><strong>Ember.js</strong> 大而全,受到vue作者称赞.不过速度也就显而易见了,而且学习成本也高.看来只能开发web app</p>
<blockquote>
<p>参考文档<br><a href="http://www.cnblogs.com/rush/archive/2013/04/29/3051191.html" target="_blank" rel="noopener">Ember.js的一些学习总结</a><br><a href="http://developer.51cto.com/art/201309/410154.htm" target="_blank" rel="noopener">Angular.js VS. Ember.js：谁将成为Web开发的新宠？</a></p>
</blockquote>
<p><strong>Backbone.js:</strong> 应该是比较老的一个JavaScript MVC 框架 现在好像没有那么火了.</p>
<blockquote>
<p>参考文档<br><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="noopener">中国官网</a></p>
</blockquote>
<p><strong>Meteor.js:</strong> 这个是完全脱离后台程序,基础构架是 Node.JS + MongoDB.但是他有个特点是用命令构建很多东西.但是实用性还是存疑.</p>
<blockquote>
<p>参考文档<br><a href="http://zh.discovermeteor.com/chapters/getting-started/" target="_blank" rel="noopener">Meteor 入门</a><br><a href="http://www.meteorhub.org/" target="_blank" rel="noopener">中文论坛</a><br><a href="http://36kr.com/p/99503.html" target="_blank" rel="noopener">Web开发者看过来，Meteor开发框架为你带来下一代高品质实时Web App开发的新模式</a></p>
</blockquote>
<p><strong>Aurelia:</strong> 新听说的 不太了解有什么优势</p>
<blockquote>
<p>参考文档<br><a href="http://www.oschina.net/p/aurelia" target="_blank" rel="noopener">Aurelia logoJavaScript 客户端框架 Aurelia</a><br><a href="http://www.zhihu.com/question/28735192?sort=created" target="_blank" rel="noopener">如何评价新出的Aurelia框架？</a></p>
</blockquote>
<p><strong>KnockoutJS</strong> 这个不怎么火 不过下面这个文章不错</p>
<blockquote>
<p>参考文档<br><a href="http://www.cnblogs.com/newton/p/3328058.html" target="_blank" rel="noopener">前端开发框架Bootstrap和KnockoutJS</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue.js开发扩展插件Vue.js devtools安装使用]]></title>
      <url>http://elickzhao.github.io/2016/07/vue.js%E5%BC%80%E5%8F%91%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6Vue.js%20devtools%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">仓库在这里</a></p>
<p>重要提示:</p>
<ul>
<li>一定要完整版,因为精简版会把开发部分去掉,所以不支持这个.</li>
<li>只支持chrome,所以去chrome商店去下载吧</li>
<li>安装完成后,必须进入chrome扩展工具选项里,找到vue-devtools把下面的 <code>允许访问文件网址</code> 勾选上</li>
<li>这样用<code>F12</code>打开开发工具栏,最后一项就能看到 <code>vue-devtools</code>的身影了.</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[替代cmd的程序cmder,Gow,PowerCMD,ConsoleZ等等]]></title>
      <url>http://elickzhao.github.io/2016/07/%E6%9B%BF%E4%BB%A3cmd%E7%9A%84%E7%A8%8B%E5%BA%8Fcmder,Gow,PowerCMD,ConsoleZ%E7%AD%89%E7%AD%89/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>windows的cmd真的很恶心,<del>今天突然发现一个替代他的好东西cmder.而且还模拟了一些linux命令真不错.</del>后来发现cmder也很一般,只是外观很好看.于是有找了几个</p>
<h2 id="Gow"><a href="#Gow" class="headerlink" title="Gow"></a>Gow</h2><p>Gow 另一个替代 Cygwin 毕竟Cygwin有点大.<br><a href="http://www.oschina.net/p/gow" target="_blank" rel="noopener">Cygwin的替代品 Gow</a></p>
<hr>
<h2 id="PowerCMD"><a href="#PowerCMD" class="headerlink" title="PowerCMD"></a>PowerCMD</h2><p>这个还没用过,不知道有没有linux命令.不过支持中文,而且功能还可以.</p>
<p><a href="http://www.cnblogs.com/xing901022/p/4286155.html" target="_blank" rel="noopener">PowerCMD——cmd的命令行工具</a></p>
<hr>
<h2 id="ConEmu"><a href="#ConEmu" class="headerlink" title="ConEmu"></a>ConEmu</h2><p>这个很朴实,跟cmd差不多太多,只是多了标签.没有其他的那么功能多,而且没有linux命令.<br><a href="http://www.oschina.net/p/conemu" target="_blank" rel="noopener">带标签的Windows终端 ConEmu</a></p>
<hr>
<h2 id="ConsoleZ"><a href="#ConsoleZ" class="headerlink" title="ConsoleZ"></a>ConsoleZ</h2><p>这个也很朴实,不过可以设置透明度的美化,支持中文.好像写错了功能很强大,只不过下面作者用的老版<br><a href="http://fy98.com/2014/10/18/the-best-ternimal-in-windows/" target="_blank" rel="noopener">windows下使用体验更好的控制台——ConsoleZ</a><br><a href="https://github.com/cbucher/console" target="_blank" rel="noopener">Github仓库</a></p>
<hr>
<h2 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h2><p>这个不好说是替代cmd,更像替代putty,SecureCRT和Xshell的,因为有各种连接服务的模式<br><a href="https://segmentfault.com/a/1190000000483148" target="_blank" rel="noopener">MobaXterm：“十项全能”的远程终端登录软件</a></p>
<h2 id="cmder"><a href="#cmder" class="headerlink" title="cmder"></a>cmder</h2><p>好吧可爱的墙,这是1.3.0版 如果级别低了 就再下吧<br><a href="https://yunpan.cn/cBtsI2Dbu8g5e" target="_blank" rel="noopener">360网盘 https://yunpan.cn/cBtsI2Dbu8g5e</a> 访问密码 dec9</p>
<p>算了新版本不支持中文还是用老版本吧.如果不合心就不用了,因为作者懒得支持中文.<br><a href="https://blog.phpgao.com/cmder.html" target="_blank" rel="noopener">windows下cmd的替换工具cmder</a></p>
<p>快捷键</p>
<blockquote>
<p>Tab manipulation<br>Ctrl + ` : Global Summon from taskbar<br>Win + Alt + p : Preferences (Or right click on title bar)<br>Ctrl + t : New tab dialog (maybe you want to open cmd as admin?)<br>Ctrl + w : Close tab<br>Shift + Alt + number : Fast new tab:</p>
<pre><code>1. CMD
2. PowerShell
</code></pre><p>Alt + Enter : Fullscreen</p>
<p>Shell<br>Shift + Up : Traverse up in directory structure (lovely feature!)<br>End, Home, Ctrl : Traverse text as usual on Windows<br>Ctrl + r : History search<br>Shift + mouse : Select and copy text from buffer<br>Right click / Ctrl + Shift + v : Paste text</p>
</blockquote>
<p><a href="http://cmder.net/" target="_blank" rel="noopener">官方网站</a><br><a href="http://blog.csdn.net/fbysss/article/details/41891837" target="_blank" rel="noopener">拥抱cmder，和cmd说再见</a></p>
<hr>
<h2 id="Color-Console"><a href="#Color-Console" class="headerlink" title="Color Console"></a>Color Console</h2><p>这个也是特别简朴的,只是颜色漂亮点<br><a href="http://www.appinn.com/color-console/" target="_blank" rel="noopener">Color Console – 增强版命令行提示符</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决老浏览器兼容问题]]></title>
      <url>http://elickzhao.github.io/2016/07/%E8%A7%A3%E5%86%B3%E8%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 现在框架都放弃了IE9以下的浏览器,不过中国的环境大家都知道的,没办法还是尽量满足吧.</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>禁用IE兼容模式</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p><strong>提示IE7及更早的用户</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--[if lt IE 8]&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class="alert alert-danger"&gt;您正在使用 &lt;strong&gt;过时的&lt;/strong&gt; 浏览器. 是时候 &lt;a href="http://browsehappy.com/"&gt;更换一个更好的浏览器&lt;/a&gt; 来提升用户体验.&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;![endif]--&gt;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p>
<p><strong>兼容IE8用户</strong></p>
<p>因为IE8及早期版本不支持HTML5标签，所以针对IE8浏览器，我们引入html5shiv来使得HTML5标签在IE8中也能使用。在HTML文档的script区域加入以下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="dist/lib/ieonly/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>因为IE8及早期版本同样不支持media query来实现响应式布局，我们同样可以通过条件注释引入respond.js来帮助ie实现该功能。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="dist/lib/ieonly/respond.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>因为IE8及早期版本不支持Canvas，如果你的产品用到ZUI中的 图表 视图，则需要引入 ExplorerCanvas 来支持绘图功能。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="dist/lib/ieonly/excanvas.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://zui.sexy/#basic/ie" target="_blank" rel="noopener">兼容浏览器</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js二维数组定义和初始化三种方法]]></title>
      <url>http://elickzhao.github.io/2016/07/js%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  js的数组和php有些不同,他的定义方法,自定义下标只有一种方法 <code>var arr[&#39;a&#39;] = 1</code>,不能像php一样 <code>$arr = [&#39;a&#39;=&gt;1]</code>,还有种没有下标的自定义方法 就是下面方法一那种方法</p>
<h2 id="方法一：直接定义并且初始化，这种遇到数量少的情况可以用"><a href="#方法一：直接定义并且初始化，这种遇到数量少的情况可以用" class="headerlink" title="方法一：直接定义并且初始化，这种遇到数量少的情况可以用"></a>方法一：直接定义并且初始化，这种遇到数量少的情况可以用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _TheArray = [[&quot;0-1&quot;,&quot;0-2&quot;],[&quot;1-1&quot;,&quot;1-2&quot;],[&quot;2-1&quot;,&quot;2-2&quot;]]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法二：未知长度的二维数组"><a href="#方法二：未知长度的二维数组" class="headerlink" title="方法二：未知长度的二维数组"></a>方法二：未知长度的二维数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tArray = <span class="keyword">new</span> <span class="built_in">Array</span>();   <span class="comment">//先声明一维</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;i;k++)&#123; <span class="comment">//一维长度为i,i为变量，可以根据实际情况改变</span></span><br><span class="line"> tArray[k]=<span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//声明二维，每一个一维数组里面的一个元素都是一个数组；</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;p;j++)&#123; <span class="comment">//一维数组里面每个元素数组可以包含的数量p，p也是一个变量；</span></span><br><span class="line">  tArray[k][j]=<span class="string">""</span>; <span class="comment">//这里将变量初始化，我这边统一初始化为空，后面在用所需的值覆盖里面的值</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给定义的数组传入所需的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tArray[<span class="number">6</span>][<span class="number">1</span>]=<span class="number">5</span>；<span class="comment">//这样就可以将5的值传入到数组中，覆盖初始化的空</span></span><br></pre></td></tr></table></figure></p>
<h2 id="方法三：在这之前，以上两者方法都有问题，方法二，每次定义都初始化了，虽然后面可以动态修改，但是还是不方法"><a href="#方法三：在这之前，以上两者方法都有问题，方法二，每次定义都初始化了，虽然后面可以动态修改，但是还是不方法" class="headerlink" title="方法三：在这之前，以上两者方法都有问题，方法二，每次定义都初始化了，虽然后面可以动态修改，但是还是不方法"></a>方法三：在这之前，以上两者方法都有问题，方法二，每次定义都初始化了，虽然后面可以动态修改，但是还是不方法</h2><p>所以我尝试了一种动态传入值到数组的方法</p>
<p>ps:一些在实践过程中遇到的数组有趣的现象<br>本来以为二维数组可以像下面这样直接传入值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;i;a++)&#123;</span><br><span class="line">tArray[a]=(matArray[a],addArray[a]); <span class="comment">//matArray[a]和addArray[a]是两个数组，这两个数组直接传入tArray[a]中</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>结果是tArray[a]中收到的是后面一个数组的值，matArray[a]的内容被忽略的，如果换一个位置，matArray[a]在后面，则传入的是addArray[a]的值。</p>
<p><strong>思考：简单的例子：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> b=[];</span><br><span class="line">b[<span class="number">0</span>]=a;<span class="comment">//把数组a作为b数组的元素传入b数组中</span></span><br><span class="line">alert(b[<span class="number">0</span>][<span class="number">1</span>]);  <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<p>上面是最简单的二维数组，<br>上面例子换种写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=[];</span><br><span class="line">b[<span class="number">0</span>]=[<span class="number">1</span>,<span class="number">2</span>];<span class="comment">//把数组[1,2]作为b数组的元素传入b数组中</span></span><br><span class="line">alert(b[<span class="number">0</span>][<span class="number">1</span>]);  <span class="comment">//2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//可以看出上面的b[0]=[1,2]是可以用的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;i;a++)&#123;</span><br><span class="line">tArray[a]=[ matArray[a],addArray[a] ];  上面例子中的（）修改为[] 就可以成功的组成一个二维数组了</span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">## 总结：方法三：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;i;a++)&#123;</span><br><span class="line">tArray[a]=[ aArray[a],bArray[a],cArray[a]]; 还可以增加dArray[a],eArray[a]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这种情况适用于已知几个数组，把他们组合成一个二维数组情况</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel Middleware中间件解析]]></title>
      <url>http://elickzhao.github.io/2016/07/laravel%20Middleware%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><code>:</code>分割 要传递给中间件的参数,多个参数用<code>,</code>分割</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS的float正确理解及overflowhidden 属性详细解释]]></title>
      <url>http://elickzhao.github.io/2016/07/CSS%E7%9A%84float%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3%E5%8F%8Aoverflowhidden%20%E5%B1%9E%E6%80%A7%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p><strong>float</strong><br>原来一直以为float是平面的,浮动就是左右偏移在平面上运动,其实是错的,浮动是立体的,<br>记得用火狐浏览器的debug工具,有一项就是能看到立体的样子.<br>所以当设置浮动后,这个层的宽高就不在瘦父层级的限制了,因为他是立体的,他实际是飘在父层级上.<br>所以需要清浮动才可以让他继续接受父层级的控制,这里就需要<code>overflow:hidden</code></p>
<p><strong>overflow:hidden</strong><br>所以说 <code>overflow:hidden</code> 并不是我们原以为的简单只是把多出的内容隐藏,他还有个引申的功能就是清理浮动<br>所以当你使用float的时候一定要加上这个,要不然容易造成margin的偏移,或者使用padding解决这个问题.或者是子层级不受控制超出了父层级.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://jingyan.baidu.com/article/d45ad148e2a7f969552b80ae.html" target="_blank" rel="noopener">CSS 的overflow:hidden 属性详细解释</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js一些隐式写法 !0 !!0 viod 0]]></title>
      <url>http://elickzhao.github.io/2016/07/js%E4%B8%80%E4%BA%9B%E9%9A%90%E5%BC%8F%E5%86%99%E6%B3%95%20!0%20!!0%20viod%200/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看别人的框架遇到一些别人的写法,虽然很直白,但是以前没遇到过,还是有点懵.<br>不知道这种写法是遵从那那些编写规则,反正记录一下已被后面查找.</p>
<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其实这个很直白了 因为一般bool值 表示 ture 为 1 false 为 0</span></span><br><span class="line">!<span class="number">0</span> == <span class="literal">true</span> </span><br><span class="line">!!<span class="number">0</span> == <span class="literal">false</span> </span><br><span class="line"><span class="comment">//但是 !0 === true 这是错的 恒等于 是不会转义类型的 所以 0 还是 int 型  所以不能与 bool 型相等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这些都是同理了</span></span><br><span class="line">!<span class="number">1</span> == <span class="literal">false</span></span><br><span class="line">!!<span class="number">1</span> == <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是设置 a 为 undefined , 如果用字符串代替会存在浏览器兼容问题</span></span><br><span class="line"><span class="comment">//也可以在 return 时使用,表示返回空,只是执行操作.</span></span><br><span class="line"><span class="comment">//具体看下面参考文档</span></span><br><span class="line"><span class="keyword">var</span> a = viod <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://zhidao.baidu.com/link?url=LEMJPUPH3jrLaTXRkd299zpM2eo7zJmw3LfJxfM4wZNooN1jSU4NkOe3MyFljA8DrvkdgnApOR325XNOW2rugn8w7wIfjuCR9EN0E8kgyfS" target="_blank" rel="noopener">在js中，为什么!0是true，!!0是false，!1是false，!!1是true，!-1是false，!!-1是true</a><br><a href="http://elickzhao.github.io/2016/06/JS%20void%200%20%E8%A7%A3%E6%9E%90/">JS void 0 解析</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[margin-top失效的解决]]></title>
      <url>http://elickzhao.github.io/2016/06/margin-top%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天遇到个很bug的问题.在chrome里当窗口很小的时候,一个div就会偏移,但是当用鼠标调正窗口,又会变好.而且只有在chrome下有这个问题,最后确认原来是margin-top失效的原因.<strong>再次说明:</strong> 上面那个问题,并没有因使用<code>overflow:hiden</code>而解决.只是放在火狐里这个bug不存在了.后来是通过删除了子容器的 <code>float:left</code> 解决的.但到底是哪里冲突还是不明白.但下面这些方法解决一些浮动漂移是有用的.</p>
<h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><p>正统说法:</p>
<blockquote>
<p>1：“在CSS2.1中，水平的margin不会被折叠；垂直margin可能在一些盒模型中被折叠…”<br>2： 当第一个层浮动，而第二个没浮动层的margin会被压缩，详见–浮动元素后非浮动元素的margin的处理。</p>
</blockquote>
<p>一 如果是两个容器并列,一般出现问题,是因为第一个容器加了浮动,第二个没有加 所以造成第二个margin出问题.解决办法是在第二个容器前增加一个<code>&lt;divstyle=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code>.像下面这样,或者给box2也增加float;</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color: red;"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"float:left;background-color: olive"</span>&gt;</span>dddd<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> <span class="attr">style</span>=<span class="string">"clear:both;margin-top:20px; background-color: rosybrown;"</span>&gt;</span>eeee<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>二 还有一种情况是因为父容器而导致偏移,比如我遇到这个,我最后就是加了个<code>overflow:hidden;</code>.解决办法有一下三种:</p>
<ol>
<li>给父容器box加overflow:hidden;属性</li>
<li>父容器box加border除none以外的属性</li>
<li>用父容器box的padding-top代替margin-top</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://bbs.blueidea.com/thread-2884956-1-1.html" target="_blank" rel="noopener"> margin-top在chrome中的问题</a><br><a href="http://developer.51cto.com/art/201009/225816.htm" target="_blank" rel="noopener">CSS中margin-top属性失效问题解决</a><br><a href="http://jingyan.baidu.com/article/d45ad148e2a7f969552b80ae.html" target="_blank" rel="noopener">CSS 的overflow:hidden 属性详细解释</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[说明 -- RESTful架构]]></title>
      <url>http://elickzhao.github.io/2016/06/%E8%AF%B4%E6%98%8E%20RESTful%E6%9E%B6%E6%9E%84%20/</url>
      <content type="html"><![CDATA[<p>简单来讲　就是用 http 各种动作来实现 应用分类<br>书面点就是这个</p>
<blockquote>
<p>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。<br>具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p>
</blockquote>
<p>一般情况下 URI 应为名词  但我理解为了清楚表示 其实动词也无所谓 这点没那么重要 laravel 就也使用了动词</p>
<p><a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="noopener">详解 :　http://www.ruanyifeng.com/blog/2011/09/restful</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery增加css样式]]></title>
      <url>http://elickzhao.github.io/2016/06/jquery%E5%A2%9E%E5%8A%A0css%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天脑袋陷入了打结中,jquery改变样式.遇到一个什么情况,css是个元素样式,不是针对具体的某个类,并且后添加的样式,通过jquery无法找到,所以想改这个样式特别麻烦.</p>
<h2 id="解决与思考"><a href="#解决与思考" class="headerlink" title="解决与思考"></a>解决与思考</h2><p>  jquery只能选定出现在DOM上的元素来更改他的css样式.为什么这么说呢,css的写法是这样的,一般先是定义一个根类,然后在子类再去分别定义特殊属性.如果这样的话,jquery能选择操作子类的样式,却无法操作根类.这种情况很诡异,应该也不常见吧.例如下面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">我遇到的就是这个问题, jquery能操作pre_id这个具体的pre的css,却无法操作上面那个css,</span></span><br><span class="line"><span class="comment">但是这个css,还是影响了后面动态生成的pre,而且jquery没法获得后添加的这个pre也是麻烦事,</span></span><br><span class="line"><span class="comment">要不也可以改变后添加这个pre的也能解决</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.edit_body</span> <span class="selector-class">.tabs</span> <span class="selector-tag">pre</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#pre_id</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>最后的解决办法:</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用jquery添加一段样式到html,然后去覆盖根样式.</span></span><br><span class="line">$(<span class="string">'&lt;style&gt;'</span>).html(<span class="string">'.edit_body .tabs pre&#123;display:block;&#125;'</span>).appendTo($(<span class="string">'.edit_body .tabs pre'</span>));</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://zhidao.baidu.com/link?url=jrf6HyGEdwYXPB9v7JIZBMdzwh6bEPkwSeeR1A33JN5rsgQ_2fltLx0getjDDFfEfjHu9dnwz6enBcDXkFKYja" target="_blank" rel="noopener">jquery如何创建style</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js截取字符串到最后几位]]></title>
      <url>http://elickzhao.github.io/2016/06/js%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0%E6%9C%80%E5%90%8E%E5%87%A0%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>这里唯一要点是 substr() 是截取字符串,不过和php不同的是 第二个参数不能为负数,也就是不能倒着数.<br>所以只能用字符串长度减去要减掉的长度,得到截取的位置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="string">'F:\phpStudy\WWW\kod\static\js\lib\editormd\css'</span>;</span><br><span class="line">uri.substr(<span class="number">0</span>,(uri.length<span class="number">-11</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 个人安装软件 全局命令]]></title>
      <url>http://elickzhao.github.io/2016/06/ubuntu%20%E4%B8%AA%E4%BA%BA%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%20%E5%85%A8%E5%B1%80%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  自己装了一个sublime text ,但是不能用命令行打开,所以才想起如何做.</p>
<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>  因为linux发行版本关系,每个版本软件安装位置都不是固定的,这点比windows差了点.想找到apt-get安装真的有点费劲,这个我还没找到.但是启动命令我找到了,在ubuntu下启动命令安装在 <code>/usr/bin</code> 下面. 例如我想用的sublime text,他就是 <code>/usr/bin/subl</code>  然后在把这个 拷贝到 <code>/usr/sbin</code> 下就可以是全局命令了.<br><code>cp /usr/bin/subl /usr/sbin</code>  </p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaSript模块规范 AMD规范与CMD规范介绍]]></title>
      <url>http://elickzhao.github.io/2016/06/JavaSript%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%20%20AMD%E8%A7%84%E8%8C%83%E4%B8%8ECMD%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D%20/</url>
      <content type="html"><![CDATA[<blockquote>
<p>结合一些第三方模块构建工具，如CommonJS、RequireJS或者SeaJs，可以轻松实现代码的模块化。</p>
</blockquote>
<p>也就是说 这三个工具是组合各个组件的工具,最后打包成最后代码</p>
<p><strong>CommonJS 规范:</strong> 是同步加载模块<br><strong>AMD 规范:</strong> AMD（异步模块定义）是为浏览器环境设计的，因为 CommonJS 模块系统是同步加载的，当前浏览器环境还没有准备好同步加载模块的条件。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> <a href="http://blog.chinaunix.net/uid-26672038-id-4112229.html" target="_blank" rel="noopener">JavaSript模块规范 - AMD规范与CMD规范介绍</a><br> 这篇文章特别好,内容很详细,文章也比较大,我就不转过来了,想看的时候直接连接过去看一下吧.</p>
<p> <a href="http://webpackdoc.com/commonjs.html" target="_blank" rel="noopener">AMD,CommonJS解释</a><br> 还有这个解释<br> <a href="http://webpackdoc.com/module-system.html" target="_blank" rel="noopener">http://webpackdoc.com/module-system.html</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS void 0 解析]]></title>
      <url>http://elickzhao.github.io/2016/06/JS%20void%200%20%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在修改kod时遇到这个,不太了解作用于是查了下资料,详细看这里 <a href="http://www.cnblogs.com/fsjohnhuang/p/4146506.html" target="_blank" rel="noopener">JS魔法堂：从void 0 === undefined说起</a></p>
<h2 id="简单说下"><a href="#简单说下" class="headerlink" title="简单说下"></a>简单说下</h2><p>  在js函数里 <code>return void 0</code> 表示此函数无返回.<br>  还有就是 undefined在JavaScript中并不属于保留字/关键字，因此在IE5.5~8中我们可以将其当作变量那样对其赋值（IE9+及其他现代浏览器中赋值给undefined将无效）<br>  所以说用 void 赋值更为正规一些.</p>
<p>  void的行为特点为：</p>
<p>　　1. 不管void后的运算数是什么，只管返回纯正的undefined；</p>
<p>　　2. void会对其后的运算数作取值操作，因此若属性有个getter函数，那么就会调用getter函数（因此会产生副作用）</p>
<p>  更多具体内容看上面文章吧.
　　</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript中的逗号]]></title>
      <url>http://elickzhao.github.io/2016/06/JavaScript%E4%B8%AD%E7%9A%84%E9%80%97%E5%8F%B7/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  开发时突然遇到js语句里很多逗号,一下子搞蒙了.才想起来,没有仔细研究过这个东西.</p>
<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><blockquote>
<p>直白的说,没有return时,返回最左边结果,有return时返回最右边结果,当return最后一个参数为void 0,将只执行操作无返回</p>
</blockquote>
<p>《javascript权威指南(6版)》说逗号运算符（,）：先计算左边的操作数，然后计算右边的操作数，最后返回右操作数的值。<br>比如 var a=(1+1,2+2,3+3); 结果是6。<br>可是当逗号出现在其他的地方，好像就不是先算左边的，再算右边的，返回右边的了。<br>比如函数调用中，Math.max(x,y,z)。这里的逗号就是分隔函数参数。<br>还有声明变量时，var a=1,b=2,c=3。这里的逗号也是起分隔的作用。<br>请教各位逗号“,”应该怎么去理解？难道是依据逗号使用环境而定？<br>谢谢各位，求解惑，逗号让我感觉很晕。<br>网上找的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">2</span>*<span class="number">5</span>, <span class="number">2</span>*<span class="number">4</span>)     <span class="comment">//输出10而不是8  函数接收第一个参数,也说明逗号级别比较低</span></span><br><span class="line">alert((<span class="number">2</span>*<span class="number">5</span>, <span class="number">2</span>*<span class="number">4</span>));  <span class="comment">// 输出8  ()是返回了,相当于隐藏了return 所以返回最右边操作数的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CommaTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a++, b++, <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = CommaTest();</span><br><span class="line">alert(c); 返回<span class="number">10</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//这里顺便再提下 void 0 如果想要无返回值,只进行操作.那么这么写 return a++, b++, 10, void 0;</span></span><br><span class="line"><span class="string">//这样将返回空</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/wl110231/article/details/8162732" target="_blank" rel="noopener">http://blog.csdn.net/wl110231/article/details/8162732</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 重载相关魔法函数 __get()，__set()，__isset() , __unset()  __call() __callStatic]]></title>
      <url>http://elickzhao.github.io/2016/06/php%20%E9%87%8D%E8%BD%BD%E7%9B%B8%E5%85%B3%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0%20__get()%EF%BC%8C__set()%EF%BC%8C__isset()%20,%20__unset()%20%20__call()%20__callStatic/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  从这里开始<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $parameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//这里注意 $this-&gt;guard() 返回的是个实例,call_user_func_array()第一个参数如果是类,</span></span><br><span class="line">    <span class="comment">//则需要数组第一个是类的实例变量</span></span><br><span class="line">    <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>-&gt;guard(), $method], $parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><blockquote>
<p>PHP所提供的”重载”（overloading）是指动态地”创建”类属性和方法。我们是通过魔术方法（magic methods）来实现的。</p>
</blockquote>
<p>属性重载:  <code>__get() __set() __isset()   __unset()</code><br>类重载: <code>__call() __callStatic</code></p>
<p><strong>属性重载使用如下</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyTest</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**  被重载的数据保存在此  */</span></span><br><span class="line">    <span class="keyword">private</span> $data = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**  重载不能被用在已经定义的属性  */</span></span><br><span class="line">    <span class="keyword">public</span> $declared = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**  只有从类外部访问这个属性时，重载才会发生 */</span></span><br><span class="line">    <span class="keyword">private</span> $hidden = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name, $value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Setting '$name' to '$value'\n"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[$name] = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Getting '$name'\n"</span>;</span><br><span class="line">        <span class="keyword">if</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $trace = debug_backtrace();</span><br><span class="line">        trigger_error(</span><br><span class="line">            <span class="string">'Undefined property via __get(): '</span> . $name .</span><br><span class="line">            <span class="string">' in '</span> . $trace[<span class="number">0</span>][<span class="string">'file'</span>] .</span><br><span class="line">            <span class="string">' on line '</span> . $trace[<span class="number">0</span>][<span class="string">'line'</span>],</span><br><span class="line">            E_USER_NOTICE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  PHP 5.1.0之后版本 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span><span class="params">($name)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Is '$name' set?\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[$name]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  PHP 5.1.0之后版本 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span><span class="params">($name)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Unsetting '$name'\n"</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;data[$name]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  非魔术方法  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHidden</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> PropertyTest;</span><br><span class="line"></span><br><span class="line">$obj-&gt;a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;a . <span class="string">"\n\n"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="keyword">isset</span>($obj-&gt;a));</span><br><span class="line"><span class="keyword">unset</span>($obj-&gt;a);</span><br><span class="line">var_dump(<span class="keyword">isset</span>($obj-&gt;a));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;declared . <span class="string">"\n\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Let's experiment with the private property named 'hidden':\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Privates are visible inside the class, so __get() not used...\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;getHidden() . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Privates not visible outside of class, so __get() is used...\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;hidden . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$obj-&gt;hidden=<span class="number">333</span>;       <span class="comment">//这里需要注意下,设置的并不是属性hidden,所以得到也并不是.</span></span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;hidden . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;getHidden() . <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">## 输出结果如下</span><br><span class="line"></span><br><span class="line">Setting &apos;a&apos; to &apos;1&apos;</span><br><span class="line">Getting &apos;a&apos;</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Is &apos;a&apos; set?</span><br><span class="line">bool(true)</span><br><span class="line">Unsetting &apos;a&apos;</span><br><span class="line">Is &apos;a&apos; set?</span><br><span class="line">bool(false)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Let&apos;s experiment with the private property named &apos;hidden&apos;:</span><br><span class="line">Privates are visible inside the class, so __get() not used...</span><br><span class="line">2</span><br><span class="line">Privates not visible outside of class, so __get() is used...</span><br><span class="line">Getting &apos;hidden&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice:  Undefined property via __get(): hidden in F:\phpStudy\WWW\kod\data\public\test\1.php on line 134 in F:\phpStudy\WWW\kod\data\public\test\1.php on line 90</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Setting &apos;hidden&apos; to &apos;333&apos;</span><br><span class="line">Getting &apos;hidden&apos;</span><br><span class="line">333</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong>方法重载使用如下</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小例子</span></span><br><span class="line"><span class="comment">//获得每个城市天气预报</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tj</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'tj天气预报&lt;br/&gt;'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$m 方法名</span></span><br><span class="line"><span class="comment">$p 方法参数集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($m,$p)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> $m,<span class="string">'天气预报&lt;br/&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c=<span class="keyword">new</span> Action();</span><br><span class="line">$c-&gt;tj();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得城市</span></span><br><span class="line">$city=$_GET[<span class="string">'method'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($city))&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得城市的方法，由魔术方法__call处理</span></span><br><span class="line">$c-&gt;$city();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">网址:http://localhost/php/60.php?method=beijing</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">tj天气预报</span></span><br><span class="line"><span class="comment">beijing天气预报</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 注意: $name 的值区分大小写</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Calling object method '$name' "</span></span><br><span class="line">             . implode(<span class="string">', '</span>, $arguments). <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  PHP 5.3.0之后版本  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $arguments)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 注意: $name 的值区分大小写</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Calling static method '$name' "</span></span><br><span class="line">             . implode(<span class="string">', '</span>, $arguments). <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> MethodTest;</span><br><span class="line"><span class="comment">//runTest方法不存在</span></span><br><span class="line">$obj-&gt;runTest(<span class="string">'in object context'</span>);</span><br><span class="line"></span><br><span class="line">MethodTest::runTest(<span class="string">'in static context'</span>);  <span class="comment">// PHP 5.3.0之后版本</span></span><br><span class="line">-----</span><br><span class="line"><span class="comment">//输出如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Calling object method 'runTest' in object context</span></span><br><span class="line"><span class="comment">Calling static method 'runTest' in static context</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>过载实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magic</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name,$arguments)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($name==<span class="string">'foo'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_int($arguments[<span class="number">0</span>])) <span class="keyword">$this</span>-&gt;foo_for_int($arguments[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(is_string($arguments[<span class="number">0</span>])) <span class="keyword">$this</span>-&gt;foo_for_string($arguments[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">foo_for_int</span><span class="params">($x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"oh an int!"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">foo_for_string</span><span class="params">($x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"oh a string!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line">$x = <span class="keyword">new</span> Magic();</span><br><span class="line">$x-&gt;foo(<span class="number">3</span>);</span><br><span class="line">$x-&gt;foo(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"><span class="comment">//输出如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">oh an int!</span></span><br><span class="line"><span class="comment">oh a string!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://php.net/manual/zh/language.oop5.overloading.php#object.call" target="_blank" rel="noopener">官方文档</a><br><a href="http://blog.csdn.net/binghui1990/article/details/9104685" target="_blank" rel="noopener">PHP魔术方法之<strong>call与</strong>callStatic方法</a><br><a href="http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/09/22/2185032.html" target="_blank" rel="noopener">PHP5学习笔记：用__call()实现方法重载</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 扩展模块 phpize 解释]]></title>
      <url>http://elickzhao.github.io/2016/06/PHP%20%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97%20phpize%20%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  phpize是什么？<br>phpize是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块<br>比如你想在原来编译好的php中加入memcached或者ImageMagick等扩展模块，可以使用phpizen<br>  安装PHP的模块一个方式是加上相关参数重新编译PHP一个是用到phpize,比如eaccelerator，memcache等，这个比较方便，不用重新编译PHP，也可以随时启用或停用<br>  phpize是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块.</p>
<a id="more"></a>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>Linux下利用phpize安装php扩展</p>
<p>php有很多扩展功能，我们在初次安装的时候并没有安装某些扩展，可能在使用的过程中，又需要用到这些扩展。php提供了一个phpize工具供我们安装需要的扩展。 </p>
<p>下面我通过安装socket扩展来介绍phpize的使用： </p>
<p>1.找到自己的php安装目录，例如我的目录是<code>home/vsrank/php</code>，在该目录下，找到<code>bin/phpize</code>。如果没有这个工具，则说明没有安装该工具，那么需要安装php.dev，一般都会有这个工具。 </p>
<p>2.要扩展的话，就需要有一个和当前已安装的php的版本一样的php的源包，当前php版本可以用过phpinfo()查看。就是初次安装后查看安装是否成功的那个test.php。 </p>
<p>3.打开源包目录，进入到ext目录，例如我就进入到：<code>/home/vsrank/php-5.3.10/ext</code>下，ext下有各个php带有的扩展模块，进入到<code>ext/sockets</code>中。 </p>
<p>4.cd到ext/sockets后，执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/vsrank/php/bin/phpize</span><br></pre></td></tr></table></figure></p>
<p>即执行phpize工具，执行后，可以看到目录下生成了对应的configure文件： </p>
<p>5.现在就可以通过configure来配置，执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-sockets --with-php-config=/home/vsrank/php/bin/php-config</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make  </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>执行之后，可以看到下面的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installing shared extensions:     /home/vsrank/php/lib/php/extensions/no-debug-non-zts-20090626/  </span><br><span class="line">Installing header files:          /home/vsrank/php/include/php/</span><br></pre></td></tr></table></figure></p>
<p>第一个就是扩展模块的生成目录，可以在对应目录下看到对应的sockets.so文件。 </p>
<p>6.更改php.ini，增加下面的语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=&quot;/home/vsrank/php/lib/php/extensions/no-debug-non-zts-20090626/sockets.so&quot;</span><br></pre></td></tr></table></figure></p>
<p>可以看到和上面的输出是一致的。 </p>
<p>7.重启Apache，接下来就可以看看自己的socket是不是配置好了。。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.51yip.com/php/177.html" target="_blank" rel="noopener">phpize增加php模块</a><br><a href="http://www.jb51.net/article/37741.htm" target="_blank" rel="noopener">phpize的深入理解</a><br><a href="http://www.jb51.net/article/46706.htm" target="_blank" rel="noopener">php教程之phpize使用方法</a><br><a href="http://my.oschina.net/junn/blog/158684" target="_blank" rel="noopener">linux下用phpize给PHP动态添加扩展</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 扩展模块 POSIX 和 PCNTL]]></title>
      <url>http://elickzhao.github.io/2016/06/PHP%20%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97%20POSIX%20%E5%92%8C%20PCNTL/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  这两个模块附带函数都是对多进程任务开的. 而且这两个模块好像只能在linux下安装,windows下是不支持的.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.jb51.net/article/37748.htm" target="_blank" rel="noopener">php的POSIX 函数以及进程测试的深入分析</a><br><a href="http://blog.sina.com.cn/s/blog_541a3cf10101h3el.html" target="_blank" rel="noopener">centos安装php-posix</a><br><a href="http://php.net/manual/zh/book.posix.php" target="_blank" rel="noopener">POSIX 官方文档</a></p>
<p><a href="http://www.cnblogs.com/yjf512/p/3217615.html" target="_blank" rel="noopener">PHP的pcntl多进程</a><br><a href="http://blog.csdn.net/huyanping/article/details/18280839" target="_blank" rel="noopener">基于PCNTL的PHP并发编程</a><br><a href="http://php.net/manual/zh/book.pcntl.php" target="_blank" rel="noopener">进程控制 官方文档</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 扩展模块 PECL 解释]]></title>
      <url>http://elickzhao.github.io/2016/06/PHP%20%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97%20PECL%20%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PECL 的全称是 The PHP Extension Community Library ，是一个开放的并通过 PEAR(PHP Extension and Application Repository，PHP 扩展和应用仓库)打包格式来打包安装的 PHP 扩展库仓库。通过 PEAR 的 Package Manager 的安装管理方式，可以对 PECL 模块进行下载和安装。与以往的多数 PEAR 包不同的是，PECL 扩展包含的是可以编译进 PHP Core 的 C 语言代码，因此可以将 PECL 扩展库编译成为可动态加载的 .so 共享库，或者采用静态编译方式与 PHP 源代码编译为一体的方法进行扩展。PECL 扩展库包含了对于 XML 解析，数据库访问，邮件解析，嵌入式的 Perl 以及 Pthyon 脚本解释器等诸多的 PHP 扩展模块，因此从某种意义上来说，在运行效率上 PECL 要高于以往诸多的 PEAR 扩展库</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://baike.baidu.com/link?url=lISvzx5m1oH0AyzFBM-QQ145DmViNDIKVA_cTzM1pzJL91cuXcis9_uTuqeQmbIFwD4tSN61KpPgMYNfwqFA_ZlUTjWady8BMDDJa2Loreu" target="_blank" rel="noopener">PECL （PHP 扩展模块） 百度百科</a></p>
<p><a href="http://php.net/manual/zh/install.pecl.php" target="_blank" rel="noopener">PECL 扩展库安装 官方文档</a></p>
<p><a href="http://pecl.php.net/" target="_blank" rel="noopener">PECL项目主页</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phpstudy 建立本地测试网站]]></title>
      <url>http://elickzhao.github.io/2016/06/phpstudy%20%E5%BB%BA%E7%AB%8B%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<p>拿phpstudy建立本地域名很简单</p>
<ul>
<li><p>打开 <figure class="highlight plain"><figcaption><span>-> ```打开hosts```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 把要写的域名填写进去 比如 **127.0.0.1 laravel.cc**</span><br><span class="line">- 然后打开 ```其他选项菜单``` -&gt; ```站点域名管理</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>添加 刚才的域名 <strong>laravel.cc</strong> 并指定目录  这样就ok了</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> phpstudy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phpstudy 2016配置]]></title>
      <url>http://elickzhao.github.io/2016/06/phpstudy%202016%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>因为这版更新了php7 所以需要VC10和VC14 这个百度查下载就可以了 但要记住一定要X86的 光装64位的是不好使的</p>
]]></content>
      
        
        <tags>
            
            <tag> phpstudy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel Event事件解析]]></title>
      <url>http://elickzhao.github.io/2016/06/laravel%20Event%E4%BA%8B%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  Event事件总是晕晕的,反复看了几遍,终于纠正了我的惯性思维,我一直认为监听类是起到监听作用.其实错了,事件类是相当于触发,监听某个动作.而监听类是响应这个动作的具体操作.从另一个方面讲,监听类其实监听的是事件类的触发.这下就清晰点了.下面把整个事件所需要的文件都简单说明下.</p>
<h2 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h2><p><strong>laravel事件的主要文件</strong></p>
<ol>
<li>Event.php (创建事件类,这个文件最主要的作用就是注入,其他的功能暂时没发现)</li>
<li>Listener.php (创建监听类,这个文件的主要作用就是响应事件类,当事件触发了进行响应操作)</li>
<li>EventServiceProvider.php (关联事件与监听的文件)</li>
</ol>
<a id="more"></a>
<p><img src="/image/16-6/4.svg" alt=""></p>
<p><strong>编写事件流程</strong></p>
<ol>
<li>注册事件-监听器 (也就是在EventServiceProvider里关联相关事件类和监听类)</li>
<li>用php artisan event:generate 生成事件类文件和监听类文件</li>
<li>定义事件类</li>
<li>定义监听器类</li>
<li>触发事件<br>详细看下面的文档</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://laravelacademy.org/post/1889.html" target="_blank" rel="noopener">Laravel 5.1 定义事件、事件监听器以及触发事件实例教程</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VirtualBox虚拟机 修改分辨率]]></title>
      <url>http://elickzhao.github.io/2016/06/VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%20%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  最近搞一个多人视频系统,需要用到php的多进程模块,所以搞了一个linux虚拟机,装的是号称最美linux的Elementary OS,不过VirtualBox的分辨率真让人头疼,以前只用命令行也就不在乎了,这么漂亮的桌面就那么一小块就不爽了,于是开始调整分辨率.</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol>
<li>首先安装增强功能<br><img src="/image/16-6/1.png" alt=""></li>
<li>VirtualBox会挂载一个光盘,进入linux找到光盘位置.执行sudo sh VBboxLinuxAdditions.run 即可<br><img src="/image/16-6/2.png" alt=""></li>
<li>调整分辨率<br><img src="/image/16-6/3.png" alt=""></li>
</ol>
<p>详细可看下面文章.</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/yasi_xi/article/details/42388119" target="_blank" rel="noopener">VirtualBox虚拟机 Ubuntu分辨率太小的解决方案</a></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> VirtualBox </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[larave后台日志插件]]></title>
      <url>http://elickzhao.github.io/2016/06/larave%E5%90%8E%E5%8F%B0%E6%97%A5%E5%BF%97%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>也是发现了两个插件,<code>rap2hpoutre/laravel-log-viewer</code>和<code>ARCANEDEV/LogViewer</code>.第一个简单些,界面显示也简单些.第二个丰富些,不过第二个测试时不好使,可能是因为我装了两个有点冲突吧.</p>
<a id="more"></a>
<h3 id="rap2hpoutre-laravel-log-viewer-安装使用"><a href="#rap2hpoutre-laravel-log-viewer-安装使用" class="headerlink" title="rap2hpoutre/laravel-log-viewer 安装使用"></a>rap2hpoutre/laravel-log-viewer 安装使用</h3><p><strong>安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require rap2hpoutre/laravel-log-viewer</span><br></pre></td></tr></table></figure></p>
<p><strong>配置</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rap2hpoutre\LaravelLogViewer\LaravelLogViewerServiceProvider::class,</span><br></pre></td></tr></table></figure></p>
<p><strong>添加路由</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'logs'</span>, <span class="string">'\Rap2hpoutre\LaravelLogViewer\LogViewerController@index'</span>);</span><br></pre></td></tr></table></figure></p>
<p>然后看 <a href="http://myapp/logs" target="_blank" rel="noopener">http://myapp/logs</a> 就可以了</p>
<p>仓库地址:<br><a href="https://github.com/rap2hpoutre/laravel-log-viewer" target="_blank" rel="noopener">rap2hpoutre/laravel-log-viewer</a></p>
<hr>
<h3 id="ARCANEDEV-LogViewer-安装使用"><a href="#ARCANEDEV-LogViewer-安装使用" class="headerlink" title="ARCANEDEV/LogViewer 安装使用"></a>ARCANEDEV/LogViewer 安装使用</h3><p><strong>安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require arcanedev/log-viewer</span><br></pre></td></tr></table></figure></p>
<p><strong>配置</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arcanedev\LogViewer\LogViewerServiceProvider::class,</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan log-viewer:publish</span><br></pre></td></tr></table></figure>
<p><strong>使用</strong><br>可用这个命令检查是否安装成功<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan log-viewer:check</span><br></pre></td></tr></table></figure></p>
<p>然后看 <a href="http://myapp/log-viewer" target="_blank" rel="noopener">http://myapp/log-viewer</a> 就可以了 这个不需要上面那个,还得配置路由直接就可用</p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel-lang 多语言插件]]></title>
      <url>http://elickzhao.github.io/2016/06/Laravel-lang%20%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>发现两个不错的语音包,caouecs/Laravel-lang和overtrue/laravel-lang.第一个是第二个的基础,只是做了一下自动化
</code></pre><h3 id="caouecs-Laravel-lang"><a href="#caouecs-Laravel-lang" class="headerlink" title="caouecs/Laravel-lang"></a>caouecs/Laravel-lang</h3><p>其实使用很简单,就如下所说,把项目下载到项目里,然后把要使用的语言包,放到<code>resources\lang</code>里,然后改写<code>config\app.php</code>里的语言设置就ok了</p>
<a id="more"></a>
<p>仓库地址:<br><a href="https://github.com/caouecs/Laravel-lang" target="_blank" rel="noopener">https://github.com/caouecs/Laravel-lang</a></p>
<blockquote>
<p>Via Composer<br>For Laravel 5.* : add “caouecs/laravel-lang”: “~3.0” in your composer.json in “require”<br>For Laravel 5 : add “caouecs/laravel4-lang”: “~2.0” in your composer.json in “require”<br>For Laravel 4 : add “caouecs/laravel4-lang”: “~1.0” in your composer.json in “require”<br>Do “composer update”<br>Files of languages are in “vendor/caouecs/laravel-lang” directory<br>Copy the folders of languages that you want, in app/lang (resources/lang in laravel 5) folder of your application Laravel</p>
<p>Via GitHub<br>Clone the GitHub repository : git clone <a href="https://github.com/caouecs/Laravel-lang.git" target="_blank" rel="noopener">https://github.com/caouecs/Laravel-lang.git</a><br>Or download the zip file<br>Choose the branch:<br>laravel4 for Laravel4 project<br>master for Laravel5 project<br>Copy the folders of languages that you want, in app/lang folder of your application Laravel</p>
</blockquote>
<h3 id="overtrue-laravel-lang"><a href="#overtrue-laravel-lang" class="headerlink" title="overtrue/laravel-lang"></a>overtrue/laravel-lang</h3><p>这个也很简单</p>
<ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require &quot;overtrue/laravel-lang:~3.0&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
</li>
</ul>
<p>完成上面的操作后，将项目文件 config/app.php 中的下一行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Translation\TranslationServiceProvider::class,</span><br></pre></td></tr></table></figure></p>
<p>替换为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Overtrue\LaravelLang\TranslationServiceProvider::class,</span><br></pre></td></tr></table></figure></p>
<p>修改项目语言 config/app.php：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'locale'</span> =&gt; <span class="string">'zh-CN'</span>,</span><br></pre></td></tr></table></figure></p>
<ul>
<li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan lang:publish zh-CN,zh-HK,th,tk</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就会自动把语音包放到lang下面了</p>
<p>参考文档:<br><a href="https://github.com/overtrue/laravel-lang/blob/master/README_CN.md" target="_blank" rel="noopener">项目说明文档</a><br><a href="https://github.com/overtrue/laravel-lang" target="_blank" rel="noopener">项目仓库</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel-breadcrumbs 面包屑插件]]></title>
      <url>http://elickzhao.github.io/2016/06/laravel-breadcrumbs%20%E9%9D%A2%E5%8C%85%E5%B1%91%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>还不错的插件,减少了开发面包屑功能的麻烦,不过还得自定义个文件,每个route都得写上下关系才行.还是不能特别便利,不过有总比没有好.
</code></pre><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer require davejamesmiller/laravel-breadcrumbs</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>配置</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    DaveJamesMiller\Breadcrumbs\ServiceProvider::class,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="string">'aliases'</span> =&gt; [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">'Breadcrumbs'</span> =&gt; DaveJamesMiller\Breadcrumbs\Facade::class,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
</li>
</ul>
<p>需要创建个文件<code>app/Http/breadcrumbs.php</code> 像是这样.每个路由都得定义一下,并且给与上下级关系,<br>下面只是静态定义,更多定义可以看文档.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Home</span></span><br><span class="line">Breadcrumbs::register(<span class="string">'home'</span>, <span class="function"><span class="keyword">function</span><span class="params">($breadcrumbs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $breadcrumbs-&gt;push(<span class="string">'Home'</span>, route(<span class="string">'home'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Home &gt; About</span></span><br><span class="line">Breadcrumbs::register(<span class="string">'about'</span>, <span class="function"><span class="keyword">function</span><span class="params">($breadcrumbs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $breadcrumbs-&gt;parent(<span class="string">'home'</span>);</span><br><span class="line">    $breadcrumbs-&gt;push(<span class="string">'About'</span>, route(<span class="string">'about'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Home &gt; Blog</span></span><br><span class="line">Breadcrumbs::register(<span class="string">'blog'</span>, <span class="function"><span class="keyword">function</span><span class="params">($breadcrumbs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $breadcrumbs-&gt;parent(<span class="string">'home'</span>);</span><br><span class="line">    $breadcrumbs-&gt;push(<span class="string">'Blog'</span>, route(<span class="string">'blog'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Home &gt; Blog &gt; [Category]</span></span><br><span class="line">Breadcrumbs::register(<span class="string">'category'</span>, <span class="function"><span class="keyword">function</span><span class="params">($breadcrumbs, $category)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $breadcrumbs-&gt;parent(<span class="string">'blog'</span>);</span><br><span class="line">    $breadcrumbs-&gt;push($category-&gt;title, route(<span class="string">'category'</span>, $category-&gt;id));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Home &gt; Blog &gt; [Category] &gt; [Page]</span></span><br><span class="line">Breadcrumbs::register(<span class="string">'page'</span>, <span class="function"><span class="keyword">function</span><span class="params">($breadcrumbs, $page)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $breadcrumbs-&gt;parent(<span class="string">'category'</span>, $page-&gt;category);</span><br><span class="line">    $breadcrumbs-&gt;push($page-&gt;title, route(<span class="string">'page'</span>, $page-&gt;id));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>路由也需要一定的操作,这里文档没有特别提出.这里需要定义路由时要命名路由要不然就会出错.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用as定义路由别名</span></span><br><span class="line">Route::get(<span class="string">'home'</span>,[<span class="string">'as'</span>=&gt;<span class="string">'home'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'home'</span>);</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'blog'</span>,[<span class="string">'as'</span>=&gt;<span class="string">'blog'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'blog'</span>);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>
<p>在模版中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan vendor:publish</span><br><span class="line">//生成 config/breadcrumbs.php 配置文件</span><br></pre></td></tr></table></figure></p>
<p>这里可以配置模版文件,也就是面包屑样子.可以自定义,也可以使用插件写好的样子.文件像这样.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'view'</span> =&gt; <span class="string">'breadcrumbs::bootstrap3'</span>,</span><br></pre></td></tr></table></figure></p>
<p>然后在模版文件添加代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"http://cdn.bootcss.com/jquery/2.2.3/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;!! Breadcrumbs::render(<span class="string">'blog'</span>) !!&#125;</span><br></pre></td></tr></table></figure></p>
<p>自带模版是拿bootstrap写的,所以要加入bootstrap样式,要不该看不到样子了</p>
<p>好了,简单使用就这些了,更多用法看文档吧,文档很详细的.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><strong>仓库地址</strong><br><a href="https://github.com/davejamesmiller/laravel-breadcrumbs/blob/master/docs/start.rst" target="_blank" rel="noopener">davejamesmiller/laravel-breadcrumbs</a></p>
<p><strong>文档地址</strong><br><a href="http://laravel-breadcrumbs.davejamesmiller.com/en/latest/start.html" target="_blank" rel="noopener">Laravel Breadcrumbs</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel插件记录]]></title>
      <url>http://elickzhao.github.io/2016/06/laravel%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>总结一下好用的插件,省着忘记.
</code></pre><h2 id="好用插件"><a href="#好用插件" class="headerlink" title="好用插件"></a>好用插件</h2><h3 id="Api响应格式插件"><a href="#Api响应格式插件" class="headerlink" title="Api响应格式插件"></a>Api响应格式插件</h3><p><a href="https://github.com/Cyvelnet/laravel5-fractal" target="_blank" rel="noopener">laravel5-fractal</a><br><a href="http://fractal.thephpleague.com/" target="_blank" rel="noopener">Fractal官方网站</a></p>
<h3 id="权限管理插件"><a href="#权限管理插件" class="headerlink" title="权限管理插件"></a>权限管理插件</h3><p><a href="https://github.com/Zizaco/entrust" target="_blank" rel="noopener">zizaco/entrust</a></p>
<h3 id="面包屑插件"><a href="#面包屑插件" class="headerlink" title="面包屑插件"></a>面包屑插件</h3><p><a href="https://github.com/davejamesmiller/laravel-breadcrumbs" target="_blank" rel="noopener">davejamesmiller/laravel-breadcrumbs</a></p>
<h3 id="提示翻译插件"><a href="#提示翻译插件" class="headerlink" title="提示翻译插件"></a>提示翻译插件</h3><p><a href="https://github.com/caouecs/Laravel-lang" target="_blank" rel="noopener">caouecs/laravel-lang</a></p>
<h3 id="日志统计后台"><a href="#日志统计后台" class="headerlink" title="日志统计后台"></a>日志统计后台</h3><p><a href="https://github.com/ARCANEDEV/LogViewer" target="_blank" rel="noopener">arcanedev/log-viewer</a></p>
<h3 id="日志显示-和上面那个差不多-不过不用后台配合"><a href="#日志显示-和上面那个差不多-不过不用后台配合" class="headerlink" title="日志显示 和上面那个差不多 不过不用后台配合"></a>日志显示 和上面那个差不多 不过不用后台配合</h3><p><a href="https://github.com/rap2hpoutre/laravel-log-viewer" target="_blank" rel="noopener">rap2hpoutre/laravel-log-viewer</a></p>
<h3 id="debug显示错误"><a href="#debug显示错误" class="headerlink" title="debug显示错误"></a>debug显示错误</h3><p>barryvdh/laravel-debugbar</p>
<h3 id="给model加tag-暂时还不知道什么用"><a href="#给model加tag-暂时还不知道什么用" class="headerlink" title="给model加tag 暂时还不知道什么用"></a>给model加tag 暂时还不知道什么用</h3><p><a href="https://github.com/cviebrock/eloquent-taggable" target="_blank" rel="noopener">cviebrock/eloquent-taggable</a></p>
<h3 id="把title作为url有利于seo"><a href="#把title作为url有利于seo" class="headerlink" title="把title作为url有利于seo"></a>把title作为url有利于seo</h3><p><a href="https://github.com/cviebrock/eloquent-sluggable" target="_blank" rel="noopener">cviebrock/eloquent-sluggable</a></p>
<h3 id="提示信息插件"><a href="#提示信息插件" class="headerlink" title="提示信息插件"></a>提示信息插件</h3><p><a href="https://github.com/laracasts/flash" target="_blank" rel="noopener">laracasts/flash</a></p>
<h3 id="一个个人网站和商城的程序"><a href="#一个个人网站和商城的程序" class="headerlink" title="一个个人网站和商城的程序"></a>一个个人网站和商城的程序</h3><p><a href="https://github.com/microweber/microweber" target="_blank" rel="noopener">microweber/microweber</a></p>
<h3 id="构建API-doc插件-自动生成api文件"><a href="#构建API-doc插件-自动生成api文件" class="headerlink" title="构建API doc插件 自动生成api文件"></a>构建API doc插件 自动生成api文件</h3><p><a href="https://github.com/mpociot/laravel-apidoc-generator" target="_blank" rel="noopener">mpociot/laravel-apidoc-generator</a></p>
<h3 id="后台程序"><a href="#后台程序" class="headerlink" title="后台程序"></a>后台程序</h3><p><a href="https://github.com/big-pang/laravel5.2-Admin" target="_blank" rel="noopener">big-pang/laravel5.2-Admin</a></p>
<h3 id="后台程序-跟上面类似-不过这是老外写的而且更全面些"><a href="#后台程序-跟上面类似-不过这是老外写的而且更全面些" class="headerlink" title="后台程序 跟上面类似 不过这是老外写的而且更全面些"></a>后台程序 跟上面类似 不过这是老外写的而且更全面些</h3><p><a href="https://github.com/rappasoft/laravel-5-boilerplate" target="_blank" rel="noopener">rappasoft/laravel-5-boilerplate</a></p>
<h3 id="应用的消息通知插件"><a href="#应用的消息通知插件" class="headerlink" title="应用的消息通知插件"></a>应用的消息通知插件</h3><p><a href="https://github.com/fenos/Notifynder" target="_blank" rel="noopener">https://github.com/fenos/Notifynder</a><br><a href="http://laravelacademy.org/post/4858.html" target="_blank" rel="noopener">使用 Laravel Notifynder 扩展轻松实现 Laravel 应用的消息通知功能</a></p>
<h3 id="数据库备份插件"><a href="#数据库备份插件" class="headerlink" title="数据库备份插件"></a>数据库备份插件</h3><p><a href="https://packagist.org/packages/vinkla/backup" target="_blank" rel="noopener">vinkla/backup 这个带有压缩功能的备份 而且能查询列表,不过只能用在linux下,因为需要个rsync</a><br><a href="https://packagist.org/packages/paulvl/backup" target="_blank" rel="noopener">paulvl/backup 这个比上一个简单些不能压缩,文档说能命名但是测试不行,但可以用在windows下</a><br><a href="https://packagist.org/packages/schickling/backup" target="_blank" rel="noopener">schickling/backup 这个非常全面 但是这个是 Laravel 4 的</a><br><a href="https://packagist.org/packages/backup-manager/laravel" target="_blank" rel="noopener">backup-manager/laravel 这个也比较大 功能比较全 这个需要zip压缩命令 所以在win下也不是很好用</a><br><a href="https://packagist.org/packages/spatie/laravel-backup" target="_blank" rel="noopener">spatie/laravel-backup 这个也不错 最近一直更新 还上了php7.0和laravel5.3 不过文档比较麻烦 在另一个地址 被墙了 </a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Entrust - Laravel 用户权限系统解决方案]]></title>
      <url>http://elickzhao.github.io/2016/06/Entrust%20-%20Laravel%20%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>最近需要做后台所以找到这个插件.下面的文章内容稍微有点老,但大致讲解的没问题,还是结合项目仓库一起看就明白很多了.
</code></pre><h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>  针对那篇文章没有提到的东西简单说明下</p>
<ul>
<li><p>注意引入文件,升级后很多名称变了,所以一定要参考文档.</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Zizaco</span>\<span class="title">Entrust</span>\<span class="title">EntrustRole</span>;     <span class="comment">//以前引入的文件名不同,以后也要注意</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">extends</span> <span class="title">EntrustRole</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Zizaco</span>\<span class="title">Entrust</span>\<span class="title">EntrustPermission</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permission</span> <span class="keyword">extends</span> <span class="title">EntrustPermission</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Zizaco</span>\<span class="title">Entrust</span>\<span class="title">Traits</span>\<span class="title">EntrustUserTrait</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Eloquent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">EntrustUserTrait</span>; <span class="comment">//这个名称也变了</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>hasRole和can的用法</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单用法</span></span><br><span class="line"><span class="comment">//确认是否在哪个用户组和具有哪个权限</span></span><br><span class="line">$user-&gt;hasRole(<span class="string">'owner'</span>);   <span class="comment">// false</span></span><br><span class="line">$user-&gt;hasRole(<span class="string">'admin'</span>);   <span class="comment">// true</span></span><br><span class="line">$user-&gt;can(<span class="string">'edit-user'</span>);   <span class="comment">// false</span></span><br><span class="line">$user-&gt;can(<span class="string">'create-post'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可一次确认多个用户组和权限</span></span><br><span class="line"><span class="comment">//第三个参数是判断,前面参数是 &amp;&amp; 还是 ||</span></span><br><span class="line">$user-&gt;hasRole([<span class="string">'owner'</span>, <span class="string">'admin'</span>]);             <span class="comment">// true</span></span><br><span class="line">$user-&gt;hasRole([<span class="string">'owner'</span>, <span class="string">'admin'</span>], <span class="keyword">true</span>);       <span class="comment">// false, user does not have admin role</span></span><br><span class="line">$user-&gt;can([<span class="string">'edit-user'</span>, <span class="string">'create-post'</span>]);       <span class="comment">// true</span></span><br><span class="line">$user-&gt;can([<span class="string">'edit-user'</span>, <span class="string">'create-post'</span>], <span class="keyword">true</span>); <span class="comment">// false, user does not have edit-user permission</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模糊匹配</span></span><br><span class="line"><span class="comment">// match any admin permission</span></span><br><span class="line">$user-&gt;can(<span class="string">"admin.*"</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// match any permission about users</span></span><br><span class="line">$user-&gt;can(<span class="string">"*_users"</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前登录用户,可以用简单方法快速验证权限</span></span><br><span class="line">Entrust::hasRole(<span class="string">'role-name'</span>);</span><br><span class="line">Entrust::can(<span class="string">'permission-name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// is identical to</span></span><br><span class="line"></span><br><span class="line">Auth::user()-&gt;hasRole(<span class="string">'role-name'</span>);</span><br><span class="line">Auth::user()-&gt;can(<span class="string">'permission-name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义验证ability()</span></span><br><span class="line"><span class="comment">//三个参数 第一个role 第二个permission 第三个自定义参数  </span></span><br><span class="line"><span class="comment">//这个个没用过暂时这么记录</span></span><br><span class="line"></span><br><span class="line">$options = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'validate_all'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">'return_type'</span> =&gt; <span class="string">'both'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>($validate, $allValidations) = $user-&gt;ability(</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'admin'</span>, <span class="string">'owner'</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'create-post'</span>, <span class="string">'edit-user'</span>),</span><br><span class="line">    $options</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">var_dump($validate);</span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"></span><br><span class="line">var_dump($allValidations);</span><br><span class="line"><span class="comment">// array(4) &#123;</span></span><br><span class="line"><span class="comment">//     ['role'] =&gt; bool(true)</span></span><br><span class="line"><span class="comment">//     ['role_2'] =&gt; bool(false)</span></span><br><span class="line"><span class="comment">//     ['create-post'] =&gt; bool(true)</span></span><br><span class="line"><span class="comment">//     ['edit-user'] =&gt; bool(false)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模版的一些用法</span></span><br><span class="line">@role(<span class="string">'admin'</span>)</span><br><span class="line">    &lt;p&gt;This is visible to users with the admin role. Gets translated to </span><br><span class="line">    \Entrust::role(<span class="string">'admin'</span>)&lt;/p&gt;</span><br><span class="line">@endrole</span><br><span class="line"></span><br><span class="line">@permission(<span class="string">'manage-admins'</span>)</span><br><span class="line">    &lt;p&gt;This is visible to users with the given permissions. Gets translated to </span><br><span class="line">    \Entrust::can(<span class="string">'manage-admins'</span>). The @can directive is already taken by core </span><br><span class="line">    laravel authorization package, hence the @permission directive instead.&lt;/p&gt;</span><br><span class="line">@endpermission</span><br><span class="line"></span><br><span class="line">@ability(<span class="string">'admin,owner'</span>, <span class="string">'create-post,edit-user'</span>)</span><br><span class="line">    &lt;p&gt;This is visible to users with the given abilities. Gets translated to </span><br><span class="line">    \Entrust::ability(<span class="string">'admin,owner'</span>, <span class="string">'create-post,edit-user'</span>)&lt;/p&gt;</span><br><span class="line">@endability</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//剩下还有中间件等等一些用法 看项目文档吧</span></span><br></pre></td></tr></table></figure>
<p>这是我测试时的文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'add'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Cache为file时 会出现Cache不支持tag的错误</span></span><br><span class="line">    <span class="comment">//换成array就好了</span></span><br><span class="line">    $admin = <span class="keyword">new</span> Role;</span><br><span class="line">    $admin-&gt;name = <span class="string">'Admin'</span>;</span><br><span class="line">    $admin-&gt;save();</span><br><span class="line"></span><br><span class="line">    $owner = <span class="keyword">new</span> Role;</span><br><span class="line">    $owner-&gt;name = <span class="string">'Owner'</span>;</span><br><span class="line">    $owner-&gt;save();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $manageUsers = <span class="keyword">new</span> Permission();</span><br><span class="line">    $manageUsers-&gt;name = <span class="string">'manage_users'</span>;</span><br><span class="line">    $manageUsers-&gt;display_name = <span class="string">'Manage Users'</span>;</span><br><span class="line">    $manageUsers-&gt;save();</span><br><span class="line"></span><br><span class="line">    $managePosts = <span class="keyword">new</span> Permission();</span><br><span class="line">    $managePosts-&gt;name = <span class="string">'manage_posts'</span>;</span><br><span class="line">    $managePosts-&gt;display_name = <span class="string">'Manage Posts'</span>;</span><br><span class="line">    $managePosts-&gt;save();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给用户组增加权限</span></span><br><span class="line">    <span class="comment">//从这个版本的文档来看 好像更喜欢用 attachPermission($managePosts) 这种简洁的写法</span></span><br><span class="line">    $owner-&gt;perms()-&gt;sync(<span class="keyword">array</span>($managePosts-&gt;id, $manageUsers-&gt;id));</span><br><span class="line">    <span class="comment">//还可以这么写</span></span><br><span class="line">    <span class="comment">//$admin-&gt;attachPermissions($manageUsers,$managePosts);</span></span><br><span class="line">    </span><br><span class="line">    $admin-&gt;perms()-&gt;sync(<span class="keyword">array</span>($managePosts-&gt;id));</span><br><span class="line">    <span class="comment">//还可以这么写</span></span><br><span class="line">    <span class="comment">//$admin-&gt;attachPermission($managePosts);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户</span></span><br><span class="line">    $user = User::where(<span class="string">'name'</span>,<span class="string">'='</span>,<span class="string">'elick'</span>)-&gt;first();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用 Entrust 提供的便捷方法用户授权</span></span><br><span class="line">    <span class="comment">// 注: 参数可以为 Role 对象, 数组, 或者 ID</span></span><br><span class="line">        $user-&gt;attachRole( $admin );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者使用 Eloquent 自带的对象关系赋值</span></span><br><span class="line">        <span class="comment">//$user-&gt;roles()-&gt;attach( $admin-&gt;id ); // id only</span></span><br><span class="line"></span><br><span class="line">    $a = $user-&gt;hasRole(<span class="string">"Owner"</span>);    <span class="comment">// false</span></span><br><span class="line">    $b = $user-&gt;hasRole(<span class="string">"Admin"</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    $c = $user-&gt;can(<span class="string">"manage_posts"</span>); <span class="comment">// true</span></span><br><span class="line">    $d = $user-&gt;can(<span class="string">"manage_users"</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    dump($a);dump($b);dump($c);dump($d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//can 和hasRole也能接收数组 一个对全都对</span></span><br><span class="line">    $user-&gt;hasRole([<span class="string">'owner'</span>, <span class="string">'admin'</span>]);       <span class="comment">// true</span></span><br><span class="line">    $user-&gt;can([<span class="string">'edit-user'</span>, <span class="string">'create-post'</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果想要两个参数同为真才行,可以用第三个参数</span></span><br><span class="line">    $user-&gt;hasRole([<span class="string">'owner'</span>, <span class="string">'admin'</span>]);             <span class="comment">// true</span></span><br><span class="line">    $user-&gt;hasRole([<span class="string">'owner'</span>, <span class="string">'admin'</span>], <span class="keyword">true</span>);       <span class="comment">// false, user does not have admin role</span></span><br><span class="line">    $user-&gt;can([<span class="string">'edit-user'</span>, <span class="string">'create-post'</span>]);       <span class="comment">// true</span></span><br><span class="line">    $user-&gt;can([<span class="string">'edit-user'</span>, <span class="string">'create-post'</span>], <span class="keyword">true</span>); <span class="comment">// false, user does not have edit-user permission</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'test'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $user = User::where(<span class="string">'name'</span>,<span class="string">'='</span>,<span class="string">'elick'</span>)-&gt;first();</span><br><span class="line">    $a = $user-&gt;ability([<span class="string">'Admin'</span>,<span class="string">'Owner'</span>], [<span class="string">'manage_posts'</span>,<span class="string">'manage_users'</span>]);</span><br><span class="line">    dump($a);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><p><a href="https://github.com/Zizaco/entrust" target="_blank" rel="noopener">项目地址:https://github.com/Zizaco/entrust</a><br><a href="https://phphub.org/topics/166" target="_blank" rel="noopener">Entrust - Laravel 用户权限系统解决方案</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github删除fork项目]]></title>
      <url>http://elickzhao.github.io/2016/06/github%E5%88%A0%E9%99%A4fork%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>  在仓库页面的setting里,进入setting页面,到最下面看到delete this repository按钮,就是它了.点击删除后会提示让你输入仓库名称,输入完成后就删除完毕.</p>
<p>详细看这里图文说明:<br><a href="http://www.chepoo.com/remove-fork-github-project.html" target="_blank" rel="noopener">http://www.chepoo.com/remove-fork-github-project.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统如何查看版本信息]]></title>
      <url>http://elickzhao.github.io/2016/06/Linux%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p><a href="http://jingyan.baidu.com/article/7908e85c725159af481ad2f7.html" target="_blank" rel="noopener">Linux系统如何查看版本信息</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//输入&quot;uname -a &quot;,可显示电脑以及操作系统的相关信息。</span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">//输入&quot;cat /proc/version&quot;,说明正在运行的内核版本。</span><br><span class="line">cat /proc/version</span><br><span class="line"></span><br><span class="line">//输入&quot;cat /etc/issue&quot;, 显示的是发行版本信息</span><br><span class="line">cat /etc/issue</span><br><span class="line"></span><br><span class="line">//lsb_release -a (适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb)</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> 服务器相关技术 </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel控制器学习笔记]]></title>
      <url>http://elickzhao.github.io/2016/06/laravel%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><strong>一些私有属性说明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//注册成功后挑战地址</span><br><span class="line">protected $redirectPath = &apos;/&apos;;</span><br><span class="line">//登录成功后跳转地址</span><br><span class="line">protected $loginPath = &apos;/&apos;;</span><br><span class="line">//但是有个问题当登录成功后 还是进入auth/login的时候 还是会默认跳转到/home路径下</span><br><span class="line"></span><br><span class="line">//重置密码后跳转路径</span><br><span class="line">protected $redirectTo = &apos;/dashboard&apos;;</span><br><span class="line">//设置这个属性就可以设置登录验证的字段</span><br><span class="line">protected $username = &apos;name&apos;;</span><br><span class="line"></span><br><span class="line">//自定义登录模版位置</span><br><span class="line">protected $loginView = &apos;admin.auth.login&apos;;</span><br><span class="line">//自定义注册模版位置</span><br><span class="line">protected $registerView = &apos;admin.auth.register&apos;;</span><br><span class="line">//这个自定义验证配置项 在config/auth.php 但是这是5.2属性 5.1没有  </span><br><span class="line">//这个可以坐到对前台会员登录和后台管理员登录 分离管理</span><br><span class="line">protected $guard = &apos;admin&apos;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel模型学习笔记]]></title>
      <url>http://elickzhao.github.io/2016/06/laravel%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><strong>模型类一些私有属性</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定表名  </span></span><br><span class="line"><span class="keyword">protected</span> $table = <span class="string">'my_flights'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个限制只决定怎么插入到数据库 不决定怎么取出数据</span></span><br><span class="line"><span class="keyword">protected</span> $dateFormat = <span class="string">'Y-m-d'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//白名单 可以直接创建数据的字段</span></span><br><span class="line"><span class="keyword">protected</span> $fillable = [<span class="string">'title'</span>,<span class="string">'intro'</span>,<span class="string">'content'</span>,<span class="string">'published_at'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//黑名单 除此之外的字段都可以直接创建</span></span><br><span class="line"><span class="keyword">protected</span> $guarded = [<span class="string">'created_at'</span>,<span class="string">'updated_at'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置字段为Carbon实例 可以直接使用Carbon方法</span></span><br><span class="line"><span class="keyword">protected</span> $dates = [<span class="string">'published_at'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性转换类型 key是字段名称 value是要转换成的类型</span></span><br><span class="line"><span class="keyword">protected</span> $casts = [<span class="string">'is_admin'</span> =&gt; <span class="string">'boolean'</span>,];</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组转换 把数组转化成JSON格式存入数据库 读取时自动转化成数组</span></span><br><span class="line"><span class="keyword">protected</span> $casts = [<span class="string">'options'</span> =&gt; <span class="string">'array'</span>, ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐藏模型的一些属性 直接输出的时候是无法看见的</span></span><br><span class="line"><span class="keyword">protected</span> $hidden = [<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示白名单 那些字段直接输出是可以被看到的</span></span><br><span class="line"><span class="keyword">protected</span> $visible = [<span class="string">'first_name'</span>, <span class="string">'last_name'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//追加字段到返回数组中 而且是数据库没有的字段 而且需要访问器的帮忙</span></span><br><span class="line"><span class="comment">//但这个不理解有什么用处 他其实是通过已有字段经过判断后输出 两个字段都能返回 只不过这个返回是布尔值</span></span><br><span class="line"><span class="keyword">protected</span> $appends = [<span class="string">'is_admin'</span>];</span><br></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p><strong>数据库一些用法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App\Flight::updateOrCreate([<span class="string">'name'</span>=&gt;<span class="string">'Flight 10'</span>],[<span class="string">'airline'</span>=&gt;<span class="string">'888'</span>]);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果有就更新第一条搜索到的数据 第一个参数搜索条件 第二个参数更新内容 如果没有就创建</p>
<p>这个方法和<em>firstOrNew</em>还有<em>firstOrCreate</em> 是一样的这不过这两个只有一个参数 他们用法其实不太很有用查到后只会更新下时间 并没有其他用,如果参数为数组为多元,那么只是加了搜索条件而已搜出来的 还是新的,所以还会接着创建.还有一点Create还得必须修改模型fillable或者$guarded 而New还得用save存一下不能直接插入数据库</p>
</blockquote>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB::table(<span class="string">'users'</span>)</span><br><span class="line">-&gt;whereExists(<span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">    $query-&gt;select(DB::raw(<span class="number">1</span>))</span><br><span class="line">        -&gt;from(<span class="string">'orders'</span>)</span><br><span class="line">        -&gt;whereRaw(<span class="string">'orders.user_id = users.id'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">-&gt;get();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>  select * from users where exists (select 1 from orders where orders.user_id = users.id)<br>    生成上面那句语句  exists 判断括号内语句是否为真  为真则搜索 为假则放弃</p>
</blockquote>
<hr>
<p><strong>表关联</strong></p>
<blockquote>
<p>还有个问题就是在函数命名上,也是有规矩的 单数用单数 复数用复数 下面就是例子<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">account</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'App\Models\UserAccount'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果这里用单数post就会报错 </span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'App\Models\Post'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li>一对一<br>Flight表<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//外键一般用当前模型的表名加ID 例如 flight_id</span></span><br><span class="line">    <span class="comment">//这个外键是int类型或者是varchar类型都可以</span></span><br><span class="line">    <span class="comment">//第三个参数是表内关联的键  也是就是当期模型的表所含的字段  外键是关联外部的表所含的字段</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'App\Flys'</span>,<span class="string">'flight_fid'</span>,<span class="string">'airline'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Fly表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="function"><span class="keyword">function</span> <span class="title">flight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//默认外键为flight_id  这里的外键还是相对于Flight来说的  这是因为这个是belongsTO从属表  所以外键是位于表内字段</span></span><br><span class="line">    <span class="comment">//return $this-&gt;belongsTo('App\Flight','f_id','airline');</span></span><br><span class="line">    <span class="comment">//这里内键也是相对Flight说 其实是Flight的内部字段</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'App\Flight'</span>,<span class="string">'flight_fid'</span>,<span class="string">'airline'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>一对多</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  实际上在底层无论是hasOne方法还是belongsTo方法都可以接收额外参数，</span></span><br><span class="line"><span class="comment">  比如如果user_accounts中关联users的外键是$foreign_key，该外键对应users表中的列是$local_key，</span></span><br><span class="line"><span class="comment">  那么我们可以这样调用hasOne方法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  $this-&gt;hasOne('App\Models\UserAccount',$foreign_key,$local_key);</span></span><br><span class="line"><span class="comment">  调用belongsTo方法也是一样：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  $this-&gt;belongsTo('App\User',$foreign_key,$local_key);</span></span><br><span class="line"><span class="comment">  此外，belongsTo还接收一个额外参数$relation，用于指定关联关系名称，</span></span><br><span class="line"><span class="comment">  其默认值为调用belongsTo的方法名，这里是user。</span></span><br><span class="line"><span class="comment"> * */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多对多</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意我们定义中间表的时候没有在结尾加s并且命名规则是按照字母表顺序，</span></span><br><span class="line"><span class="comment">//将role放在前面，user放在后面，并且用_分隔</span></span><br><span class="line"><span class="comment">//所以RoleUser这个model必须指定表名 要不会出错的 protected $table = 'role_user';</span></span><br><span class="line"><span class="comment">//至于字段就没有说道了</span></span><br><span class="line">$user = User::find(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phpstorm 图标含义大解析]]></title>
      <url>http://elickzhao.github.io/2016/06/phpstorm%20%E5%9B%BE%E6%A0%87%E5%90%AB%E4%B9%89%E5%A4%A7%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  phpstorm是个非常棒的IDE,高度定制化并且功能丰富.但因为没有正式的汉化版,所以很多便捷的使用方式,还没有被大家了解到.看来以后要多研究啊.最近使用的时候就发现了问题,一些图标不知道他具体的含义,本来是很好的提示作用却打了折扣,这里把英文翻译过来,以便日后记忆.</p>
 <a id="more"></a>
<h2 id="图标解析"><a href="#图标解析" class="headerlink" title="图标解析"></a>图标解析</h2><h3 id="文件类型图标"><a href="#文件类型图标" class="headerlink" title="文件类型图标"></a>文件类型图标</h3><table>
<thead>
<tr>
<th>文件类型</th>
<th style="text-align:center">图标</th>
</tr>
</thead>
<tbody>
<tr>
<td>apache 配置文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeApacheConfig.png" alt=""></td>
</tr>
<tr>
<td>归档文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/icon_create_archive.png" alt=""></td>
</tr>
<tr>
<td>C# 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeCSharp.png" alt=""></td>
</tr>
<tr>
<td>C/C++  文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeC.png" alt=""></td>
</tr>
<tr>
<td>Shell 命令文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeCommandShell.png" alt=""></td>
</tr>
<tr>
<td>CoffeeScript  文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeCss.png" alt=""></td>
</tr>
<tr>
<td>Dart 文件 (介绍:<a href="http://www.oschina.net/p/dart" target="_blank" rel="noopener">http://www.oschina.net/p/dart</a>)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/icon_dart.png" alt=""></td>
</tr>
<tr>
<td>Diagram 文件 (UML,流程图文件)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/icon_UML.png" alt=""></td>
</tr>
<tr>
<td>Erlang  文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeC.png" alt=""></td>
</tr>
<tr>
<td>纯文本文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/plain_text_icon.png" alt=""></td>
</tr>
<tr>
<td>handlebars 文件 (Handlebars 是 JavaScript 一个语义模板库)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeHandlebars.png" alt=""></td>
</tr>
<tr>
<td>HAML 文件 (介绍:<a href="http://www.oschina.net/p/haml" target="_blank" rel="noopener">http://www.oschina.net/p/haml</a>)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeHAML.png" alt=""></td>
</tr>
<tr>
<td>HTML 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/classTypeHtml.png" alt=""></td>
</tr>
<tr>
<td>IDL 文件 (接口描述语言,一种开发语言)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeIdl.png" alt=""></td>
</tr>
<tr>
<td>Image文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeImage.png" alt=""></td>
</tr>
<tr>
<td>JavaFX 文件 (介绍:<a href="http://www.javafxchina.net/blog/" target="_blank" rel="noopener">http://www.javafxchina.net/blog/</a>)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeC.png" alt=""></td>
</tr>
<tr>
<td>JavaScript  文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeJavaScript.png" alt=""></td>
</tr>
<tr>
<td>JavaScript test 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeJSTest.png" alt=""></td>
</tr>
<tr>
<td>Node.js运行文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeJSFileToRunOnNode.png" alt=""></td>
</tr>
<tr>
<td>JSON  文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeJSON.png" alt=""></td>
</tr>
<tr>
<td>JSTestDriver Config 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeJSTestDriverConfig.png" alt=""></td>
</tr>
<tr>
<td>JSP  文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeJSP.png" alt=""></td>
</tr>
<tr>
<td>LESS 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeLESS.png" alt=""></td>
</tr>
<tr>
<td>reStructuredText 文件 (类似MD文档语音)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypesRST.png" alt=""></td>
</tr>
<tr>
<td>Patch(补丁)文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/patch.png" alt=""></td>
</tr>
<tr>
<td>PHP  文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypePHP.png" alt=""></td>
</tr>
<tr>
<td>Regular expressions (正则文件)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeRegexp.png" alt=""></td>
</tr>
<tr>
<td>SASS/SCSS 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeSASS.png" alt=""></td>
</tr>
<tr>
<td>Smarty 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeSmarty.png" alt=""></td>
</tr>
<tr>
<td>SQL 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/icon_sqlOpenInEditor.png" alt=""></td>
</tr>
<tr>
<td>Stylus 文件 (类似less/scss语音)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeStylus.png" alt=""></td>
</tr>
<tr>
<td>TypeScript 文件 (介绍:<a href="http://www.open-open.com/lib/view/open1349622724697.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1349622724697.html</a>)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/typeScript.png" alt=""></td>
</tr>
<tr>
<td>XHTML 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/classTypeXHtml.png" alt=""></td>
</tr>
<tr>
<td>XML DTD 文件 (介绍:<a href="http://www.w3school.com.cn/dtd/" target="_blank" rel="noopener">http://www.w3school.com.cn/dtd/</a>)</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeDTD.png" alt=""></td>
</tr>
<tr>
<td>XML 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/classTypeXml.png" alt=""></td>
</tr>
<tr>
<td>YAML 文件</td>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/fileTypeYAML.png" alt=""></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="普通图标"><a href="#普通图标" class="headerlink" title="普通图标"></a>普通图标</h3><table>
<thead>
<tr>
<th style="text-align:center">图标</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/variable.png" alt=""></td>
<td>变量 (Variable)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/property.png" alt=""></td>
<td>属性  (Property)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/property_yellow.png" alt=""></td>
<td>参数  (Parameter)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/xml_element.png" alt=""></td>
<td>元素 (Element)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/rootSource.gif" alt=""></td>
<td>源文件夹 (    Source root)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/rootTest.gif" alt=""></td>
<td>测试目录 (Test root)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/rootExcluded.gif" alt=""></td>
<td>资源目录 (Resource root)</td>
</tr>
<tr>
<td style="text-align:center">以下为可见性修饰符</td>
<td>—–</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/private.png" alt=""></td>
<td>私有的 (private)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/protected.png" alt=""></td>
<td>受保护的 (protected)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/public.png" alt=""></td>
<td>公共的 (public)</td>
</tr>
</tbody>
</table>
<h3 id="树形中的图标"><a href="#树形中的图标" class="headerlink" title="树形中的图标"></a>树形中的图标</h3><table>
<thead>
<tr>
<th style="text-align:center">图标</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/classTypeJavaClass.png" alt=""></td>
<td>类 (Class)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/classTypeFinal.png" alt=""></td>
<td>Final class</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/classTypeInterface.png" alt=""></td>
<td>接口 (Interface)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/phpTrait.png" alt=""></td>
<td>PHP trait</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/variable.png" alt=""></td>
<td>方法/函数 (Method/function)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/icon_interface_method.png" alt=""></td>
<td>方法/函数的接口 (    Method/function in an interface)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/function_lambda.png" alt=""></td>
<td>Dart函数 (Function in Dart)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/variable.png" alt=""></td>
<td>变量 (Variable)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/php_storm_structure_show_constants.png" alt=""></td>
<td>常量 (Constant)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/field.png" alt=""></td>
<td>字段，信息组 (Field)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/property.png" alt=""></td>
<td>属性 (Property)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/property_yellow.png" alt=""></td>
<td>参数 (Parameter)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/xml_element.png" alt=""></td>
<td>元素 (Element)</td>
</tr>
<tr>
<td style="text-align:center">以下为可见性修饰符</td>
<td>—–</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/private.png" alt=""></td>
<td>私有的 (private)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/protected.png" alt=""></td>
<td>受保护的 (protected)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/public.png" alt=""></td>
<td>公共的 (public)</td>
</tr>
</tbody>
</table>
<h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><table>
<thead>
<tr>
<th style="text-align:center">图标</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DataSource.png" alt=""></td>
<td>数据库(DB data source)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBDB2.png" alt=""></td>
<td>DB2</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBDerby.png" alt=""></td>
<td>Derby</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBH2.png" alt=""></td>
<td>H2</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBHSQLDB.png" alt=""></td>
<td>HSQLDB</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBMySQL.png" alt=""></td>
<td>MySQL</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBOracle.png" alt=""></td>
<td>Oracle</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBPostgresql.png" alt=""></td>
<td>PostgreSQL</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBSQLServer.png" alt=""></td>
<td>SQL Server</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBSQLite.png" alt=""></td>
<td>SQLite</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBSybase.png" alt=""></td>
<td>Sybase</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DBReadonly.png" alt=""></td>
<td>只读 (DB data source with the read-only status, e.g. DBReadonlyDB2 for DB2.)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/icon_DDLDataSource.png" alt=""></td>
<td>DDL data source</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataSchema.png" alt=""></td>
<td>模式/集合 (Schema)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/DataTables.png" alt=""></td>
<td>表 (Table)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataView.png" alt=""></td>
<td>视图 (View)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataColumn.png" alt=""></td>
<td>列 (Column)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataColumnNotNull.png" alt=""></td>
<td>非空字段 (A NOT NULL column)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataPkColumn.png" alt=""></td>
<td>主键字段 (Column with a primary key)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataFkColumn.png" alt=""></td>
<td>外键字段 (Column with a foreign key)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataIndexedColumn.png" alt=""></td>
<td>索引字段 (    Column with an index)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataPrimaryKey.png" alt=""></td>
<td>主键  (Primary key)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataForeignKey.png" alt=""></td>
<td>外键  (Foreign key)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataIndex.png" alt=""></td>
<td>索引 (Index)</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://www.jetbrains.com/help/img/idea/dataFunction.png" alt=""></td>
<td>数据函数 ()dataFunction)</td>
</tr>
</tbody>
</table>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jetbrains.com/help/phpstorm/2016.1/symbols.html?from=old_help&amp;top=" target="_blank" rel="noopener">https://www.jetbrains.com/help/phpstorm/2016.1/symbols.html?from=old_help&amp;top=</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> phpstorm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[看码高手 各种编码长相]]></title>
      <url>http://elickzhao.github.io/2016/06/%E7%9C%8B%E7%A0%81%E9%AB%98%E6%89%8B%20%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E9%95%BF%E7%9B%B8/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  有些编码时间长了一不用,就忘记了.看长相挺熟悉,就是不知道是什么.所以还是记录下吧</p>
<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p><code>\u547d\u4ee4</code>  <strong>–&gt;</strong>  <code>命令</code></p>
<h2 id="Utf-8"><a href="#Utf-8" class="headerlink" title="Utf-8"></a>Utf-8</h2><p><code>&amp;#x6211;&amp;#x662F;&amp;#x4E92;&amp;#x8054;&amp;#x7F51;</code> <strong>–&gt;</strong> <code>我是互联网</code></p>
<h2 id="UrlEncode-utf-8"><a href="#UrlEncode-utf-8" class="headerlink" title="UrlEncode (utf-8)"></a>UrlEncode (utf-8)</h2><p><code>%e6%88%91%e6%98%af%e4%ba%92%e8%81%94%e7%bd%91</code> <strong>–&gt;</strong> <code>我是互联网</code></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sea.js 模块开发插件]]></title>
      <url>http://elickzhao.github.io/2016/06/Sea.js%20%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  现在大部分前端开发,都用npm或者bower.因为这样不仅升级组件方便,而且兼容性也能得到保障.但是对于简单开发来说,过于庞大的组件也是比较麻烦的.所以这个Sea.js还是有一定存在价值的.</p>
<p>  我也是在KodExplorer里发现这个插件的.没有太多使用,所以这里就点一下,以便以后记住.如果需要用就看官方吧,里面文档很详细的.</p>
<a id="more"></a>
<h2 id="我的一些经验"><a href="#我的一些经验" class="headerlink" title="我的一些经验"></a>我的一些经验</h2><p>定义模块的时候,两种方法对外提供功能.但是不能在同一文件中,定义两个.一种是提供函数,另一种是提供类的方法.两种使用方法也不同,具体看下面例子</p>
<!--more-->
<p>模块js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"./languages/en"</span>, </span><br><span class="line">                <span class="string">"./plugins/link-dialog/link-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/reference-link-dialog/reference-link-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/image-dialog/image-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/code-block-dialog/code-block-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/table-dialog/table-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/emoji-dialog/emoji-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/goto-line-dialog/goto-line-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/help-dialog/help-dialog"</span>,</span><br><span class="line">                <span class="string">"./plugins/html-entities-dialog/html-entities-dialog"</span>, </span><br><span class="line">                <span class="string">"./plugins/preformatted-text-dialog/preformatted-text-dialog"</span></span><br><span class="line">            ],</span><br><span class="line">			<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//var $ = require("jquery");</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//这里很怪 define([加载模块组]) 这里说是预加载,可是没有下面 require()是用不了的</span></span><br><span class="line">	<span class="comment">//但是下面require() 并不需要上面定义预加载 也可以用 那么这数组还有什么意思</span></span><br><span class="line">	<span class="comment">//但是要改的那里 也是这么写的 好怪</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/link-dialog/link-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/reference-link-dialog/reference-link-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/image-dialog/image-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/code-block-dialog/code-block-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/table-dialog/table-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/emoji-dialog/emoji-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/goto-line-dialog/goto-line-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/help-dialog/help-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/html-entities-dialog/html-entities-dialog"</span>);</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">"./plugins/preformatted-text-dialog/preformatted-text-dialog"</span>);</span><br><span class="line">	<span class="keyword">var</span> editormd = <span class="built_in">require</span>(<span class="string">"./editormd"</span>);</span><br><span class="line">	<span class="comment">//console.log($, editormd);</span></span><br><span class="line">	<span class="comment">//console.log(require.resolve("./editormd"));</span></span><br><span class="line">	<span class="keyword">var</span> uri = (<span class="built_in">module</span>.uri);</span><br><span class="line">	<span class="comment">//console.log(uri.substr(0,(uri.length-11))); </span></span><br><span class="line">	<span class="keyword">var</span> libpath = uri.substr(<span class="number">0</span>,(uri.length<span class="number">-11</span>))+<span class="string">"lib/"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//exports.foo = 'bar';</span></span><br><span class="line">	exports.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	 	<span class="comment">//alert('dosomething');</span></span><br><span class="line">	 			        testEditor = editormd(<span class="string">"test-editormd"</span>, &#123;</span><br><span class="line">		            width: <span class="string">"90%"</span>,</span><br><span class="line">		            height: <span class="number">640</span>,</span><br><span class="line">		            path : libpath,</span><br><span class="line">		            markdown : <span class="string">'ddddd'</span>,</span><br><span class="line">		            <span class="comment">//toolbar  : false,             //关闭工具栏</span></span><br><span class="line">		            htmlDecode : <span class="literal">true</span>,            <span class="comment">// 开启HTML标签解析，为了安全性，默认不开启</span></span><br><span class="line">		            tex : <span class="literal">true</span>,                   <span class="comment">// 开启科学公式TeX语言支持，默认关闭</span></span><br><span class="line">		            <span class="comment">//previewCodeHighlight : false,  // 关闭预览窗口的代码高亮，默认开启</span></span><br><span class="line">		            flowChart : <span class="literal">true</span>,              <span class="comment">// 疑似Sea.js与Raphael.js有冲突，必须先加载Raphael.js，Editor.md才能在Sea.js下正常进行；</span></span><br><span class="line">		            sequenceDiagram : <span class="literal">true</span>,        <span class="comment">// 同上</span></span><br><span class="line">		            onload : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		                <span class="built_in">console</span>.log(<span class="string">'onload'</span>, <span class="keyword">this</span>);</span><br><span class="line">		                <span class="comment">//this.fullscreen();</span></span><br><span class="line">		                <span class="comment">//this.unwatch();</span></span><br><span class="line">		                <span class="comment">//this.watch().fullscreen();</span></span><br><span class="line">		</span><br><span class="line">		                <span class="comment">//this.setMarkdown("#PHP");</span></span><br><span class="line">		                <span class="comment">//this.width("100%");</span></span><br><span class="line">		                <span class="comment">//this.height(480);</span></span><br><span class="line">		                <span class="comment">//this.resize("100%", 640);</span></span><br><span class="line">		            &#125;</span><br><span class="line">		        &#125;);</span><br><span class="line">	 	</span><br><span class="line">	 &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Mdeditor</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//这两个是冲突的 module.exports和exports只能出现一个</span></span><br><span class="line">	<span class="comment">//module.exports 返回的是个对象,exports返回的是属性和方法</span></span><br><span class="line">	<span class="comment">//module.exports = Mdeditor;</span></span><br><span class="line">	</span><br><span class="line">	Mdeditor.prototype.call = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		alert(<span class="string">'ddd'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>mainjs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">	<span class="keyword">var</span> editormd =  <span class="built_in">require</span>(<span class="string">"editormd"</span>);</span><br><span class="line">	editormd.doSomething();</span><br><span class="line">	alert(editormd.foo);</span><br><span class="line">	<span class="comment">//当使用对象时 还得new一下才可以</span></span><br><span class="line"><span class="comment">//	var e = new editormd();</span></span><br><span class="line"><span class="comment">//		e.call();</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p>在seajs.use()的时候加载的模块是自动引用的,不用想上面的定义模块时,require一下,直接就可用了.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // 并发加载模块 a 和模块 b，并在都加载完成时，执行指定回调</span></span><br><span class="line">seajs.use([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  a.init();</span><br><span class="line">  b.init();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            seajs.config(&#123;</span><br><span class="line">                base  : <span class="string">"./"</span>,</span><br><span class="line">                alias : &#123;</span><br><span class="line">                    jquery   : <span class="string">"js/jquery.min"</span>,</span><br><span class="line">                    <span class="comment">//editormd : "../../editormd"</span></span><br><span class="line">                    editormd : <span class="string">"../editormd"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//seajs.use("./js/seajs-main"); //使用main.js时 editormd 路径要改为 "../../editormd"</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> deps = [</span><br><span class="line">                <span class="string">"jquery"</span>, </span><br><span class="line">                <span class="string">"editormd"</span>, </span><br><span class="line">                <span class="string">"../languages/en"</span>, </span><br><span class="line">                <span class="string">"../plugins/link-dialog/link-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/reference-link-dialog/reference-link-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/image-dialog/image-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/code-block-dialog/code-block-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/table-dialog/table-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/emoji-dialog/emoji-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/goto-line-dialog/goto-line-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/help-dialog/help-dialog"</span>,</span><br><span class="line">                <span class="string">"../plugins/html-entities-dialog/html-entities-dialog"</span>, </span><br><span class="line">                <span class="string">"../plugins/preformatted-text-dialog/preformatted-text-dialog"</span></span><br><span class="line">            ];</span><br><span class="line">			</span><br><span class="line">            seajs.use(deps, <span class="function"><span class="keyword">function</span>(<span class="params">$, editormd</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> testEditor;</span><br><span class="line">                </span><br><span class="line">                $.get(<span class="string">"./test.md"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">md</span>)</span>&#123;</span><br><span class="line">                    testEditor = editormd(<span class="string">"test-editormd"</span>, &#123;</span><br><span class="line">                        width: <span class="string">"90%"</span>,</span><br><span class="line">                        height: <span class="number">640</span>,</span><br><span class="line">                        path : <span class="string">'../lib/'</span>,</span><br><span class="line">                        markdown : md,</span><br><span class="line">                        <span class="comment">//toolbar  : false,             // 关闭工具栏</span></span><br><span class="line">                        codeFold : <span class="literal">true</span>,</span><br><span class="line">                        searchReplace : <span class="literal">true</span>,</span><br><span class="line">                        saveHTMLToTextarea : <span class="literal">true</span>,      <span class="comment">// 保存 HTML 到 Textarea</span></span><br><span class="line">                        htmlDecode : <span class="string">"style,script,iframe|on*"</span>,            <span class="comment">// 开启 HTML 标签解析，为了安全性，默认不开启</span></span><br><span class="line">                        emoji : <span class="literal">true</span>,</span><br><span class="line">                        taskList : <span class="literal">true</span>,</span><br><span class="line">                        tocm            : <span class="literal">true</span>,          <span class="comment">// Using [TOCM]</span></span><br><span class="line">                        tex : <span class="literal">true</span>,                      <span class="comment">// 开启科学公式 TeX 语言支持，默认关闭</span></span><br><span class="line">                        <span class="comment">//previewCodeHighlight : false,  // 关闭预览窗口的代码高亮，默认开启</span></span><br><span class="line">                        flowChart : <span class="literal">true</span>,                <span class="comment">// 疑似 Sea.js与 Raphael.js 有冲突，必须先加载 Raphael.js ，Editor.md 才能在 Sea.js 下正常进行；</span></span><br><span class="line">                        sequenceDiagram : <span class="literal">true</span>,          <span class="comment">// 同上</span></span><br><span class="line">                        <span class="comment">//dialogLockScreen : false,      // 设置弹出层对话框不锁屏，全局通用，默认为 true</span></span><br><span class="line">                        <span class="comment">//dialogShowMask : false,     // 设置弹出层对话框显示透明遮罩层，全局通用，默认为 true</span></span><br><span class="line">                        <span class="comment">//dialogDraggable : false,    // 设置弹出层对话框不可拖动，全局通用，默认为 true</span></span><br><span class="line">                        <span class="comment">//dialogMaskOpacity : 0.4,    // 设置透明遮罩层的透明度，全局通用，默认值为 0.1</span></span><br><span class="line">                        <span class="comment">//dialogMaskBgColor : "#000", // 设置透明遮罩层的背景颜色，全局通用，默认为 #fff</span></span><br><span class="line">                        imageUpload : <span class="literal">true</span>,</span><br><span class="line">                        imageFormats : [<span class="string">"jpg"</span>, <span class="string">"jpeg"</span>, <span class="string">"gif"</span>, <span class="string">"png"</span>, <span class="string">"bmp"</span>, <span class="string">"webp"</span>],</span><br><span class="line">                        imageUploadURL : <span class="string">"./php/upload.php"</span>,</span><br><span class="line">                        onload : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'onload'</span>, <span class="keyword">this</span>);</span><br><span class="line">                            <span class="comment">//this.fullscreen();</span></span><br><span class="line">                            <span class="comment">//this.unwatch();</span></span><br><span class="line">                            <span class="comment">//this.watch().fullscreen();</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">//this.setMarkdown("#PHP");</span></span><br><span class="line">                            <span class="comment">//this.width("100%");</span></span><br><span class="line">                            <span class="comment">//this.height(480);</span></span><br><span class="line">                            <span class="comment">//this.resize("100%", 640);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;);</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>  <a href="http://seajs.org/docs/#intro" target="_blank" rel="noopener">http://seajs.org/docs/#intro</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 函数学习]]></title>
      <url>http://elickzhao.github.io/2016/06/php%20%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><strong>查看练习地址</strong>:<br>[<a href="https://ide.c9.io/elickzhao/test(https://ide.c9.io/elickzhao/test" target="_blank" rel="noopener">https://ide.c9.io/elickzhao/test(https://ide.c9.io/elickzhao/test</a>) </p>
<p>[TOC]</p>
<a id="more"></a>
<h2 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>__FILE__</code></td>
<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP 4.0.2 起，<code>__FILE__</code> 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</td>
</tr>
<tr>
<td><code>__DIR__</code></td>
<td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 <code>dirname(__FILE__)</code>。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增） 。</td>
</tr>
<tr>
<td><code>__FUNCTION__</code></td>
<td>函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。</td>
</tr>
<tr>
<td><code>__CLASS__</code></td>
<td>类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如 <code>Foo\Bar</code>）。注意自 PHP 5.4 起 <code>__CLASS__</code> 对 <code>trait</code> 也起作用。当用在 <code>trait</code> 方法中时，<code>__CLASS__</code> 是调用 <code>trait</code> 方法的类的名字。。</td>
</tr>
<tr>
<td><code>__TRAIT__</code></td>
<td><code>Trait</code> 的名字（PHP 5.4.0 新加）。自 PHP 5.4 起此常量返回 <code>trait</code> 被定义时的名字（区分大小写）。<code>Trait</code> 名包括其被声明的作用区域（例如 Foo\Bar）。</td>
</tr>
<tr>
<td><code>__METHOD__</code></td>
<td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。。</td>
</tr>
<tr>
<td><code>__NAMESPACE__</code></td>
<td>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</td>
</tr>
</tbody>
</table>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="array-slice"><a href="#array-slice" class="headerlink" title="array_slice()"></a>array_slice()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//从数组中取出一段</span><br><span class="line">//参数 取出开始位置 取出个数</span><br><span class="line">//返回是个数组</span><br><span class="line">array_slice()</span><br></pre></td></tr></table></figure>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="class-uses"><a href="#class-uses" class="headerlink" title="class_uses()"></a>class_uses()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//返回类所引用的trait  </span><br><span class="line">//参数可以是个 实例 new bar  也可以是个字符串类名 &apos;bar&apos;</span><br><span class="line">//返回的是一个数组结果 </span><br><span class="line">class_uses()</span><br></pre></td></tr></table></figure>
<h3 id="checkdnsrr"><a href="#checkdnsrr" class="headerlink" title="checkdnsrr()"></a>checkdnsrr()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//主要用于检查域名和ip是否正确</span><br><span class="line">//给指定的主机（域名）或者IP地址做DNS通信检查</span><br><span class="line">//参数 ip或者域名 备选参数主机类型 </span><br><span class="line">//返回 一个布尔值</span><br><span class="line">//bool checkdnsrr ( string $host [, string $type = &quot;MX&quot; ] )</span><br><span class="line">checkdnsrr()</span><br></pre></td></tr></table></figure>
<h3 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed call_user_func_array ( callable $callback , array $param_arr )</span><br></pre></td></tr></table></figure>
<h3 id="compact"><a href="#compact" class="headerlink" title="compact()"></a>compact()</h3><p>创建一个包含变量名和它们的值的数组：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$firstname = <span class="string">"Bill"</span>;</span><br><span class="line">$lastname = <span class="string">"Gates"</span>;</span><br><span class="line">$age = <span class="string">"60"</span>;</span><br><span class="line"></span><br><span class="line">$result = compact(<span class="string">"firstname"</span>, <span class="string">"lastname"</span>, <span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">print_r($result);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">Array</span> ( [firstname] =&gt; Bill [lastname] =&gt; Gates [age] =&gt; <span class="number">60</span> )</span><br></pre></td></tr></table></figure></p>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="dirname"><a href="#dirname" class="headerlink" title="dirname()"></a>dirname()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dirname() 函数返回路径中的目录部分。</span></span><br><span class="line">dirname(path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="string">"c:/testweb/home.php"</span>);</span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="string">"/testweb/home.php"</span>);</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"><span class="comment">#output</span></span><br><span class="line"><span class="comment"># c:/testweb</span></span><br><span class="line"><span class="comment"># /testweb</span></span><br></pre></td></tr></table></figure>
<h3 id="date-parse-from-format"><a href="#date-parse-from-format" class="headerlink" title="date_parse_from_format()"></a>date_parse_from_format()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//返回给定日期的详细数组</span><br><span class="line">//参数 格式 给定日期</span><br><span class="line">//返回个数组</span><br><span class="line">//array date_parse_from_format ( string $format , string $date )</span><br><span class="line">date_parse_from_format();</span><br></pre></td></tr></table></figure>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><h3 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var()"></a>filter_var()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//函数通过指定的过滤器过滤变量。如果成功，则返回已过滤的数据，如果失败，则返回 false。</span><br><span class="line">//参数 规定要过滤的变量 可选。规定要使用的过滤器的 ID。 规定包含标志/选项的数组。检查每个过滤器可能的标志和选项。 http://www.w3school.com.cn/php/php_ref_filter.asp</span><br><span class="line"></span><br><span class="line">//filter_var(variable, filter, options)</span><br><span class="line">filter_var</span><br></pre></td></tr></table></figure>
<h3 id="file-exists"><a href="#file-exists" class="headerlink" title="file_exists()"></a>file_exists()</h3><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><h3 id="get-class"><a href="#get-class" class="headerlink" title="get_class()"></a>get_class()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//返回对象的类名</span><br><span class="line">//参数类实例</span><br><span class="line">//返回一个类名字符串</span><br><span class="line">get_class()</span><br></pre></td></tr></table></figure>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><h3 id="ini-set"><a href="#ini-set" class="headerlink" title="ini_set()"></a>ini_set()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。取值用 ini_get()</span><br><span class="line">//参数 $varname  : 选项名称</span><br><span class="line">//参数 $newvalue : 选项新的值</span><br><span class="line">//返回 成功时返回旧的值，失败时返回 FALSE。</span><br><span class="line">string ini_set ( string $varname , string $newvalue )</span><br></pre></td></tr></table></figure>
<h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><h3 id="method-exists"><a href="#method-exists" class="headerlink" title="method_exists()"></a>method_exists()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查类的方法是否存在</span><br><span class="line">//参数 前面是类实例 后面是方法名</span><br><span class="line">//返回是个布尔值</span><br><span class="line">method_exists()</span><br></pre></td></tr></table></figure>
<h2 id="P"><a href="#P" class="headerlink" title="P"></a>P</h2><h3 id="property-exists"><a href="#property-exists" class="headerlink" title="property_exists()"></a>property_exists()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//检查对象或类是否具有该属性</span><br><span class="line">//参数 类 属性名</span><br><span class="line">//返回 布尔值</span><br><span class="line">bool property_exists ( mixed $class , string $property )</span><br><span class="line">property_exists()</span><br></pre></td></tr></table></figure>
<h3 id="preg-split"><a href="#preg-split" class="headerlink" title="preg_split()"></a>preg_split()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//通过一个正则表达式分隔字符串</span><br><span class="line">//参数 搜索模式正则 被搜索的字符串 限度最多被分成几个部分 flags看手册吧讲了很多但不太主要</span><br><span class="line">//返回数组被分割的数组</span><br><span class="line">//array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )</span><br><span class="line">preg_split()</span><br></pre></td></tr></table></figure>
<h3 id="property-exists-1"><a href="#property-exists-1" class="headerlink" title="property_exists()*"></a>property_exists()*</h3><h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><h3 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace()"></a>str_replace()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//该函数子字符串替换</span><br><span class="line">//参数 查询部分 替换部分 字符串</span><br><span class="line">//返回一个字符串或者数组</span><br><span class="line">str_replace() </span><br><span class="line"></span><br><span class="line">#例</span><br><span class="line">echo str_replace(&quot;world&quot;,&quot;Shanghai&quot;,&quot;Hello world!&quot;);</span><br><span class="line">-----</span><br><span class="line">#output</span><br><span class="line"># Hello Shanghai!</span><br></pre></td></tr></table></figure>
<h2 id="U"><a href="#U" class="headerlink" title="U"></a>U</h2><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink()"></a>unlink()</h3>]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 操作文件 FileAPI]]></title>
      <url>http://elickzhao.github.io/2016/05/js%20%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%20FileAPI/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址:"></a>项目地址:</h2><p><a href="https://github.com/mailru/FileAPI" target="_blank" rel="noopener">https://github.com/mailru/FileAPI</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>原本打算是操作本地文件,如打开文件,新建文件,保存文件.但好像js是无法坐到这些的.
只能通过一些特别的手段达到一定的效果而已.
这个组件就是搜索时找到的,主要是通过上传时得到文件一些信息,他主要用作图片上传,
文件上传时获得相关内容.而且他还能操作摄像头用于头像.
并且他还有个jquery的插件,主要用处也是上传头像时的相关操作.
</code></pre> <a id="more"></a>   
<h2 id="一些经验"><a href="#一些经验" class="headerlink" title="一些经验"></a>一些经验</h2><pre><code>因为不符合我的需求所以没太深入研究,只是测试下了获得上传文件内容.
把项目下载下来后,把下个文件放在根目录里就可以了.
还有一点注意,必须放在php环境里,要不会出错.
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no, width=400, initial-scale=0.8, maximum-scale=0.8"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">		<span class="comment">// Объект настройки</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> FileAPI = &#123;</span></span><br><span class="line"><span class="javascript">			debug: <span class="literal">true</span>, <span class="comment">// режим отладки</span></span></span><br><span class="line"><span class="javascript">			staticPath: <span class="string">'./'</span> <span class="comment">// путь до флешек</span></span></span><br><span class="line"><span class="undefined">		&#125;;</span></span><br><span class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/FileAPI.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'my-input'</span> <span class="attr">id</span>=<span class="string">'singleFile'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">	(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		FileAPI.event.on(singleFile,<span class="string">'change'</span> ,<span class="function"><span class="keyword">function</span> (<span class="params">evt<span class="regexp">/**Event*/</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		  <span class="comment">// Retrieve file list</span></span></span><br><span class="line"><span class="javascript">		  <span class="keyword">var</span> files = FileAPI.getFiles(singleFile);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">				<span class="keyword">if</span>( files.length )&#123;</span></span><br><span class="line"><span class="javascript">					FileAPI.each(files, <span class="function"><span class="keyword">function</span> (<span class="params">file</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">						FileAPI.readAsText(file, <span class="string">"utf-8"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt<span class="regexp">/**Object*/</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						  <span class="keyword">if</span>( evt.type == <span class="string">'load'</span> )&#123;</span></span><br><span class="line"><span class="javascript">						    <span class="comment">// Success</span></span></span><br><span class="line"><span class="javascript">						     <span class="keyword">var</span> text = evt.result;</span></span><br><span class="line"><span class="javascript">						     <span class="comment">//console.log(text);</span></span></span><br><span class="line"><span class="undefined">						     alert(text);</span></span><br><span class="line"><span class="javascript">						  &#125; <span class="keyword">else</span> <span class="keyword">if</span>( evt.type ==<span class="string">'progress'</span> )&#123;</span></span><br><span class="line"><span class="javascript">						    <span class="keyword">var</span> pr = evt.loaded/evt.total * <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">						    <span class="built_in">console</span>.log(pr);</span></span><br><span class="line"><span class="undefined">						  &#125; </span></span><br><span class="line"><span class="undefined">						&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">					&#125;);</span></span><br><span class="line"><span class="undefined">				&#125;</span></span><br><span class="line"><span class="undefined">		&#125;);</span></span><br><span class="line"><span class="undefined">	&#125;)();</span></span><br><span class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Editor.md Examples 不错的在线编辑MD文件工具]]></title>
      <url>http://elickzhao.github.io/2016/05/Editor.md%20Examples%20%E4%B8%8D%E9%94%99%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91MD%E6%96%87%E4%BB%B6%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>项目主页:<br><a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">https://pandao.github.io/editor.md/</a></p>
<hr>
<p>先简单说两点:</p>
<ul>
<li>可以不借助php环境使用 因为主要基于js的</li>
<li>但是有些插件却是必须使用php环境,比如 emoji,preformatted-text 这两个, 一个是标签 一个html图形</li>
<li>目前来说他只能在线编辑,却不能保存和打开文件 这个我想加上</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 安装 (windows)]]></title>
      <url>http://elickzhao.github.io/2016/05/laravel%20%E5%AE%89%E8%A3%85%20(windows)/</url>
      <content type="html"><![CDATA[<p><strong>第一步 安装composer</strong><br> 从这里 <a href="https://getcomposer.org/download/" target="_blank" rel="noopener">https://getcomposer.org/download/</a> 后直接安装即可 切记需先安装php 并且版本支持做开发项目</p>
<p><strong>第二步 配置composer镜像仓库</strong><br><figure class="highlight plain"><figcaption><span>config -g repo.packagist composer</span><a href="https://packagist.phpcomposer.com```" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入这行代码即可 你可以在任意位置打开命令窗口输入 这样就是全局配置 </span><br><span class="line">当如你也可以进入项目根目录 在那里打开命令窗口输入 这样就是那个项目的配置而不是全局的 以后开发项目年还有选择的机会</span><br><span class="line"></span><br><span class="line">**第三步 安装laravel**</span><br><span class="line">```composer create-project laravel/laravel myapp --prefer-dist</span><br></pre></td></tr></table></figure></p>
<p>使用这句就可以创建新的项目 myapp为指定目录<br>如果遇到报错 请用 <figure class="highlight plain"><figcaption><span>selfupdate``` 更新一下 然后尝试安装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以上你的laravel项目已经建立完成 那么动手写吧</span><br><span class="line"></span><br><span class="line">**必要补充**</span><br><span class="line">你也可以使用laravel安装器 然后通过安装器来建立新的项目</span><br><span class="line">```composer global require &quot;laravel/installer=~1.1&quot;</span><br></pre></td></tr></table></figure></p>
<p>使用上面代码安装laravel安装器并确保 <em>C:\Users\ <code>你用户名</code>\AppData\Roaming\Composer\vendor\bin</em><br>或者 <em>C:\ProgramData\ComposerSetup\bin</em> 因为我当前机器的系统环境变量是这里<br>下面有<code>laravel.bat</code>这个文件<br>接下来你就可以使用<br><code>laravel new blog</code>来建立项目了 blog为你的项目名</p>
<p>好了 就是这些 开始码代码吧</p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel项目 基本开发流程]]></title>
      <url>http://elickzhao.github.io/2016/05/Laravel%E9%A1%B9%E7%9B%AE%20%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>###用composer建立项目<br>莫名其妙的5.1.11的库文件少了 <figure class="highlight plain"><figcaption><span>这个目录所以拿composer无法创建了 只好创建5.2 或者下载一键安装包</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">composer create-project laravel/laravel myapp --prefer-dist</span><br></pre></td></tr></table></figure></p>
<p>###配置项目环境</p>
<ul>
<li>配置数据连接<br>  打开.env文件进行配置 (这个必须先行配置 要不下面插件安装会提示错误) 还有就是config里的database.php的配置文件一般是用于多数据库连接时在里面进行修改</li>
<li>初始化composer<br>  在配置里搜索composer然后把 composer.phar地址填写进去 没有的话 就按照提示下载一个或者安装一下 (C:\ProgramData\ComposerSetup\bin\composer.phar 这是我的位置仅供参考)然后点确定初始化完成</li>
<li>配置Command Line Tool Support<br>  1 点击添加 选择Tool based on Symfony Console 确定<br>  2 起一个别名 然后添加脚本地址 也就是artisan所在位置 如果php.exe不在运行环境里 那也得选择地址<br>  3 完成后可以点编辑选择是当前项目下使用 还是全局使用(<del>上次我是选择当期项目下 这次新建立项目就又装了一遍 这次我选全局了 看看下次开项目是不是还用再装一遍</del>  <del>已经正事了是全局的 第二次不用配置了</del> 看来我又错了 虽然为全局的不用安装 但是命令还在那个命名空间 所以生成的文件还在老的项目里 而不能生成在新的项目所以没用)<br>  4 配置文件可以复制进去 但是必须替换里面的项目名 要不会报错<br>##注意<br>Command Line Tool Support 在laravel 5.2里配置artisan会报错 具体原因不明 也许是我的phpstorm版本的问题 我这个一直没升级 还是10.0.1  其实命令是好使的在cmd里 只不过还得输入那么多 所以项目降级到laravel 5.1了 这次遇到的麻烦太多了 5.1还不能用composer生成线上的库不知道什么问题缺少vendor 所以只能用一键安装包来新建项目 而且5.2插件支持也变了所以原本打算用5.2最后也是放弃了</li>
</ul>
<a id="more"></a>
<p>###给phpstrom安装插件</p>
<ul>
<li><p>Laravel plugin</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//phpstrom自带插件在配置里的plugins里搜索Laravel就开会出现了  (这个能提示大多数代码)</span><br><span class="line">//注意有个问题 虽然可以不用重新安装 但是没打开一个新的项目就得重新激活一下</span><br><span class="line">// 设置 -&gt; 其他设置 -&gt; laravel plugin -&gt; Enable plugin for this project</span><br><span class="line">//这样这个插件才好使</span><br></pre></td></tr></table></figure>
</li>
<li><p>Laravel-ide-helper </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//安装程序</span><br><span class="line">composer require barryvdh/laravel-ide-helper</span><br><span class="line">//配置文件到 config &gt; app.php &gt; 服务数组里</span><br><span class="line">Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,</span><br><span class="line">//生成提示文件 这样一些静态命令才会有提示</span><br><span class="line">php artisan ide-helper:generate</span><br><span class="line">//在composer.json里 添加更新时命令 (为确保提示为最新的 当加载程序变更时 自动重启生成 顺序不能变)</span><br><span class="line">        &quot;pre-update-cmd&quot;: [</span><br><span class="line">            &quot;php artisan clear-compiled&quot;,</span><br><span class="line">            &quot;php artisan ide-helper:generate&quot;,</span><br><span class="line">            &quot;php artisan optimize&quot;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>
</li>
<li><p>illuminate/html<br>这个包在laravel 5.2下换名了 所以不能用下面那个地址了 改成了 <figure class="highlight plain"><figcaption><span>"5.2.*"``` 包的位置也换成了 ```Collective\Html\```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">//安装程序</span><br><span class="line">composer require illuminate/html:^5.0</span><br><span class="line">//配置程序</span><br><span class="line">Illuminate\Html\HtmlServiceProvider::class,</span><br><span class="line">//设置门面别名 也就是app.php配置文件里的aliases数组里 感觉设置一个就行了 两个都是相同的</span><br><span class="line">&apos;Form&apos;      =&gt; Illuminate\Html\FormFacade::class,</span><br><span class="line">&apos;Html&apos;      =&gt; Illuminate\Html\HtmlFacade::class,</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">在模版文件里From::不出提示 </span><br><span class="line">那是因为直接用了composer require这样直接安装 而不是使用写在composer.json里用 update安装 所以ide-helper命令没有执行</span><br><span class="line">解决办法:手动update一下,或者ide-helper命令一下 提示就会出现了</span><br><span class="line">还有个一劳永逸的方法就是 把这个命令再放到 &quot;pre-install-cmd&quot; 数组里 这样安装的时候也自动执行了</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>Laravel Debugbar</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//安装程序</span><br><span class="line">composer require barryvdh/laravel-debugbar</span><br><span class="line">//配置程序</span><br><span class="line">Barryvdh\Debugbar\ServiceProvider::class,</span><br><span class="line">//配置门面别名</span><br><span class="line">&apos;Debugbar&apos; =&gt; Barryvdh\Debugbar\Facade::class,</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Command Line Tool Support<br><a href="https://confluence.jetbrains.com/display/PhpStorm/Command+Line+Tools" target="_blank" rel="noopener">官方参考文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#上面已经配置好了 就可以直接用了 使用Ctrl+Shift+X调用Command Line工具 在里面直接输入artisan命令 可以提示和补全 很方便</span><br><span class="line">#还有个问题是自定义命令的话 是不会加到提示里的比如我自己加的make:view(已经确定可以加提示) 但是可以自己手动添加提示 就在配置页面的open definition on editor这个选项 就是右侧第四个 点开这个就会出现一个xml文件 按着格式把命令填进去后面就可以使用了</span><br><span class="line">#以后也许可以写个程序自动添加进去</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>###建立数据库<br>数据库已经在上面环境配置建立完毕,现在开始建立所需要的表</p>
<ul>
<li><p>建立模型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//用命令直接建立模型和数据库迁移</span><br><span class="line">artisan make:model Model/Task -m</span><br><span class="line"></span><br><span class="line">//修改迁移文件</span><br><span class="line">#2016_03_17_085421_create_tasks_table.php</span><br><span class="line">    public function up()</span><br><span class="line">    &#123;</span><br><span class="line">        Schema::create(&apos;tasks&apos;, function (Blueprint $table) &#123;</span><br><span class="line">            $table-&gt;increments(&apos;id&apos;);</span><br><span class="line">            $table-&gt;string(&apos;name&apos;); //增加个字段name</span><br><span class="line">            $table-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//执行迁移命令</span><br><span class="line">artisan migrate</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写路由</p>
</li>
<li>编写模版</li>
</ul>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下tree命令]]></title>
      <url>http://elickzhao.github.io/2016/05/linux%E4%B8%8Btree%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>windows下是有<code>tree</code>命令的,可以打印出目录结构.但是linux下却不是默认安装的.</p>
<blockquote>
<p>Note:准确的说是ubuntu下没有,因为其他发行版本我还没有试过.</p>
</blockquote>
<h2 id="首先安装-tree"><a href="#首先安装-tree" class="headerlink" title="首先安装 tree"></a>首先安装 <strong>tree</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tree</span><br></pre></td></tr></table></figure>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 星号代表层级数,想看到那层写那个,默认全都显示.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 而且不想windows只显示目录,默认是会显示目录和文件</span></span><br><span class="line">tree -L * </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只显示目录 不显示文件</span></span><br><span class="line">tree -d </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更多说明看这个吧 都很简单</span></span><br><span class="line">tree --help</span><br></pre></td></tr></table></figure>
<p>##文章参考:<br><a href="http://jingyan.baidu.com/article/acf728fd19c7eff8e510a3eb.html" target="_blank" rel="noopener">linux tree命令以树形结构显示文件目录结构</a></p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[现代 PHP 新特性系列 —— 善用接口]]></title>
      <url>http://elickzhao.github.io/2016/05/%E7%8E%B0%E4%BB%A3%20PHP%20%E6%96%B0%E7%89%B9%E6%80%A7%E7%B3%BB%E5%88%97%20%E2%80%94%E2%80%94%20%E5%96%84%E7%94%A8%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接口一直让我很晕,下面这篇文章有了很好的说明.<br><a href="http://laravelacademy.org/post/4246.html" target="_blank" rel="noopener">现代 PHP 新特性系列（二） —— 善用接口</a><br>这里我就再简单化下,以便我能快速记忆.</p>
<hr>
<h1 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h1><h2 id="接口说直观点就是模具-或者说API"><a href="#接口说直观点就是模具-或者说API" class="headerlink" title="接口说直观点就是模具,或者说API"></a>接口说直观点就是模具,或者说API</h2><ul>
<li><p>API说<br>说他像API,是因为他提出来所有功能.你知道接口有什么,你就知道你能做什么了</p>
</li>
<li><p>模具说<br>说他像模具,是因为接口的功能是统一的,一致的.但是实现的方法可以不同.就像你做一个花瓶的模具,但是根据填充的材料不同,可以做出不同的花瓶.什么玻璃的,陶瓷的,珐琅的.虽然他们长的都一个样.</p>
</li>
</ul>
<h2 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h2><p>所以接口的作用,就是解耦.</p>
<p>比如一个DB类流程:</p>
<ul>
<li>DB操作类,根据DB接口提供的功能,进行具体功能开发.</li>
<li>DB实例化的时候,必须传入符合DB接口的DB驱动类.(符合接口保证功能可用,而且不符合接口也会报错)</li>
<li>DB操作类,根据传入不同DB驱动实例,达到解耦的作用.(因为功能名称都是统一的)</li>
</ul>
<a id="more"></a>
<p><strong>大致如下图:</strong><br><img src="/image/16-5/interface.svg" alt="接口流程图"></p>
<p><strong>代码参考 用的不是DB的例子</strong><br><strong>Store类</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Cache</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Store</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieve an item from the cache by key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string|array  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieve multiple items from the cache by key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Items not found in the cache will have a null value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">many</span><span class="params">(array $keys)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store an item in the cache for a given number of minutes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int     $minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span><span class="params">($key, $value, $minutes)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store multiple items in the cache for a given number of minutes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putMany</span><span class="params">(array $values, $minutes)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increment the value of an item in the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">($key, $value = <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decrement the value of an item in the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decrement</span><span class="params">($key, $value = <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store an item in the cache indefinitely.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">forever</span><span class="params">($key, $value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove an item from the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">forget</span><span class="params">($key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove all items from the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the cache key prefix.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrefix</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>MemcachedStore类</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Cache</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Memcached</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Cache</span>\<span class="title">Store</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemcachedStore</span> <span class="keyword">extends</span> <span class="title">TaggableStore</span> <span class="keyword">implements</span> <span class="title">Store</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Memcached instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \Memcached</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $memcached;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A string that should be prepended to keys.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $prefix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new Memcached store.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Memcached  $memcached</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string      $prefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($memcached, $prefix = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setPrefix($prefix);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;memcached = $memcached;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieve an item from the cache by key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string|array  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $value = <span class="keyword">$this</span>-&gt;memcached-&gt;get(<span class="keyword">$this</span>-&gt;prefix.$key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;memcached-&gt;getResultCode() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieve multiple items from the cache by key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Items not found in the cache will have a null value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">many</span><span class="params">(array $keys)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $prefixedKeys = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prefix.$key;</span><br><span class="line">        &#125;, $keys);</span><br><span class="line"></span><br><span class="line">        $values = <span class="keyword">$this</span>-&gt;memcached-&gt;getMulti($prefixedKeys, <span class="keyword">null</span>, Memcached::GET_PRESERVE_ORDER);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;memcached-&gt;getResultCode() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> array_fill_keys($keys, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array_combine($keys, $values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store an item in the cache for a given number of minutes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int     $minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span><span class="params">($key, $value, $minutes)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;memcached-&gt;set(<span class="keyword">$this</span>-&gt;prefix.$key, $value, $minutes * <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store multiple items in the cache for a given number of minutes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putMany</span><span class="params">(array $values, $minutes)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $prefixedValues = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">           $prefixedValues[<span class="keyword">$this</span>-&gt;prefix.$key] = $value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;memcached-&gt;setMulti($prefixedValues, $minutes * <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store an item in the cache if the key doesn't exist.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int     $minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($key, $value, $minutes)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;memcached-&gt;add(<span class="keyword">$this</span>-&gt;prefix.$key, $value, $minutes * <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increment the value of an item in the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">($key, $value = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;memcached-&gt;increment(<span class="keyword">$this</span>-&gt;prefix.$key, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decrement the value of an item in the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decrement</span><span class="params">($key, $value = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;memcached-&gt;decrement(<span class="keyword">$this</span>-&gt;prefix.$key, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store an item in the cache indefinitely.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">forever</span><span class="params">($key, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;put($key, $value, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove an item from the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">forget</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;memcached-&gt;delete(<span class="keyword">$this</span>-&gt;prefix.$key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove all items from the cache.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flush</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;memcached-&gt;flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the underlying Memcached connection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Memcached</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMemcached</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;memcached;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the cache key prefix.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrefix</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the cache key prefix.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $prefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrefix</span><span class="params">($prefix)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prefix = ! <span class="keyword">empty</span>($prefix) ? $prefix.<span class="string">':'</span> : <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>CacheStore类</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Tests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Cache</span>\<span class="title">Store</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $store;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Store $store)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store = $store;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;store-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span><span class="params">($key, $value, $minutes=<span class="number">1</span>)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store-&gt;put($key, $value, $minutes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">forget</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store-&gt;forever($key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flush</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store-&gt;flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用CacheStore类</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$memcached = <span class="keyword">new</span> \Memcached();</span><br><span class="line">$memcached-&gt;addServer(<span class="string">'localhost'</span>,<span class="number">11211</span>);</span><br><span class="line">$memcachedCache = <span class="keyword">new</span> MemcachedStore($memcached);</span><br><span class="line">$cacheStore = <span class="keyword">new</span> CacheStore($memcachedCache);</span><br><span class="line">$cacheStore-&gt;put(<span class="string">'site'</span>,<span class="string">'http://LaravelAcademy.org'</span>);</span><br><span class="line">dd($cacheStore-&gt;get(<span class="string">'site'</span>));</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel框架加载流程]]></title>
      <url>http://elickzhao.github.io/2016/05/laravel%E6%A1%86%E6%9E%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><img src="/image/16-5/bootstrap.svg" alt="启动流程"></p>
<a id="more"></a>
<p><strong>public/index.php</strong></p>
<blockquote>
<p>此文件会加载由 Composer 生成的自动加载器定义<br>并获取由 bootstrap/app.php 文件中所生成的 Laravel 应用程序实例</p>
</blockquote>
<p><strong>bootstrap/app.php</strong></p>
<blockquote>
<p>生成Laravel应用程序实例 $app<br>并且绑定核心 App\Http\Kernel::class 或 App\Console\Kernel::class<br>这取决于请求类型 在这里请求经过一些列操作 最终返回浏览器</p>
</blockquote>
<p><strong>app/Http/Kernel.php</strong></p>
<blockquote>
<p>一般情况是 HTTP 请求,所以主要说些这个<br>这个类继承自 Illuminate\Foundation\Http\Kernel 它定义了一个 bootstrappers 数组，在请求被运行前会先行运作。这些启动器设置了错误处理、日志记录、侦测应用程序环境，并运行其它需要在请求实际处理前就该被完成掉的工作。<br>其实这个过程就是 启动框架的服务提供者 -&gt; Illuminate\Foundation\Bootstrap\BootProviders  这个继承自 Illuminate\Contracts\Foundation\Application  但是实现却是一开始的 Illuminate\Foundation\Application 也就是创建框架实例那个文件里 有这个方法 <del>(有点搞不懂 继承自一个接口,接口没有功能,自己也没有功能,而下面实现这个功能的又没有继承他 那如何找到这个功能的呢)</del> <a href="http://elickzhao.github.io/2016/05/%E7%8E%B0%E4%BB%A3%20PHP%20%E6%96%B0%E7%89%B9%E6%80%A7%E7%B3%BB%E5%88%97%20%E2%80%94%E2%80%94%20%E5%96%84%E7%94%A8%E6%8E%A5%E5%8F%A3/#more">看这里接口说明</a><br>app/Http/Kernel.php<br>HTTP 核心也定义了一份 HTTP 中间件 清单，所有的请求在被应用程序处理之前都必须经过它们。这些中间件处理 HTTP session 的读写、验证 CSRF 令牌、决定应用程序是否处于维护模式，以及其它更多任务作。</p>
</blockquote>
<p><strong>router</strong></p>
<blockquote>
<p>所有服务提供者加载完毕后,把request请求转移给router路由器<br>经过router分派给route(路由)或者controller,并运行中间件处理后返回response(响应)</p>
</blockquote>
<p><img src="/image/16-5/2.svg" alt="启动流程"></p>
<p>整个启动流程,主要涉及的几个文件如下<br>public/index.php,bootstrap/app.php,app/Http/Kernel.php,<br>除了Kernel另外两个文件去掉注释,基本很简洁</p>
<p><strong>public/index.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入composer自动加载程序</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动框架,生成应用程序</span></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行应用程序,接收Request请求</span></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//经过路由器分发到路由,控制器,中间件的处理返回Response</span></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"><span class="comment">//发送响应到浏览器</span></span><br><span class="line">$response-&gt;send();</span><br><span class="line"><span class="comment">//销毁请求与响应</span></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>bootstrap/app.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建应用程序</span></span><br><span class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</span><br><span class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重要的接口绑定 (会根据不同请求,做不同响应.所以主要说下Http)</span></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回应用程序</span></span><br><span class="line"><span class="keyword">return</span> $app;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>app/Http/Kernel.php</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Kernel</span> <span class="title">as</span> <span class="title">HttpKernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里需要说明下,Kernel继承自HttpKernel也就是框架基础核心.</span></span><br><span class="line"><span class="comment">//基础核心主要作用就是,加载这里配置的中间件,还有就是启动框架的各种服务</span></span><br><span class="line"><span class="comment">//因为该文件内容较多就不展示了,可以自己稍微看一下</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">HttpKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//设置了全局中间件</span></span><br><span class="line">    <span class="keyword">protected</span> $middleware = [</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line">        \App\Http\Middleware\EncryptCookies::class,</span><br><span class="line">        \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</span><br><span class="line">        \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line">        \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line">        \App\Http\Middleware\VerifyCsrfToken::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置了路由中间件</span></span><br><span class="line">    <span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">        <span class="string">'auth'</span> =&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">        <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">        <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">        <span class="string">'test'</span>=&gt; \App\Http\Middleware\TestMiddleware::class,</span><br><span class="line">        <span class="string">'mi'</span>=&gt; \App\Http\Middleware\MiMiddleware::class,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结合图片就大致了解,laravel的启动过程.</p>
<p>通过上面注释文件,估计大多数悟性爆表的同学已经明白整个过程了.还有极少数晕乎少年没有明白.这里再多说几句.</p>
<p>其实整个流程就三部 全部在index.php这个文件里</p>
<ul>
<li><p>启动框架</p>
<blockquote>
<p>这个是由 app.php做到的 并准备好中间 服务待用</p>
</blockquote>
</li>
<li><p>创建http内核</p>
</li>
<li><p>响应请求</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XSS 和 CSRF 跨站攻击]]></title>
      <url>http://elickzhao.github.io/2016/05/XSS%20%E5%92%8C%20CSRF%20%E8%B7%A8%E7%AB%99%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p><strong>xss 编辑</strong><br>跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的特殊目的</p>
<blockquote>
<p>主要防范:<br>过滤客户提交内容,不能信任客户提交内容.目前来看chrome浏览器能够自己屏蔽这个问题.IE还是不行,还得需要强壮的代码.</p>
</blockquote>
<p><strong>CSRF</strong><br>CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>
<blockquote>
<p>主要防范:<br>CSRF主要是伪装请求,所以只要确认不是本站请求,就可以很好的化解这个问题.对于每个表单提交都有个token,然后提交的地址再去验证这个token就可以了</p>
</blockquote>
<p>参考文献:<br><a href="http://blog.csdn.net/smstong/article/details/43561607" target="_blank" rel="noopener">XSS跨站脚本攻击过程最简单演示</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XSS </tag>
            
            <tag> CSRF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 简单自定义个artisan命令]]></title>
      <url>http://elickzhao.github.io/2016/05/laravel%20%E7%AE%80%E5%8D%95%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AAartisan%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>###参考 artisan make:model 而写的 make:view 新建blade模版</p>
<ul>
<li>MakeView.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">Command</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Filesystem</span>\<span class="title">Filesystem</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeView</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name and signature of the console command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $signature = <span class="string">'make:view &#123;name : like content or article/content&#125;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The console command description.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $description = <span class="string">'Create a new blade page'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of class being generated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件系统</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Filesystem</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $files;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new command instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Filesystem $files)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=$files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the console command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        $path = <span class="keyword">$this</span>-&gt;getPath(<span class="keyword">$this</span>-&gt;argument(<span class="string">'name'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;alreadyExists($path))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="keyword">$this</span>-&gt;type.<span class="string">' already exists!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;makeDir($path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;files-&gt;put($path, <span class="keyword">$this</span>-&gt;getStub());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;info(<span class="keyword">$this</span>-&gt;type.<span class="string">' created successfully.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getPath</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base_path(<span class="string">'resources/views'</span>).<span class="string">"/"</span>.$name.<span class="string">".blade.php"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模版是否已经存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">alreadyExists</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;files-&gt;exists($path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">makeDir</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;files-&gt;isDirectory(dirname($path))) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;files-&gt;makeDirectory(dirname($path), <span class="number">0777</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得模版内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $stub //现在默认为bootstrap风格 以后还可以添加妹子UI风格模版等等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Illuminate\Contracts\Filesystem\FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getStub</span><span class="params">($stub=<span class="string">'view.stub'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;files-&gt;get(<span class="keyword">__DIR__</span>.<span class="string">'/stubs/'</span>.$stub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>view.stub<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>New Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>##注意</p>
<blockquote>
<p>想要自定义参数 比如短参数必须使用两个方法 getArguments() 和 getOptions()</p>
</blockquote>
<p>###补充</p>
<blockquote>
<p>又看了遍源码 找到更方便的方法 这个文档里没有写 所以下面两种方法都可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//直接设置属性就可以了 切记短参数放在前面用 | 分割</span><br><span class="line">protected $signature = &apos;make:view &#123;name : like content or article/content&#125; &#123;--l | layout : create new layout&#125;&apos;;</span><br><span class="line"></span><br><span class="line">//这里还要注意一点是 在Parser.php 里的 $matches = preg_split(&apos;/\s*\|\s*/&apos;, $token, 2); 中间的 \| 是转义成了 | 字符 不要在忽略 认为是或了 给自己提个醒</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by elick.</span></span><br><span class="line"><span class="comment"> * Class: MakeView</span></span><br><span class="line"><span class="comment"> * Date: 2016/3/16</span></span><br><span class="line"><span class="comment"> * Time: 18:28</span></span><br><span class="line"><span class="comment"> * Description: Brief description</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">Command</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Filesystem</span>\<span class="title">Filesystem</span>;</span><br><span class="line"><span class="comment">//引入相关类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Console</span>\<span class="title">Input</span>\<span class="title">InputArgument</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Console</span>\<span class="title">Input</span>\<span class="title">InputOption</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeView</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//这里特别注意 取消了 $signature 这个属性 使用$name否则下面两个方法都不好使</span></span><br><span class="line">    <span class="keyword">protected</span> $name = <span class="string">'make:view'</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The console command description.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $description = <span class="string">'Create a new blade page'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of class being generated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $type = <span class="string">'View'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件系统</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Filesystem</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $files;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new command instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Filesystem $files)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = $files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the console command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//XXX 还有一点就是这里了 handle和fire有啥区别 有空看看那</span></span><br><span class="line">        $path = <span class="keyword">$this</span>-&gt;getPath(<span class="keyword">$this</span>-&gt;argument(<span class="string">'name'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;alreadyExists($path)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="keyword">$this</span>-&gt;type . <span class="string">' already exists!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;makeDir($path);</span><br><span class="line"></span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;option(<span class="string">'layout'</span>) ? <span class="keyword">$this</span>-&gt;getStub() : <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;files-&gt;put($path, $content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;info(<span class="keyword">$this</span>-&gt;type . <span class="string">' created successfully.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span>  <span class="title">getPath</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base_path(<span class="string">'resources/views'</span>) . <span class="string">"/"</span> . $name . <span class="string">".blade.php"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">makeDir</span><span class="params">($path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;files-&gt;isDirectory(dirname($path))) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;files-&gt;makeDirectory(dirname($path), <span class="number">0777</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得模版内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $stub //现在默认为bootstrap风格 以后还可以添加妹子UI风格模版等等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Illuminate\Contracts\Filesystem\FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getStub</span><span class="params">($stub = <span class="string">'view.stub'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;files-&gt;get(<span class="keyword">__DIR__</span> . <span class="string">'/stubs/'</span> . $stub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模版是否已经存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">alreadyExists</span><span class="params">($path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;files-&gt;exists($path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getArguments</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [<span class="string">'name'</span>, InputArgument::REQUIRED, <span class="string">'The name of the class'</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getOptions</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [<span class="string">'layout'</span>, <span class="string">'l'</span>, InputOption::VALUE_NONE, <span class="string">'Create a new migration file for the model.'</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 包开发的一些思路]]></title>
      <url>http://elickzhao.github.io/2016/05/laravel%20%E5%8C%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<ul>
<li>ContactServiceProvider 服务提供者<blockquote>
<p>这里面 registerContact() 其实是没用的 应该是调用其他服务功能时才有用.<br>但是这个简单功能完全可通过router和controller完全能实现所以 感觉不需要写个什么服务了.<br>暂时这么理解吧</p>
</blockquote>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">Jai</span>\<span class="title">Contact</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>\<span class="title">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $defer = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//注册模版地址 这里一定要使用realpath() 不是绝对路径就会出错</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadViewsFrom(realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../views'</span>), <span class="string">'contact'</span>);</span><br><span class="line">        <span class="comment">//注册包路由</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;setupRoutes(<span class="keyword">$this</span>-&gt;app-&gt;router);</span><br><span class="line">        <span class="comment">// this for conig</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;publishes([</span><br><span class="line">            <span class="keyword">__DIR__</span>.<span class="string">'/config/contact.php'</span> =&gt; config_path(<span class="string">'contact.php'</span>),</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define the routes for the application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Routing\Router $router</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setupRoutes</span><span class="params">(Router $router)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//设置路由命名空间</span></span><br><span class="line">        $router-&gt;group([<span class="string">'namespace'</span> =&gt; <span class="string">'Jai\Contact\Http\Controllers'</span>], <span class="function"><span class="keyword">function</span><span class="params">($router)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/Http/routes.php'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;registerContact();</span><br><span class="line">        config([</span><br><span class="line">            <span class="string">'config/contact.php'</span>,</span><br><span class="line">        ]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这两句是从stripe里摘出来的 绑定名称 以后注入用</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">'command.cashier.table'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CashierTableCommand;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//这里相当于注册一个command命令 参数:这里就用到上边的绑定注入了</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;commands(<span class="string">'command.cashier.table'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">registerContact</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bind(<span class="string">'contact'</span>,<span class="function"><span class="keyword">function</span><span class="params">($app)</span></span>&#123;</span><br><span class="line">            <span class="comment">//这个绑定毫无意义 也许可能是没有用到</span></span><br><span class="line">            <span class="comment">//return new Contact($app);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> elick($app);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>command 命令</p>
<blockquote>
<p>这个是把stripe里的CashierTableCommand类直接粘过来.<br>简单的来说 就是在database\mrigration 创建个迁移文件 然后把内容复制进去 平并且添加这个命令<br>等安装的时候执行这个命令 并执行 artisan migrate 就安装到数据库里了 并不是自动执行一次性完成的<br>$this-&gt;laravel[]里有很多有用的东西 以后得看看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace Laravel\Cashier;</span><br><span class="line"></span><br><span class="line">use Illuminate\Console\Command;</span><br><span class="line">use Symfony\Component\Console\Input\InputArgument;</span><br><span class="line"></span><br><span class="line">class CashierTableCommand extends Command</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * The console command name.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    protected $name = &apos;cashier:table&apos;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The console command description.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    protected $description = &apos;Create a migration for the Cashier database columns&apos;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute the console command.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function fire()</span><br><span class="line">    &#123;</span><br><span class="line">        //建立迁移文件</span><br><span class="line">        $fullPath = $this-&gt;createBaseMigration();</span><br><span class="line">        //填充迁移文件内容</span><br><span class="line">        file_put_contents($fullPath, $this-&gt;getMigrationStub());</span><br><span class="line"></span><br><span class="line">        $this-&gt;info(&apos;Migration created successfully!&apos;);</span><br><span class="line">        //刷新autoload</span><br><span class="line">        $this-&gt;laravel[&apos;composer&apos;]-&gt;dumpAutoloads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a base migration file for the reminders.</span><br><span class="line">     *</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    protected function createBaseMigration()</span><br><span class="line">    &#123;</span><br><span class="line">        $name = &apos;add_cashier_columns&apos;;</span><br><span class="line"></span><br><span class="line">        $path = $this-&gt;laravel[&apos;path.database&apos;].&apos;/migrations&apos;;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;laravel[&apos;migration.creator&apos;]-&gt;create($name, $path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the contents of the reminder migration stub.</span><br><span class="line">     *</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    protected function getMigrationStub()</span><br><span class="line">    &#123;</span><br><span class="line">        $stub = file_get_contents(__DIR__.&apos;/stubs/migration.stub&apos;);</span><br><span class="line"></span><br><span class="line">        return str_replace(&apos;cashier_table&apos;, $this-&gt;argument(&apos;table&apos;), $stub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the console command arguments.</span><br><span class="line">     *</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    protected function getArguments()</span><br><span class="line">    &#123;</span><br><span class="line">        return [</span><br><span class="line">            [&apos;table&apos;, InputArgument::REQUIRED, &apos;The name of your billable table.&apos;],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>routes 路由表</p>
<blockquote>
<p>上面已经注册了路由地址和命名空间,所以编写路由分配controller就好了</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: elick</span><br><span class="line"> * Date: 2016/4/1</span><br><span class="line"> * Time: 18:15</span><br><span class="line"> */</span><br><span class="line">//因为使用router-&gt;group()这里连命名空间都不用写了</span><br><span class="line">Route::get(&apos;contact&apos;,&apos;ContactController@index&apos;);</span><br></pre></td></tr></table></figure>
<ul>
<li>controller 控制器<blockquote>
<p>这个也很简单 从这个来看 可以使用原本App的模型.但是如何使用自带模型呢?<br><del>我现在的想法是和config一样通过publishes 把model直接复制到App\Models下,<br>也许根本不用,因为现在这个composer已经搜索这个目录 也许直接就可以加载</del><br>放在目录下可以直接加载 只要继承了<br>use Eloquent;<br>use Illuminate\Database\Eloquent\Model;<br>这两个都可以 其实Eloquent 相当于快捷方式 引用的也是下面那个类<br><del>但是还有个问题就是如果有自定义数据库怎么插入数据库 这个一会实验下<br>安装数据库还没看 找到好的包时看一下</del><br>通过stripe包 看到他的方法 看上面命令</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: elick</span><br><span class="line"> * Date: 2016/4/1</span><br><span class="line"> * Time: 18:17</span><br><span class="line"> */</span><br><span class="line">namespace Jai\Contact\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use App\Http\Controllers\Controller;</span><br><span class="line">use App\Models\Post;</span><br><span class="line">use Illuminate\Support\Facades\Config;</span><br><span class="line">use Jai\Contact\Models\Test;</span><br><span class="line">use View;</span><br><span class="line"></span><br><span class="line">class ContactController extends Controller&#123;</span><br><span class="line">    public function index()&#123;</span><br><span class="line">        echo __DIR__.&apos;/../../config&apos;;</span><br><span class="line">        echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        echo realpath(__DIR__.&apos;/../../config&apos;);</span><br><span class="line">        echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        echo &quot;这就是realpath()的区别&quot;;</span><br><span class="line"></span><br><span class="line">        $t = Test::all()-&gt;toArray();</span><br><span class="line">        dump($t);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $posts = Post::all()-&gt;toArray();</span><br><span class="line">        dump($posts);</span><br><span class="line">        dump(Config::get(&apos;contact.message&apos;));</span><br><span class="line">        return view(&apos;contact::contact&apos;);</span><br><span class="line">        //eturn View::make(&apos;contact::contact&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>model</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php namespace Jai\Contact\Models;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: elick</span><br><span class="line"> * Date: 2016/4/5</span><br><span class="line"> * Time: 13:55</span><br><span class="line"> */</span><br><span class="line">use Eloquent;</span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line">class Test extends Model</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>contact.blad.php 模版</p>
<blockquote>
<p>其实模版就没啥写的 就是模版文件 上面的服务提供者provider只要写对路径 剩下就是前端页面的事了 很简单</p>
</blockquote>
</li>
<li><p>config 配置文件</p>
<blockquote>
<p>这里的配置文件没写什么<br>其实关键也就在于如何调用配置文件 使用Config::get()这个方法 然后判断配置内容 根据内容写出逻辑</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: elick</span><br><span class="line"> * Date: 2016/4/1</span><br><span class="line"> * Time: 18:21</span><br><span class="line"> */</span><br><span class="line">return [</span><br><span class="line">    &quot;message&quot; =&gt; &quot;Welcome to My new package&quot;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<ul>
<li>改写composer.json<blockquote>
<p>这里命名空间一定要搞对,因为服务提供者provider 使用的命名空间是 <code>Jai\Contact\</code> 而他的真实路径是 <code>packages/jai/contact/src</code> 所以要这么写</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;classmap&quot;: [</span><br><span class="line">        &quot;database&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">        &quot;App\\&quot;: &quot;app/&quot;,</span><br><span class="line">        &quot;Jai\\Contact\\&quot;:&quot;packages/jai/contact/src&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>接下来两个命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//更新Composer的autoloader</span><br><span class="line">composer dump-autoload</span><br><span class="line"></span><br><span class="line">//将自定义包的配置文件发布到应用根目录的config目录下以便可以访问。</span><br><span class="line">php artisan vendor:publish</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bower 简介]]></title>
      <url>http://elickzhao.github.io/2016/05/bower%20%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>详细内容 请参考这篇文章<br><a href="http://my.oschina.net/Nealyang/blog/632930?fromerr=3goAA2bF" target="_blank" rel="noopener">Bower的简单使用教程</a></p>
<hr>
<p><code>bower init</code> 生成 bower.json 这个是项目安装的组件包<br><code>bower --save XXX</code> 这是本项目安装组件 并记录在bower.json</p>
<p>bowerrc文件简单说明</p>
<blockquote>
<p>directory:是值第三方依赖包下载所在的位置<br>proxy：在很多公司，为了保护公司内网的安全性，是需要配置这个代理的。所以这里一般要配置公司的代理<br>timeout：默认的连接为60000ms，但是当网速不好的时候，可以设置10分钟，”timeout”:600000<br>还有很多大家可以自行查一查哈</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> bower </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bootstrap 该死的IE兼容]]></title>
      <url>http://elickzhao.github.io/2016/05/bootstrap%20%E8%AF%A5%E6%AD%BB%E7%9A%84IE%E5%85%BC%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h1 id="前面碎碎念"><a href="#前面碎碎念" class="headerlink" title="前面碎碎念"></a>前面碎碎念</h1><p>真是不搞页面,不知道弄兼容如此的恶心.当然你一板一眼的写,能避免很多的麻烦,可是利用框架,插件来做,这是烦的要死了.</p>
<p>这次利用了 yoesman+gulp+bower 快速搭建了个项目 其中还用到swiper插件 这个插件 3代主要面对手机 可是有些新特性 2代还没有 真是麻烦 用了3代 兼容性就有麻烦了.</p>
<h1 id="基本解决问题"><a href="#基本解决问题" class="headerlink" title="基本解决问题"></a>基本解决问题</h1><p>bower里有个很好的插件 bootstrap-ie8  <code>bower install --save bootstrap-ie8</code>  安装好后 他能帮你解决大多数的兼容问题</p>
<h1 id="细微修改"><a href="#细微修改" class="headerlink" title="细微修改"></a>细微修改</h1><p>IE 9  不兼容 classList 这个属性 所以需要如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="string">"classList"</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement)) &#123;</span><br><span class="line">    <span class="comment">//兼容ie8  HTMLElement</span></span><br><span class="line">    <span class="built_in">window</span>.HTMLElement = <span class="built_in">window</span>.HTMLElement || Element;</span><br><span class="line">    <span class="comment">//兼容ie9 classlist</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(HTMLElement.prototype, <span class="string">'classList'</span>, &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> classes = self.className.split(<span class="regexp">/\s+/g</span>),</span><br><span class="line">              index = classes.indexOf(value);</span><br><span class="line"></span><br><span class="line">            fn(classes, index, value);</span><br><span class="line">            self.className = classes.join(<span class="string">" "</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          add: update(<span class="function"><span class="keyword">function</span>(<span class="params">classes, index, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!~index) classes.push(value);</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">          remove: update(<span class="function"><span class="keyword">function</span>(<span class="params">classes, index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (~index) classes.splice(index, <span class="number">1</span>);</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">          toggle: update(<span class="function"><span class="keyword">function</span>(<span class="params">classes, index, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (~index)</span><br><span class="line">              classes.splice(index, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              classes.push(value);</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">          contains: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !!~self.className.split(<span class="regexp">/\s+/g</span>).indexOf(value);</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          item: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> self.className.split(<span class="regexp">/\s+/g</span>)[i] || <span class="literal">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>IE 8 不兼容 window.HTMLElement 所以第一行还得加上这一句 IE浏览器也真是够够的了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//兼容ie8  HTMLElement</span></span><br><span class="line"><span class="built_in">window</span>.HTMLElement = <span class="built_in">window</span>.HTMLElement || Element;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> bootstrap </tag>
            
            <tag> 浏览器兼容 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端开发环境简介]]></title>
      <url>http://elickzhao.github.io/2016/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>这篇文章 只是简单介绍 几个框架的主要作用,并不涉及详细用法.</p>
<h1 id="npm-老大中的老大"><a href="#npm-老大中的老大" class="headerlink" title="npm 老大中的老大"></a>npm 老大中的老大</h1><p>npm 不用多说什么 这是一切基础中的基础</p>
<h1 id="yeoman-快速构建项目目录"><a href="#yeoman-快速构建项目目录" class="headerlink" title="yeoman 快速构建项目目录"></a>yeoman 快速构建项目目录</h1><p>其实很多项目开发的时候,目录结构及需要的插件都有一定规律.所以yeoman是解放懒人的又一利器.他的主要作用就是,当你开始一个新项目时不用自己再手动各个目录和安装那些插件,一切都为你准备好,只要一个命令 <code>yo</code>找到你要开发项目,接下来只需等待yeoman帮你建立好所需的一切</p>
<h1 id="bower-找轮子利器"><a href="#bower-找轮子利器" class="headerlink" title="bower 找轮子利器"></a>bower 找轮子利器</h1><p>自己遭轮子虽然有成就感,不过别人写好的东西又何必再去浪费时间.所以bower又是懒人必不可少的.之所以选择bower是因为比npm搜索跟人性化,对我来说目前是这样,我更喜欢bower</p>
<h1 id="gulp-让你更专注的写东西-其他的事情交给gulp吧"><a href="#gulp-让你更专注的写东西-其他的事情交给gulp吧" class="headerlink" title="gulp 让你更专注的写东西 其他的事情交给gulp吧"></a>gulp 让你更专注的写东西 其他的事情交给gulp吧</h1><p>bower是需要实现一些功能的时候去搜索这个功能的插件,比如slider. 而gulp所用的插件是为了给你开发带来便利,并不是你网页上的功能.比如压缩css,js. 比如 sass直接编译好显示.这些都是提供你写代码时的方便.有了gulp 我就不在需要dw了,用sublime就好了.</p>
<hr>
<p>#参考文章:<br><a href="http://www.ruanyifeng.com/blog/2014/09/package-management.html" target="_blank" rel="noopener">前端模块管理器简介</a><br><a href="http://blog.jobbole.com/65399/" target="_blank" rel="noopener">Yeoman官方教程：用Yeoman和AngularJS做Web应用</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> bower </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 银联支付一点总结]]></title>
      <url>http://elickzhao.github.io/2016/05/laravel%20%E9%93%B6%E8%81%94%E6%94%AF%E4%BB%98%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ul>
<li><p>第一步开通测试</p>
<blockquote>
<p>在我的产品中 点击为测试 然后添加要测试的项目 要不然会提示无权限 这里选择网关支付</p>
</blockquote>
</li>
<li><p>下载测试证书</p>
<blockquote>
<p>测试证书要从 个人中心 测试参数哪里下载  <a href="https://open.unionpay.com/ajweb/account/testPara" target="_blank" rel="noopener">https://open.unionpay.com/ajweb/account/testPara</a><br>商户私钥证书 必须安装一下 要不会会出错</p>
</blockquote>
</li>
<li><p>编写代码</p>
</li>
</ul>
<ol>
<li>config\laravel-omnipay.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The default gateway to use</span></span><br><span class="line">	<span class="string">'default'</span> =&gt; <span class="string">'paypal'</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add in each gateway here</span></span><br><span class="line">	<span class="string">'gateways'</span> =&gt; [</span><br><span class="line">		<span class="string">'unionpay'</span> =&gt; [</span><br><span class="line">			<span class="string">'driver'</span>  =&gt; <span class="string">'UnionPay_Express'</span>,</span><br><span class="line">			<span class="string">'options'</span> =&gt; [</span><br><span class="line">				<span class="string">'merId'</span>			 =&gt; <span class="string">'777290058128659'</span>,</span><br><span class="line">				<span class="string">'certPath'</span>		 =&gt;	storage_path(<span class="string">'app/unionpay/certs/700000000000001_acp.pfx'</span>),</span><br><span class="line">				<span class="string">'certPassword'</span>	 =&gt; <span class="string">'000000'</span>,</span><br><span class="line">				<span class="string">'certDir'</span>		 =&gt;	 storage_path(<span class="string">'app/unionpay/certs'</span>),</span><br><span class="line">				<span class="comment">//付款完成后跳转会商家页面地址 两个好像可以写同一个地址</span></span><br><span class="line">				<span class="string">'returnUrl'</span> =&gt; <span class="string">'http://114.254.183.127/omnipay/public/unionpay/return'</span>,</span><br><span class="line">				<span class="string">'notifyUrl'</span> =&gt; <span class="string">'http://114.254.183.127/omnipay/public/unionpay/notify'</span></span><br><span class="line"></span><br><span class="line">			]</span><br><span class="line">		]</span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>routes.php</p>
<blockquote>
<p>回调的方式不要写错了 是 <strong>POST</strong>   </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//银联支付处理</span></span><br><span class="line">Route::get(<span class="string">'unionpay/pay'</span>,<span class="string">'UnionpayController@pay'</span>);</span><br><span class="line"><span class="comment">//支付后回调页面</span></span><br><span class="line">Route::post(<span class="string">'unionpay/return'</span>,<span class="string">'UnionpayController@result'</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>UnionpayController.php</p>
<blockquote>
<p>注意引用的 一定是 Omnipay的门面 因为会自动加载 Omnipay\Omnipay这个类 这是错的 会找不到gateway()方法的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Omnipay</span>;     <span class="comment">//****************  就是这里千万不要搞错 引用的是这个门面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在返回还有点问题 但是无关大雅了 支付流程已经完成了 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionpayController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $gateway = Omnipay::gateway(<span class="string">'unionpay'</span>);</span><br><span class="line"></span><br><span class="line">        $order = [</span><br><span class="line">            <span class="string">'orderId'</span>   =&gt;  date(<span class="string">'YmdHis'</span>),</span><br><span class="line">            <span class="string">'txnTime'</span>   =&gt;  date(<span class="string">'YmdHis'</span>),</span><br><span class="line">            <span class="string">'orderDesc'</span> =&gt;  <span class="string">'My test order title'</span>,</span><br><span class="line">            <span class="string">'txnAmt'</span>    =&gt;  <span class="string">'100'</span>   <span class="comment">//订单价格</span></span><br><span class="line">        ];</span><br><span class="line"><span class="comment">//        dump(config('laravel-omnipay.gateways'));</span></span><br><span class="line"><span class="comment">//        dd(storage_path('app/unionpay/certs/acp_test_sign.pfx'));</span></span><br><span class="line">        $response = $gateway-&gt;purchase($order)-&gt;send();</span><br><span class="line">        $response-&gt;redirect();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">result</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $gateway = Omnipay::getFactory(<span class="string">'unionpay'</span>);</span><br><span class="line">        $response = $gateway-&gt;completePurchase([<span class="string">'request_params'</span>=&gt;$_REQUEST])-&gt;send();</span><br><span class="line">        <span class="keyword">if</span> ($response-&gt;isPaid()) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">'支付成功！'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">'支付失败！'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">notify</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'hhhh'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>测试同调</p>
<blockquote>
<p>有一点一定要记住  <strong>点击获取短信</strong> 后,再填写验证码 要不有可能会提示验证码错误,或者系统忙</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FIREFOX 和 chrome中 如何 禁止鼠标拖拽图片]]></title>
      <url>http://elickzhao.github.io/2016/05/FIREFOX%20%E5%92%8C%20chrome%E4%B8%AD%20%E5%A6%82%E4%BD%95%20%E7%A6%81%E6%AD%A2%E9%BC%A0%E6%A0%87%E6%8B%96%E6%8B%BD%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>##三种办法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.images[i].ondragstart=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;;  </span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    e.preventDefault(); </span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.ondragstart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我用过第三个 ondragstart 这个好使</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Emmet：HTMLCSS 简明介绍]]></title>
      <url>http://elickzhao.github.io/2016/05/Emmet%EF%BC%9AHTMLCSS%20%E7%AE%80%E6%98%8E%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>这里就写几个主要的,详细请看这篇文章:<br><a href="http://www.iteye.com/news/27580" target="_blank" rel="noopener">http://www.iteye.com/news/27580</a><br><a href="http://www.w3cplus.com/tools/using-emmet-speed-front-end-web-development.html" target="_blank" rel="noopener">使用Emmet加速Web前端开发</a></p>
<ul>
<li>初始化 </li>
</ul>
<p>HTML文档需要包含一些固定的标签，比如<html>、<head>、</head><body>等，现在你只需要1秒钟就可以输入这些标签。比如输入“!”或“html:5”，然后按Tab键：</body></html></p>
<ul>
<li>嵌套 </li>
</ul>
<p>现在你只需要1行代码就可以实现标签的嵌套。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;: 子元素符号，表示嵌套的元素</span><br><span class="line">+：同级标签符号</span><br><span class="line">^：可以使该符号前的标签提升一行</span><br></pre></td></tr></table></figure></p>
<ul>
<li>分组 </li>
</ul>
<p>你可以通过嵌套和括号来快速生成一些代码块，比如输入(.foo&gt;h1)+(.bar&gt;h2)，会自动生成如下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>快速添加类名、ID、文本和属性</p>
<ol>
<li>使用E#ID添加ID名</li>
<li>使用E.class添加类名</li>
<li>使用E[attr]添加属性</li>
<li>使用E{text}添加文本</li>
</ol>
</li>
</ul>
<a id="more"></a>
<ul>
<li>隐式标签 </li>
</ul>
<p>声明一个带类的标签，只需输入div.item，就会生成<div class="item"></div>。 </p>
<p>在过去版本中，可以省略掉div，即输入.item即可生成<code>&lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</code>。现在如果只输入.item，则Emmet会根据父标签进行判定。比如在<code>&lt;ul&gt;</code>中输入.item，就会生成<code>&lt;li class=&quot;item&quot;&gt;&lt;/li&gt;</code>。</p>
<ul>
<li>定义多个元素 </li>
</ul>
<p>要定义多个元素，可以使用<em>符号。比如，ul&gt;li</em>3可以生成如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>定义多个带属性的元素 </li>
</ul>
<p>如果输入 ul&gt;li.item$*3，将会生成如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h1 id="emmet-和-css"><a href="#emmet-和-css" class="headerlink" title="emmet 和 css"></a>emmet 和 css</h1><ul>
<li><p>简写<br>width: 100px : w100<br>border-bottom : bdb<br>border-top: bdt<br>font-size : fz</p>
</li>
<li><p>单位:<br>   px→ 默认<br>   p→ %<br>   e→ em<br>   r→ rem<br>   x→ ex</p>
</li>
<li><p>多个单位</p>
</li>
</ul>
<p>CSS中的某些属笥，比如margin，允许多个值。在Emmet中要做到这一点，只需要每个值之间使用破折号(-)。来看看下面的例子，给body定义margin的四个值：</p>
<p>颜色</p>
<ul>
<li><p>在Emmet中使用#前缀，后面紧跟颜色值，但不同的字符数将会输出不同的十六进制代码。来看一些例子：</p>
<p>＃1→ ＃111111<br>＃E0→ ＃e0e0e0<br>＃FC0→ ＃FFCC00</p>
</li>
<li><p>!important</p>
</li>
</ul>
<p>尽管在CSS中!important并不经常使用，但在Emmet也带有一定的缩写。添加!就可以自动生成：</p>
<ul>
<li>多属性</li>
</ul>
<p>现在我们具Emmet的CSS特性的一个基本了解，也是将它们放在一起的时候。就类似于Emmet和HTML中的相邻元素的功能。可以使用加号+运算符来创建多个属性。我们来看一个简单的示例：</p>
<ul>
<li>模糊匹配 </li>
</ul>
<p>如果有些缩写你拿不准，Emmet会根据你的输入内容匹配最接近的语法，比如输入ov:h、ov-h、ovh和oh，生成的代码是相同的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure>
<ul>
<li>供应商前缀 </li>
</ul>
<p>如果输入非W3C标准的CSS属性，Emmet会自动加上供应商前缀，比如输入trs，则会生成： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-webkit-transform: ;  </span><br><span class="line">-moz-transform: ;  </span><br><span class="line">-ms-transform: ;  </span><br><span class="line">-o-transform: ;  </span><br><span class="line">transform: ;</span><br></pre></td></tr></table></figure>
<p>你也可以在任意属性前加上“-”符号，也可以为该属性加上前缀。比如输入-super-foo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-webkit-super-foo: ;</span><br><span class="line">-moz-super-foo: ;</span><br><span class="line">-ms-super-foo: ;</span><br><span class="line">-o-super-foo: ;</span><br><span class="line">super-foo: ;</span><br></pre></td></tr></table></figure></p>
<p>如果不希望加上所有前缀，可以使用缩写来指定，比如-wm-trf表示只加上-webkit和-moz前缀：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-transform: ;</span><br><span class="line">-moz-transform: ;</span><br><span class="line">transform: ;</span><br></pre></td></tr></table></figure></p>
<p>w 表示 -webkit-<br>m 表示 -moz-<br>s 表示 -ms-<br>o 表示 -o-</p>
<ul>
<li>渐变 </li>
</ul>
<p>输入lg(left, #fff 50%, #000)，会生成如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background-image: -webkit-gradient(linear, 0 0, 100% 0, color-stop(0.5, #fff), to(#000));</span><br><span class="line">background-image: -webkit-linear-gradient(left, #fff 50%, #000);</span><br><span class="line">background-image: -moz-linear-gradient(left, #fff 50%, #000);</span><br><span class="line">background-image: -o-linear-gradient(left, #fff 50%, #000);</span><br><span class="line">background-image: linear-gradient(left, #fff 50%, #000);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> Emmet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp使用bower下组件]]></title>
      <url>http://elickzhao.github.io/2016/05/gulp+bower/</url>
      <content type="html"><![CDATA[<p>我的项目使用 yeoman 生成的目录 自带gulpfile.js</p>
<p>想引入bower里组件到html页面 不需要手动写 </p>
<p>执行 gulp 任务 wiredep 就可以了</p>
<p>但后来我引用兼容插件时 没有使用 也自动写入文件了 难道是serve任务的功劳??</p>
<p>这个尚不清楚,反正如果没引入 执行一下这个 wiredep任务就可以了</p>
<p>gulp+bower 使用必须用 wiredep</p>
<p>手动wiredep才可以</p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bower </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github开博客]]></title>
      <url>http://elickzhao.github.io/2016/05/github%E5%BC%80%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><strong>hexo方法</strong><br><a href="https://yangjian.me/workspace/building-blog-with-hexo/" target="_blank" rel="noopener">使用hexo搭建博客</a><br><a href="http://c4fun.cn/blog/2014/03/03/use-hexo-blog/" target="_blank" rel="noopener">使用Hexo搭建个人博客</a><br><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="noopener">使用GitHub和Hexo搭建免费静态Blog</a><br><a href="https://yangjian.me/workspace/building-blog-with-hexo/" target="_blank" rel="noopener">使用hexo搭建博客</a></p>
<h1 id="简明步骤"><a href="#简明步骤" class="headerlink" title="简明步骤"></a>简明步骤</h1><ul>
<li>下载 node.js</li>
<li>安装npm</li>
<li>下载Hexo</li>
<li>创建github新的仓库</li>
<li>配置ssh</li>
<li>配置Hexo配置文件 记得repo:地址是SSH 因为gtihub仓库有两个地址一个https 一个 git 一定要用git那个 那样才能用到ssh的自动上传</li>
<li><p>上传测试</p>
</li>
<li><p>安装主题 修改细节<br><a href="http://wsgzao.github.io/post/hexo-jacman/#" target="_blank" rel="noopener">http://wsgzao.github.io/post/hexo-jacman/#</a><br><a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/" target="_blank" rel="noopener">http://wuchong.me/blog/2014/11/20/how-to-use-jacman/</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phpstrom快捷键及使用技巧]]></title>
      <url>http://elickzhao.github.io/2016/05/phpstrom%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p><code>Alt+Shift+X</code><br>命令行工具 (这个和Terminal有区别这个是laravel自带一些命令 这个好像的装laravel插件才可以用)</p>
<p><code>Ctrl+F12</code><br>呼叫出方法列表</p>
<p><code>Ctrl+Alt+S</code><br>呼出配置</p>
<p><code>Ctrl+P</code><br>快速打开文件</p>
<p><code>Ctrl+Shift+A</code><br>搜索所有配置选项</p>
<p><code>Ctrl+Shift+Z</code><br>撤销刚才的撤销也就是windows上的 Ctrl+Y</p>
<p><code>Ctrl+Q</code><br>显示代码注释</p>
<p><code>Ctrl+E</code><br>最近打开文件</p>
<a id="more"></a>
<p><code>Ctrl + Shift +小键盘+</code><br>展开全部</p>
<p><code>Alt+Enter</code><br>切换编辑语音 比如在php中要编辑html 用这个就可以打开 html编辑然后使用zendcoding快速编辑了</p>
<p><code>Ctrl + Tab</code><br>键切换选项卡和工具窗口</p>
<p><code>Alt + ＃[0-9]</code><br>打开相应的工具窗口 Ctrl+Tab里 能看到各个窗口编号 1 项目目录 3 Terminal</p>
<p><code>CTRL+ALT+F12</code>  资源管理器打开文件夹，跳转至当前文件在磁盘上的位置</p>
<p><code>CTRL+ALT ←/→</code>  返回上次编辑的位置</p>
<p><code>CTRL+ []</code>   光标移动到 {}[]开头或结尾位置</p>
<p><code>CTRL+SHIFT+[]</code>    选中块代码，可以快速复制</p>
<p><code>CTRL+ALT+L</code>  格式化代码</p>
<p><code>CTRL+ALT+I</code>  自动缩进</p>
<p><code>F3</code>   查找下一个</p>
<p><code>SHIFT+F3</code>  查找上一个</p>
<p><code>CTRL+R</code>  当前窗口替换文本</p>
<blockquote>
<p>把两个项目放到一起显示<br>用设置-&gt;项目-&gt; directories 然后添加项目目录就可以了</p>
</blockquote>
<hr>
<blockquote>
<p>当写完一个方法的时候 在方法头部可以用 /** + 回车 然后IDE会自动完成备注 很是方便</p>
</blockquote>
<hr>
<p><a href="http://www.myext.cn/php/a_2818.html" target="_blank" rel="noopener">详细连接 ： http://www.myext.cn/php/a_2818.html</a><br><a href="http://www.cr173.com/html/66775_1.html" target="_blank" rel="noopener">PhpStorm 快捷键大全 PhpStorm 常用快捷键和配置</a></p>
]]></content>
      
        <categories>
            
            <category> php开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> phpstorm </tag>
            
            <tag> ide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp学习]]></title>
      <url>http://elickzhao.github.io/2016/05/gulp%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>简单说下gulp使用流程</p>
<ul>
<li>首先进入 项目目录  npm install –save-dev gulp</li>
<li>其次安装其他所需插件 配置文件里有 就不赘述了</li>
<li>规划目录开始编写</li>
</ul>
<p><a href="https://code.csdn.net/xwiwi/gulp-learning.git" target="_blank" rel="noopener">项目地址</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gulp #目录结构</span><br><span class="line">├─.idea</span><br><span class="line">│  └─libraries</span><br><span class="line">├─app</span><br><span class="line">│  └─assets     # 随便找的测试例子</span><br><span class="line">│      ├─css</span><br><span class="line">│      │  └─font</span><br><span class="line">│      ├─images</span><br><span class="line">│      └─js</span><br><span class="line">├─build         # 第一个实例 输出目录</span><br><span class="line">├─dist          # 第二个实例 输出目录</span><br><span class="line">├─js            # 第一个实例 随便写的js</span><br><span class="line">└─web           # browser-syn 测试 随便写的scss     </span><br><span class="line">    ├─css</span><br><span class="line">    └─scss</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>因为gulp-sass需要node-sass的支持才能用,不过node-sass被墙住了,所以这里共享一个,不过版本是3.7的 如果升级了就自行更换吧<br><a href="https://yunpan.cn/cPI3SEfajJeX9" target="_blank" rel="noopener">https://yunpan.cn/cPI3SEfajJeX9</a>  访问密码 a6b0</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by elick on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* 这是packages.json的配置 不过里面不能写注释所以写在这里了</span></span><br><span class="line"><span class="comment">"devDependencies": &#123;              //常用插件</span></span><br><span class="line"><span class="comment">        "browser-sync": "^2.12.5",      //浏览器同步插件</span></span><br><span class="line"><span class="comment">        "gulp": "^3.9.1",</span></span><br><span class="line"><span class="comment">        "gulp-autoprefixer": "^3.1.0",  //使用Autoprefixer来补全浏览器兼容的css</span></span><br><span class="line"><span class="comment">        "gulp-concat": "^2.6.0",        //合并js</span></span><br><span class="line"><span class="comment">        "gulp-jshint": "^2.0.0",        //检测js有没有报错或警告</span></span><br><span class="line"><span class="comment">        "jshint": "^2.9.2",             // gulp-jshint 不能单独使用 需要配合这个</span></span><br><span class="line"><span class="comment">        "gulp-load-plugins": "^1.2.2",  //读取插件 不用每个都都定义变量了</span></span><br><span class="line"><span class="comment">        "gulp-rename": "^1.2.2",        //改写名字</span></span><br><span class="line"><span class="comment">        "gulp-sass": "^2.3.1",          //解析sass文件</span></span><br><span class="line"><span class="comment">        "node-sass": "^3.7.0"           //gulp-sass不能单独使用需要配合这个 //这个需要翻墙才能npm下载</span></span><br><span class="line"><span class="comment">        "gulp-uglify": "^1.5.3"         //压缩文件</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">    browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个插件的意义就在上面 不用去写那么多注册 这一行就可以搞定了</span></span><br><span class="line"><span class="keyword">var</span> gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>),</span><br><span class="line">    plugins = gulpLoadPlugins();</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'js/app.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'build'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(plugins.concat(<span class="string">'app.js'</span>))  <span class="comment">//这就是那个plugins插件的用法 不需要require(concat)</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'build'</span>));       <span class="comment">//输出目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> watcher = gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, [<span class="string">'build'</span>]);  <span class="comment">//watch() 这个函数自带的 不需要插件</span></span><br><span class="line">    watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Event type: '</span> + event.type); <span class="comment">// added, changed, or deleted</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Event path: '</span> + event.path); <span class="comment">// The path of the modified file</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与上面的watcher.on的功能等同</span></span><br><span class="line">    <span class="comment">//gulp.watch('templates/*.tmpl.html', function (event) &#123;</span></span><br><span class="line">    <span class="comment">//    console.log('Event type: ' + event.type); // added, changed, or deleted</span></span><br><span class="line">    <span class="comment">//    console.log('Event path: ' + event.path); // The path of the modified file</span></span><br><span class="line">    <span class="comment">//&#125;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一篇文章的插件测试 ---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入gulp</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);    <span class="comment">//这个还得配合jshint使用,单独使用不可以</span></span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);    <span class="comment">//经过测试这个组件基本毫无意义 也许有用我现在没发现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其实下面可以写在一起 不过这样分开写不错 因为可以单独执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查脚本</span></span><br><span class="line">gulp.task(<span class="string">'lint'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(jshint())</span><br><span class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译Sass</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并压缩文件</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(concat(<span class="string">'all.min.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'lint'</span>,<span class="string">'sass'</span>,<span class="string">'scripts'</span>); <span class="comment">//运行任务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听文件变化</span></span><br><span class="line">    gulp.watch(<span class="string">'./js/*.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        gulp.run(<span class="string">'lint'</span>,<span class="string">'sass'</span>,<span class="string">'scripts'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// browser-sync 测试 --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这种配置是静态文件配置方法</span></span><br><span class="line"><span class="comment">// 不对 其实把less或者sass也放到监控里其实一样</span></span><br><span class="line"><span class="comment">// 还是错了 还是静态的 因为less和sass需要 gulp转换才可以 目前这里并没有转换任务</span></span><br><span class="line"><span class="comment">//因为单一执行的browser-sync一个任务</span></span><br><span class="line"><span class="comment">//https://github.com/BrowserSync/gulp-browser-sync 这里有很多配置方法的例子</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = [</span><br><span class="line">        <span class="string">'app/**/*.html'</span>,</span><br><span class="line">        <span class="string">'app/assets/css/**/*.css'</span>,</span><br><span class="line">        <span class="string">'app/assets/images/** /*.png'</span>,</span><br><span class="line">        <span class="string">'app/assets/js/**/*.js'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    browserSync.init(files,&#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">            baseDir: <span class="string">'./app/assets'</span> <span class="comment">//这个是主页地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个测试 ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter = <span class="built_in">require</span>(<span class="string">'gulp-filter'</span>);</span><br><span class="line"><span class="keyword">var</span> reload = browserSync.reload;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'b-sync'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//第二种 用watch监控因为 wtach可以写多个  这个服务器写法就得和下面gulp.watch('web/*.html')配合</span></span><br><span class="line">    <span class="comment">//要不只能监控sass变化了</span></span><br><span class="line">    browserSync(&#123;</span><br><span class="line">        server:&#123;</span><br><span class="line">            baseDir: <span class="string">"./web"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种写法 用browserSync 来监控文件</span></span><br><span class="line">    <span class="comment">//这么写也可以啊  而且能监控html文件变化 上面那个只能监控sass文件</span></span><br><span class="line">    <span class="comment">//var files = [</span></span><br><span class="line">    <span class="comment">//    'web/**/*.html',</span></span><br><span class="line">    <span class="comment">//    //'web/**/*.css', //用上这句 其实下面sass任务里的 reload可以去掉 不过速度比那个慢很多所以还是把这个去掉吧</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//];</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//browserSync.init(files,&#123;</span></span><br><span class="line">    <span class="comment">//    server: &#123;</span></span><br><span class="line">    <span class="comment">//        baseDir: './web' //这个是主页地址</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'web/scss/styles.scss'</span>)</span><br><span class="line">        .pipe(sass(&#123;<span class="attr">includePaths</span>:[<span class="string">'web/scss'</span>]&#125;)) <span class="comment">//编译SASS</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'web/css'</span>)) <span class="comment">// 写入CSS目录</span></span><br><span class="line">        .pipe(filter(<span class="string">'web/**/*.css'</span>)) <span class="comment">//过滤流确保CSS文件通过。</span></span><br><span class="line">        .pipe(reload(&#123;<span class="attr">stream</span>:<span class="literal">true</span>&#125;)); <span class="comment">//注入浏览器</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'def'</span>,[<span class="string">'sass'</span>,<span class="string">'b-sync'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'web/scss/*.scss'</span>,[<span class="string">'sass'</span>]);</span><br><span class="line">    gulp.watch(<span class="string">'web/*.html'</span>).on(<span class="string">'change'</span>,reload);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"engines"</span>: &#123;</span><br><span class="line">    <span class="attr">"node"</span>: <span class="string">"&gt;=0.12.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"browser-sync"</span>: <span class="string">"^2.12.5"</span>,</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-concat"</span>: <span class="string">"^2.6.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-jshint"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-load-plugins"</span>: <span class="string">"^1.2.2"</span>,</span><br><span class="line">    <span class="attr">"gulp-uglify"</span>: <span class="string">"^1.5.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考文章:<br><a href="http://www.tuicool.com/articles/AzI3Ib" target="_blank" rel="noopener">Gulp开发教程：Building With Gulp</a><br><a href="https://segmentfault.com/a/1190000000372547" target="_blank" rel="noopener">前端构建工具gulp入门教程</a><br><a href="http://www.mamicode.com/info-detail-517085.html" target="_blank" rel="noopener">前端构建之gulp与常用插件</a><br><a href="https://github.com/BrowserSync/gulp-browser-sync" target="_blank" rel="noopener">Browsersync + Gulp</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm package.json 配置说明]]></title>
      <url>http://elickzhao.github.io/2016/05/npm%20package.json%20%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"studyangular"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"grunt"</span>: <span class="string">"^0.4.5"</span>,</span><br><span class="line">    <span class="attr">"grunt-autoprefixer"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-concurrent"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-clean"</span>: <span class="string">"^0.6.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-compass"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-concat"</span>: <span class="string">"^0.5.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-connect"</span>: <span class="string">"^0.9.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-copy"</span>: <span class="string">"^0.7.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-cssmin"</span>: <span class="string">"^0.12.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-htmlmin"</span>: <span class="string">"^0.4.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-imagemin"</span>: <span class="string">"^0.9.2"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-jshint"</span>: <span class="string">"^0.11.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-uglify"</span>: <span class="string">"^0.7.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-watch"</span>: <span class="string">"^0.6.1"</span>,</span><br><span class="line">    <span class="attr">"grunt-filerev"</span>: <span class="string">"^2.1.2"</span>,</span><br><span class="line">    <span class="attr">"grunt-google-cdn"</span>: <span class="string">"^0.4.3"</span>,</span><br><span class="line">    <span class="attr">"grunt-newer"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-ng-annotate"</span>: <span class="string">"^0.9.2"</span>,</span><br><span class="line">    <span class="attr">"grunt-svgmin"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-usemin"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-wiredep"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"jshint-stylish"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"load-grunt-tasks"</span>: <span class="string">"^3.1.0"</span>,</span><br><span class="line">    <span class="attr">"time-grunt"</span>: <span class="string">"^1.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"engines"</span>: &#123;</span><br><span class="line">    <span class="attr">"node"</span>: <span class="string">"&gt;=0.10.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"grunt test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Private</strong><br>最喜欢这个字段 设置为true下面那些就全部用写了,开发时 或者 不想共享时 就用这个<br>可选字段，布尔值。如果private为true，npm会拒绝发布。这可以防止私有repositories不小心被发布出去。</p>
<a id="more"></a>
<p><strong>Name</strong></p>
<p>必须字段,包名称</p>
<p>小提示：</p>
<ul>
<li>不要在name中包含js, node字样；</li>
<li>这个名字最终会是URL的一部分，命令行的参数，目录名，所以不能以点号或下划线开头；</li>
<li>这个名字可能在require()方法中被调用，所以应该尽可能短；</li>
</ul>
<p><strong>Version</strong><br>必须字段,包版本<br>name和version是package.json中最重要的两个字段，也是发布到NPM平台上的唯一标识，如果没有正确设置这两个字段，包就不能发布和被下载。新版本的NPM可以指定scope, 名字可以加前缀标识，如@ijse/mypackage。</p>
<p><strong>Description</strong></p>
<p>包的描述信息，可选字段，必须是字符串。 npm search 的时候会用到。</p>
<p><strong>Keywords</strong></p>
<p>包的关键词信息，是一个字符串数组， npm search 的时候会用到。</p>
<p><strong>Homepage</strong></p>
<p>包的主页地址,可选字段， 没有 http:// 等带协议前缀的URL。</p>
<p><strong>bugs</strong><br>可选字段，问题追踪系统的URL或邮箱地址； npm bugs 用的上。包的bug跟踪主页地址，应该如下设置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"url"</span> :<span class="string">"http://github.com/owner/project/issues"</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">"email"</span> :<span class="string">"project@hostname.com"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>License</strong></p>
<p>包的开源协议名称,可选字段。</p>
<p>如果是使用一个普遍的license，比如BSD-3-Clause或MIT，直接使用：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"license"</span> : <span class="string">"BSD-3-Clause"</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Author , contributors</strong></p>
<p>都是可选字段。author是一个人，contributors是一组人。</p>
<p>Author的格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Barney Rubble"</span>,</span><br><span class="line"> <span class="attr">"email"</span> : <span class="string">"b@rubble.com"</span>,</span><br><span class="line"> <span class="attr">"url"</span> : <span class="string">"http://barnyrubble.tumblr.com/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或者:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)"</span></span><br></pre></td></tr></table></figure></p>
<p><strong>files</strong><br>可选字段，项目包含的一组文件。如果是文件夹，文件夹下的文件也会被包含。如果需要把某些文件不包含在项目中，添加一个”.npmignore”文件。这个文件和”gitignore”类似。</p>
<p><strong>main</strong><br>可选字段。包的入口文件，如index.js 这个字段的值是你程序主入口 模块的ID  。如果其他用户需要你的包，当用户调用require()方法时，返回的就是这个模块的导出（ exports ）。</p>
<p><strong>bin</strong><br>可选字段。很多的包都会有执行文件需要安装到PATH中去。</p>
<p>这个字段对应的是一个Map，每个元素对应一个 { 命令名：文件名 } 。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"bin"</span> : &#123; <span class="attr">"npm"</span> : <span class="string">"./cli.js"</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>
<p>当包被安装后，NPM将创建一个cli.js文件的链接到/usr/local/bin/iapp下。</p>
<p><strong>man</strong><br>为系统的man命令提供帮助文档, 如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"man": "./man/doc.1"</span><br></pre></td></tr></table></figure></p>
<p>帮助文件的文件名必须以数字结尾，如果是压缩的，需要以.gz结尾。</p>
<p>如果是字符串数组：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"name": "foo",</span><br><span class="line">"man": ["./man/foo.1", "./man/bar.1", "./man/foo.2" ]</span><br></pre></td></tr></table></figure></p>
<p>则分别可以man foo, man foo-bar, man 2 foo来查看。</p>
<p><strong>Directories</strong></p>
<p>CommonJS包所要求的目录结构信息，目前除了告诉别人你的程序目录结构，貌似没有别的什么用。<br>下级字段可以是：lib, bin, man, doc, example。 每个都是字符串</p>
<p>用于指示包的目录结构：</p>
<p>Directories.lib</p>
<p>指示库文件的位置。</p>
<p>Directories.bin</p>
<p>和前面的bin是一样的，但如果前面已经有bin，那么这个就无效。</p>
<p>除了以上两个，还有Directories.doc&amp; Directories.man &amp; Directories.example。</p>
<p><strong>Repository</strong></p>
<p>可选字段。用于指示代码存放的位置。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">"repository" :</span><br><span class="line">  &#123; <span class="attr">"type"</span> : <span class="string">"git"</span></span><br><span class="line">  , <span class="attr">"url"</span> : <span class="string">"http://github.com/npm/npm.git"</span></span><br><span class="line">  &#125;</span><br><span class="line">"repository" :</span><br><span class="line">  &#123; <span class="attr">"type"</span> : <span class="string">"svn"</span></span><br><span class="line">  , <span class="attr">"url"</span> : <span class="string">"http://v8.googlecode.com/svn/trunk/"</span></span><br><span class="line">  &#125;</span><br><span class="line">```  </span><br><span class="line">Scripts</span><br><span class="line"></span><br><span class="line">通过设置这个可以使NPM调用一些命令脚本，封装一些功能。可选字段，object。Key是生命周期事件名，value是在事件点要跑的命令。参考npm-scripts。</span><br><span class="line"></span><br><span class="line">**config**</span><br><span class="line">可选字段，object。</span><br><span class="line">添加一些设置，可以供scripts读取用，同时这里的值也会被添加到系统的环境变量中。</span><br><span class="line">Config对象中的值在 Scripts 的整个周期中皆可用，专门用于给Scripts提供配置参数。</span><br><span class="line">```json</span><br><span class="line">"name": "foo",</span><br><span class="line">"config": &#123;</span><br><span class="line">  "port": "8080"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Dependencies</strong><br>指定依赖的其它包，这些依赖是指包发布后正常执行时所需要的，如果是开发中依赖的包，可以在devDependencies设置。</p>
<p>通常使用下面命令来安装：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save otherpackage</span><br></pre></td></tr></table></figure></p>
<p>可选字段，指示当前包所依赖的其他包。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"dependencies"</span> :</span><br><span class="line">  &#123; <span class="attr">"foo"</span> : <span class="string">"1.0.0 - 2.9999.9999"</span></span><br><span class="line">  , <span class="attr">"bar"</span> : <span class="string">"&gt;=1.0.2 &lt;2.1.2"</span></span><br><span class="line">  , <span class="attr">"baz"</span> : <span class="string">"&gt;1.0.2 &lt;=2.3.4"</span></span><br><span class="line">  , <span class="attr">"boo"</span> : <span class="string">"2.0.1"</span></span><br><span class="line">  , <span class="attr">"qux"</span> : <span class="string">"&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0"</span></span><br><span class="line">  , <span class="attr">"asd"</span> : <span class="string">"http://asdf.com/asdf.tar.gz"</span></span><br><span class="line">  , <span class="attr">"til"</span> : <span class="string">"~1.2"</span></span><br><span class="line">  , <span class="attr">"elf"</span> : <span class="string">"~1.2.3"</span></span><br><span class="line">  , <span class="attr">"two"</span> : <span class="string">"2.x"</span></span><br><span class="line">  , <span class="attr">"thr"</span> : <span class="string">"3.3.x"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>版本格式可以是下面任一种：</p>
<ul>
<li>version  完全匹配</li>
<li><blockquote>
<p>version  大于这个版本</p>
</blockquote>
</li>
<li><blockquote>
<p>=version 大于或等于这个版本</p>
</blockquote>
</li>
<li>&lt;version</li>
<li>&lt;=version</li>
<li>~version  非常接近这个版本</li>
<li>^version  与当前版本兼容</li>
<li>1.2.x  X代表任意数字，因此1.2.1, 1.2.3等都可以</li>
<li>http://…  Unix系统下使用的tarball的URL。</li>
<li><ul>
<li>任何版本都可以</li>
</ul>
</li>
<li>“” 任何版本都可以</li>
<li>version1 - version2   等价于  &gt;=version1 &lt;=version2 .</li>
<li>range1 || range2  满足任意一个即可</li>
<li>git…  Git地址</li>
<li>user/repo</li>
<li>devDependencies</li>
</ul>
<p>Git URL可以有如下种形式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git://github.com/user/project.git#commit-ish  </span><br><span class="line">git+ssh://user@hostname:project.git#commit-ish  </span><br><span class="line">git+ssh://user@hostname/project.git#commit-ish  </span><br><span class="line">git+http://user@hostname/project/blah.git#commit-ish  </span><br><span class="line">git+https://user@hostname/project/blah.git#commit-ish</span><br></pre></td></tr></table></figure></p>
<p><strong>devDependencies</strong></p>
<p>可选字段。如果只需要下载使用某些模块，而不下载这些模块的测试和文档框架，放在这个下面比较不错。<br>这些依赖只有在开发时候才需要。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mypack</span><br></pre></td></tr></table></figure></p>
<p><strong>peerDependencies</strong></p>
<p>可选字段。兼容性依赖。如果你的包是插件，适合这种方式。<br>相关的依赖，如果你的包是插件，而用户在使用你的包时候，通常也会需要这些依赖（插件），那么可以将依赖列到这里。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"peerDependencies": &#123;</span><br><span class="line">  "karma-jasmine": "~0.1.0",</span><br><span class="line">  "karma-requirejs": "~0.2.0",</span><br><span class="line">  "karma-coffee-preprocessor": "~0.1.0",</span><br><span class="line">  "karma-html2js-preprocessor": "~0.1.0",</span><br><span class="line">  "karma-chrome-launcher": "~0.1.0",</span><br><span class="line">  "karma-firefox-launcher": "~0.1.0",</span><br><span class="line">  "karma-phantomjs-launcher": "~0.1.0",</span><br><span class="line">  "karma-script-launcher": "~0.1.0"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这些都是karma的相关插件，一般使用karma的时候都会需要。</p>
<p><strong>bundledDependencies</strong></p>
<p>可选字段。发布包时同时打包的其他依赖。</p>
<p><strong>optionalDependencies</strong></p>
<p>可选字段。如果你想在某些依赖即使没有找到，或则安装失败的情况下，npm都继续执行。那么这些依赖适合放在这里。</p>
<p><strong>Engines</strong></p>
<p>可选字段。既可以指定node版本：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"engines"</span> : &#123;<span class="attr">"node"</span> : <span class="string">"&gt;=0.10.3 &lt;0.12"</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以指定npm版本：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"engines"</span> : &#123;<span class="attr">"npm"</span> : <span class="string">"~1.0.20"</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>engineStrick</strong></p>
<p>可选字段，布尔值。如果你肯定你的程序只能在制定的engine上运行，设置为true。</p>
<p><strong>os</strong><br>可选字段。指定模块可以在什么操作系统上运行：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"os" : [ "darwin","linux" ]</span><br><span class="line"></span><br><span class="line">"os" : [ "!win32" ]</span><br></pre></td></tr></table></figure></p>
<p><strong>cpu</strong><br>可选字段。指定CPU型号。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"cpu" : [ "x64","ia32" ]</span><br><span class="line"></span><br><span class="line">"cpu" : [ "!arm","!mips" ]</span><br></pre></td></tr></table></figure></p>
<p><strong>preferGlobal</strong></p>
<p>可选字段，布尔值。如果你的包是个命令行应用程序，需要全局安装，就可以设为true。</p>
<p><strong>publishConfig</strong></p>
<p>可选字段。发布时使用的配置值放这。<br>这个字段用于设置发布时候的一些设定。尤其方便你希望发布前设定指定的tag或registry。</p>
<p>也可以设定其它子字段，但只有tag和registry会影响到发布。</p>
<p><strong>NPM的一些默认值说明</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts":&#123;"start": "node server.js"&#125;  #如果你的包里有server.js文件，npm默认将执行： node server.js </span><br><span class="line"></span><br><span class="line">"scripts":&#123;"preinstall":"node-gyp rebuild"&#125; #如果包里有 binding.gyp， npm默认在 preinstall命令时，使用node-gyp做编译</span><br></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"contributors": [...] #如果项目根目录下含有AUTHORS文件，则NPM会自动将每一行以Name &lt;email&gt; (url)的格式读取并设定此字段。</span><br></pre></td></tr></table></figure>
<p>参考文章<br><a href="http://www.tuicool.com/articles/2uEjqmM" target="_blank" rel="noopener">npm package.json 配置文件</a><br><a href="http://ju.outofmemory.cn/entry/130809" target="_blank" rel="noopener">package.json for NPM 文件详解</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs npm常用命令]]></title>
      <url>http://elickzhao.github.io/2016/05/nodejs%20npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>npm search <name></name></strong> 搜索包</p>
<p><strong>npm install <name></name></strong> 安装nodejs的依赖包</p>
<p><strong>npm install <name> -g</name></strong>  将包安装到全局环境中<br>但是代码中，直接通过require()的方式是没有办法调用全局安装的包的。全局的安装是供命令行使用的，就好像全局安装了vmarket后，就可以在命令行中直接运行vm命令</p>
<p><strong>npm install <name> –save</name></strong>  安装的同时，将信息写入package.json中</p>
<p>项目路径中如果有package.json文件时，直接使用npm install方法就可以根据dependencies配置安装所有的依赖包<br>这样代码提交到github时，就不用提交node_modules这个文件夹了。</p>
<p><strong>npm init</strong>  会引导你创建一个package.json文件，包括名称、版本、作者这些信息等</p>
<p><strong>npm ls</strong>  列出当前安装的了所有包</p>
<p><strong>npm ls -g</strong> 查看全局安装的模块及依赖</p>
<a id="more"></a>
<p><strong>npm root</strong> 查看当前包的安装路径</p>
<p><strong>npm root -g</strong>  查看全局的包的安装路径</p>
<p><strong>npm config set cache</strong> 设置全局缓存</p>
<p><strong>npm config set prefix</strong>  设置全局安装包位置</p>
<p><strong>npm update <name></name></strong> 更新</p>
<p><strong>npm remove <name></name></strong> 移除</p>
<p><strong>npm uninstall xxx  (-g)</strong> 卸载模块</p>
<p><strong>npm cache clean</strong> 清理缓存</p>
<p><strong>npm help</strong>  帮助，如果要单独查看install命令的帮助，可以使用的npm help install</p>
<p><strong>npm view moudleName dependencies</strong>：查看包的依赖关系</p>
<p><strong>npm view moduleName repository.url</strong>：查看包的源文件地址</p>
<p><strong>npm view moduleName engines</strong>：查看包所依赖的Node的版本</p>
<p><strong>npm help folders</strong>：查看npm使用的所有文件夹</p>
<p><strong>npm rebuild moduleName</strong>：用于更改包内容后进行重建</p>
<p><strong>npm outdated moduleName</strong>：检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新</p>
<p>参考文章:<br><a href="http://www.cnblogs.com/linjiqin/p/3765772.html" target="_blank" rel="noopener">http://www.cnblogs.com/linjiqin/p/3765772.html</a><br><a href="http://my.oschina.net/robinjiang/blog/168732" target="_blank" rel="noopener">http://my.oschina.net/robinjiang/blog/168732</a></p>
]]></content>
      
        <categories>
            
            <category> 前端技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[composer 一些常用命令及使用心得]]></title>
      <url>http://elickzhao.github.io/2016/05/composer%20%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">composer selfupdate                      </span><br><span class="line">composer require &quot;foo/bar:1.0.0&quot;                    安装一个库</span><br><span class="line">composer update foo/bar                             更新单个库</span><br><span class="line">composer create-project laravel/laravel myapp --prefer-dist 创建laravel项目</span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com 配置仓库镜像</span><br><span class="line">composer global require &quot;laravel/installer=~1.1&quot;    全局安装laravel安装器</span><br><span class="line"></span><br><span class="line">composer install update --prefer-dist               后面这个参数是强制使用压缩包</span><br><span class="line">composer install --profile                          后面这个参数是显示安装时间</span><br><span class="line">composer dump-autoload --optimize                   生产环境优化</span><br><span class="line">composer update symfony/yaml --prefer-source        强制克隆代码 用于修改库文件</span><br><span class="line"></span><br><span class="line">当你更新一个修改的库的时候 会提示你是否放弃修改</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">$ composer update</span><br><span class="line">Loading composer repositories with package information  </span><br><span class="line">Updating dependencies  </span><br><span class="line">  - Updating symfony/symfony v2.2.0 (v2.2.0- =&gt; v2.2.0)</span><br><span class="line">    The package has modified files:</span><br><span class="line">    M Dumper.php</span><br><span class="line">    Discard changes [y,n,v,s,?]?</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p><strong>全局配置目录</strong><br>C:\Users\elick\AppData\Roaming\Composer</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> composer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webstorm 和 phpstorm 个人喜爱的设置]]></title>
      <url>http://elickzhao.github.io/2016/05/webstorm%20%E5%92%8C%20phpstorm%20%E4%B8%AA%E4%BA%BA%E5%96%9C%E7%88%B1%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="编辑器主题"><a href="#编辑器主题" class="headerlink" title="编辑器主题"></a>编辑器主题</h1><ul>
<li>首先去 <a href="http://color-themes.com/?view=index" target="_blank" rel="noopener">Color Themes </a> 下载我最爱的 sublime text2 主题, 用 文件 -&gt; 导入设置 安装后重启</li>
<li>修改字体大小及宽度, 设置-&gt;编辑器-&gt;颜色和字体-&gt;font 我一般喜欢用 <strong>Consolas</strong> 这个是自带里面最好的,其次是 <strong>Dejavu Sans Mono</strong> <strong>Source Code Pro</strong> 不过后面两个需要下载. 字体大小 一般选 15 自宽 1.4  这样看着没那么累 </li>
</ul>
<h1 id="配置界面颜色"><a href="#配置界面颜色" class="headerlink" title="配置界面颜色"></a>配置界面颜色</h1><p>好了 如果你是默认主题的话 就会发现左侧 侧边栏 跟右侧颜色不是一样的.<br>对于一个强迫症患者来说这是不能接受的. 如何解决呢.<br>就是去plugins 去下载一个插件 color IDE 激活重启以后 世界和谐了</p>
<h1 id="细节调整"><a href="#细节调整" class="headerlink" title="细节调整"></a>细节调整</h1><p>这个主题变成颜色是很满意,但是还是有些蛋疼的地方.<br>比如说,搜索结果是一大块白色,根本看不清是什么内容,选中相同代码,背景是黑色,很难辨识,<br>这里就通过 File -&gt; Settings -&gt; editor -&gt;color&amp;fonts-&gt;general 这里慢慢调了 </p>
]]></content>
      
        
        <tags>
            
            <tag> phpstorm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个图片说明开源许可协议]]></title>
      <url>http://elickzhao.github.io/2016/05/%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><img src="/image/16-5/1.jpg" alt="开源协议"></p>
<p><strong>参考文章:</strong><br><a href="http://down.chinaz.com/server/201105/552_1.htm" target="_blank" rel="noopener">常用开源许可协议介绍</a><br><a href="http://git.oschina.net/oschina/git-osc/wikis/License" target="_blank" rel="noopener">开源许可证的一些介绍</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git 删除右键菜单]]></title>
      <url>http://elickzhao.github.io/2016/05/git%20%E5%88%A0%E9%99%A4%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>首先，我表示git默认的右键菜单很烦，太多项了，而我们平时用的最多的无非是一个Git Bash！<br>删除msGit右键菜单</p>
<p>如果是windows 64位系统<br>cmd进入”C:\Program Files (x86)\Git\git-cheetah”目录，运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regsvr32 /u git_shell_ext64.dll</span><br></pre></td></tr></table></figure>
<p>如果还想用这个功能 可以看下面这个文章</p>
<p>参考文章 <a href="http://blog.csdn.net/songques/article/details/8488061" target="_blank" rel="noopener">http://blog.csdn.net/songques/article/details/8488061</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows 下安装VirtualBox , Vagrant 和 Homestead]]></title>
      <url>http://elickzhao.github.io/2016/05/windows%20%E4%B8%8B%E5%AE%89%E8%A3%85VirtualBox%20,%20Vagrant%20%E5%92%8C%20Homestead/</url>
      <content type="html"><![CDATA[<ul>
<li><p>下载 VirtualBox 并安装 这个不用说一顿下一步就好了 <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">下载地址</a></p>
</li>
<li><p>下载安装 Vagrant 这个也是跟上面一样 <a href="https://www.vagrantup.com/" target="_blank" rel="noopener">下载地址</a> 哦 记得重启电脑要不命令不好使的</p>
</li>
<li><p>下载 Homestead Vagrant Box  这里你可以使用命令 <code>vagrant box add laravel/homestead</code>  慢慢等 大概20分钟左右吧 <code>(使用命令时会让你选择 记得要选择 virtualbox 如果你装的VM那就选另一个就好了)</code><br>也可以看到下载地址自己下 就是在输入命令后 开始下载时 果断 Ctrl+C <img src="https://dn-phphub.qbox.me/uploads/images/201502/22/1/MK7b6C67N1.png" alt="就是这里"><br>通过地址我发现 <a href="https://atlas.hashicorp.com/laravel/boxes/homestead" target="_blank" rel="noopener">直接去浏览版本</a> 然后进入版本后在后面 接上这个 <code>providers/virtualbox.box</code> 就可以下载了</p>
<blockquote>
<p>我试了下下载速度其实快不了多少 但是有个好处可以断点续传 而使用命令是不可以的 如果失败了 是比较麻烦的<br><a href="https://atlas.hashicorp.com/laravel/boxes/homestead/versions/0.4.2/providers/virtualbox.box" target="_blank" rel="noopener">https://atlas.hashicorp.com/laravel/boxes/homestead/versions/0.4.2/providers/virtualbox.box</a></p>
</blockquote>
</li>
</ul>
<p><strong>失败了…  唉下载那种方式我失败了 总说文件无法打开 也不知道为啥 但是别人都成功了 算了不管了 以后再说吧 还是直接用命令下 反正时间也没差多少</strong><br><a id="more"></a></p>
<ul>
<li><p>命令执行后 会在 C:\Users\ <code>你的用户名</code> \.vagrant.d\boxes 下面增加这个box (名字是laravel-VAGRANTSLASH-homestead) 如果想删除可以直接上这里删除 (而且上次操作时不知道为什么出来两个版本 一个0.4.2 一个0.3.0 不知道是不是跟我建立了两个虚拟机有关 以后测试下) 不过现在光有box 还没有建立虚拟机</p>
</li>
<li><p>下面是下载 laravel/Homestead命令 <code>composer global require &quot;laravel/homestead=~2.0&quot;</code> 如果你没装composer 可以直接用git clone 来下载 <code>git clone https://github.com/laravel/homestead.git Homestead</code> 可以任选其一 </p>
</li>
<li><p>初始化 配置文件 Homestead.yaml 这个有很三个方法 </p>
<ol>
<li>去克隆下来文件夹,找到init.bat点击执行就可以了 就会生成默认配置文件 (composer global 下载的文件位置在 C:\Users\ <code>你的用户名</code> \AppData\Roaming\Composer\vendor\laravel\homestead)</li>
<li>还是去到克隆的那个文件夹 使用 bash init.sh 来生成 但是这个需要你安装Git 并且把Git下的bin目录放到环境变量里才可以 否则找不到这个bash命令的</li>
<li>使用homestead init 来生成默认配置 但是同样 需要配置环境变量 否则无法使用, 建议还是把composer配置到环境变量,因为其他一些项目有时也需要执行一些命令 这样可以一劳永逸 比如laravel-install (配置环境变量的目录 C:\Users\ <code>你的用户名</code>\AppData\Roaming\Composer\vendor\bin)<br><strong><del>第三个方法又失败了 可能windows下不能使用 只有在linux才能使用 反正提示没有init这个命令 而且 -h 也没有 找到这个命令</del></strong>  可以了原来是 laravel/Homestea 版本问题 如果是3.0版本就没有这个命令 2.0的版本就有这个命令 </li>
</ol>
</li>
<li><p>好了 这种方式是全局安装 接下来就是配置这个 主机的配置了 </p>
<blockquote>
<p>这种方式是全局安装，即同一主机上所有项目共享该Homestead盒子，当然你也可以为每个项目单独指定Homestead盒子，可参考<a href="http://laravelacademy.org/post/51.html#ipt_kb_toc_51_6" target="_blank" rel="noopener">Laravel Homestead相应的文档</a>，这里不再赘述。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># 虚拟主机ip 这个默认就可以不需要改</span><br><span class="line">ip: &quot;192.168.10.10&quot;</span><br><span class="line"></span><br><span class="line"># 虚拟主机 使用内存</span><br><span class="line">memory: 2048</span><br><span class="line"></span><br><span class="line"># 虚拟主机 使用CPU核心数</span><br><span class="line">cpus: 1</span><br><span class="line"></span><br><span class="line"># 使用哪个 Vagrant 提供者： virtualbox 、 vmware_fushion 或者 vmware_workstation 我们下载的是virtualbox版 所以默认就是这个了</span><br><span class="line">provider: virtualbox</span><br><span class="line"></span><br><span class="line"># 私有SSH KEY 这个我没有 也能登录和使用</span><br><span class="line">authorize: ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">keys:</span><br><span class="line">    - ~/.ssh/id_rsa</span><br><span class="line"># 共享文件夹</span><br><span class="line">folders:</span><br><span class="line">    - map: F:\phpStudy\WWW\homestead</span><br><span class="line">      to: /home/vagrant</span><br><span class="line">    - map: F:\phpStudy\WWW\homestead\laravelapp</span><br><span class="line">      to: /home/vagrant/laravelapp  </span><br><span class="line">      </span><br><span class="line"># 站点配置 这个需要配置本地host</span><br><span class="line">sites:</span><br><span class="line">    - map: homestead.app</span><br><span class="line">      to: /home/vagrant</span><br><span class="line">    - map: laravel.app</span><br><span class="line">      to: /home/vagrant/laravelapp/public</span><br><span class="line">      //hhvm: true  这个必须对齐to 要不会报错</span><br><span class="line">      </span><br><span class="line">#多站点可以这么写 不过记住添加新站点一定要执行 vagrant provision 命令</span><br><span class="line">#否则nginx里不会有新站点配置 域名不会指向 当然要手动自己写也可以</span><br><span class="line">      </span><br><span class="line"># 数据库名</span><br><span class="line">databases:</span><br><span class="line">    - homestead</span><br><span class="line"></span><br><span class="line"># 数据库对应.env环境变量 也就是laravel项目.env配置文件</span><br><span class="line">variables:</span><br><span class="line">    - key: APP_ENV</span><br><span class="line">      value: local</span><br><span class="line"></span><br><span class="line">#黑火测试配置</span><br><span class="line"># blackfire:</span><br><span class="line">#     - id: foo</span><br><span class="line">#       token: bar</span><br><span class="line">#       client-id: foo</span><br><span class="line">#       client-token: bar</span><br><span class="line"></span><br><span class="line">#端口映射 可以把虚拟机端口</span><br><span class="line"># ports:</span><br><span class="line">#     - send: 93000</span><br><span class="line">#       to: 9300</span><br><span class="line">#     - send: 7777</span><br><span class="line">#       to: 777</span><br><span class="line">#       protocol: udp</span><br><span class="line">#测试一则 这里必须有空格 方向别搞反了</span><br><span class="line">ports:</span><br><span class="line">    - send: 8080</span><br><span class="line">      to: 80</span><br></pre></td></tr></table></figure>
<ul>
<li><p>启动并初始化 homestead 虚拟机 进入自己的目录 使用命令  <code>Homestead up</code>  <strong>这个命令是2.0版本才有 3.0版本是没有的 而且使用前必须使用homestead init 要不即使有配置文件也会出错 还有个问题就是这个版本会找0.3.0那个版本的box 也就是说我上面下载的0.4.2那个没用了 也就是为什么上面说会出现两个版本 看来还得用新的3.0 Homestead试一下</strong></p>
</li>
<li><p><strong>有几个问题需要注意 共享目录如果配置错误 更改配置文件 居然也不好使 只能销毁重新建立虚拟机 不知道为什么 其他设置均可以 可能我这个机器Vagrant现在也有些问题 而且还有个问题共享目录php文件不显示 只显示laravel项目 很诡异 我在根目录放歌index.php文件就不显示 但是laravel项目指定域名就可以</strong></p>
</li>
<li><p>这个新版本的3.0 很是麻烦 去掉了很多命令 就剩了一个make  <del>全局的虚拟机好像不好使了</del> 只有项目的虚拟机可以用 而且比较简单 只要在项目里 <code>composer require laravel/homestead</code> 并在项目根目录执行 <code>homestead make</code>  然后启动就可以了 <code>vagrant up</code> </p>
</li>
<li>全局的虚拟机可以使用 步骤是<ol>
<li>先安装 VirtualBox 和 Vagrant </li>
<li>到用户目录 也就是进入 <code>C:\Users\elick</code> 以后 <code>git clone https://github.com/laravel/homestead.git Homestead</code> 最好不要用composer 用Git吧 这个比较方便 和上个版本不一样了</li>
<li>进入 Homestead 用命令生成配置文件 <code>bash init.sh</code> 或者点击init.bat 这样生成C:\Users\ <code>你的用户名</code> .homestead 目录并且在目录下生成配置文件</li>
<li>然后这步很关键了 进入刚才git clone下来的 Homestead 目录 在这个目录下 vagrant up 其他目录使用这个命令是没用的 只有在这个目录里使用才可以 这样就生成了全局虚拟机</li>
<li>几个有用的命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant destroy --force     //删除命令</span><br><span class="line">vagrant reload --provision  //更新配置文件 好像说是更新网站配置文件</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p><strong>注意:</strong>  <code>vagrant up</code> 必须在 Homestead 目录下使用,还有就是直接启动虚拟机的话,那么 <code>Homestead.yaml</code>的配置就会失效,所以必须用 <code>vagrant up</code> 来启动虚拟机. </p>
<p><strong>*说明:</strong> 其实主要是挂载共享目录问题,端口是没问题的,只不过是默认端口,不是你配置的那个.所以你需要进入虚拟机后 手动挂载共享目录,这样也可以用的,只不过何必跟自己找麻烦,还是老实用<code>vagrant up</code>吧</p>
<ul>
<li>一些文章地址</li>
</ul>
<ol>
<li><a href="http://blog.csdn.net/small_rice_/article/details/45366299" target="_blank" rel="noopener">windows 安装laravel Homestead</a></li>
<li><a href="http://lovelace.blog.51cto.com/1028430/1423343" target="_blank" rel="noopener">vagrant打造自己的开发环境~~我也来一发</a></li>
<li><a href="http://cloud.51cto.com/art/201503/470256_all.htm" target="_blank" rel="noopener">1+1&gt;2:用Docker和Vagrant构建简洁高效开发环境</a></li>
<li><a href="http://laravelacademy.org/post/2749.html" target="_blank" rel="noopener">{Laravel 5.2 文档}  开始 —— Laravel Homestead</a></li>
<li><a href="https://laravel.com/docs/5.2/homestead" target="_blank" rel="noopener">Laravel Homestead</a>  学院翻译的不完全 下面半段没翻译 所以还得看原版</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 服务器相关技术 </tag>
            
            <tag> laravel </tag>
            
            <tag> vagrant </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自己的docker开发环境 -- 自我版]]></title>
      <url>http://elickzhao.github.io/2016/05/%E8%87%AA%E5%B7%B1%E7%9A%84docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%20--%20%E8%87%AA%E6%88%91%E7%89%88/</url>
      <content type="html"><![CDATA[<p>这世界变化快啊 我刚学会这个 又出新东西了<br><a href="http://www.csdn.net/article/2014-12-24/2823292-Docker-Kubernetes" target="_blank" rel="noopener">基于Kubernetes构建Docker集群管理详解</a><br><a href="http://www.open-open.com/lib/view/open1428540315869.html#" target="_blank" rel="noopener">Docker Machine + Compose + Swarm</a><br><a href="http://os.51cto.com/art/201411/456204.htm" target="_blank" rel="noopener">让Docker功能更强大的10个开源工具</a><br><a href="http://elickzhao.github.io/2016/05/%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8%20--link%20%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/">连接容器 –link 简要说明</a></p>
<h1 id="懒人的最爱-–-下载快速用"><a href="#懒人的最爱-–-下载快速用" class="headerlink" title="懒人的最爱 – 下载快速用"></a>懒人的最爱 – 下载快速用</h1><p>为了方便急用的同志们,把仓库和配置方法放在最前面,如果想学习的请往下看</p>
<ul>
<li>仓库地址: <a href="https://github.com/elickzhao/docker-study" target="_blank" rel="noopener">https://github.com/elickzhao/docker-study</a></li>
<li>配置方法</li>
</ul>
<ol>
<li><p>进入<code>dockerfiles</code>目录, 修改配置文件<code>docker-compose.yml</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">data:</span><br><span class="line">  build: ./data</span><br><span class="line">  volumes: </span><br><span class="line">    - <span class="string">"/c/Users/elick/myapp:/data:rw"</span> <span class="comment">#这里修改 '/c/Users/elick/myapp' 为你主机上要共享的目录</span></span><br><span class="line">  privileged: <span class="literal">true</span> </span><br><span class="line">mysql:</span><br><span class="line">  build: ./mysql</span><br><span class="line">  volumes_from:</span><br><span class="line">    - data</span><br><span class="line">  volumes: </span><br><span class="line">    - <span class="string">"/c/Users/elick/myapp/db/mysql:/var/lib/mysql"</span>  <span class="comment">#这里修改 '/c/Users/elick/myapp' 为你主机上要共享的目录</span></span><br><span class="line">  environment:</span><br><span class="line">    - MYSQL_ROOT_PASSWORD=123456 <span class="comment">#根据你的需要修改数据库密码</span></span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">"3306:3306"</span>   <span class="comment">#根据需要修改数据库端口</span></span><br><span class="line">php:  </span><br><span class="line">  build: ./php</span><br><span class="line">  expose:</span><br><span class="line">    - <span class="string">"9000"</span></span><br><span class="line">  volumes_from:</span><br><span class="line">    - data</span><br><span class="line">  links:</span><br><span class="line">    - mysql</span><br><span class="line">  privileged: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">nginx:  </span><br><span class="line">  build: ./nginx</span><br><span class="line">  volumes_from:</span><br><span class="line">    - data</span><br><span class="line">  volumes:</span><br><span class="line">    - <span class="string">"/c/Users/elick/myapp/nginx/nginx.conf:/etc/nginx/nginx.conf"</span> <span class="comment">#这里修改 '/c/Users/elick/myapp' 为你主机上要共享的目录</span></span><br><span class="line">  links:</span><br><span class="line">    - php:php</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">"80:80"</span>   <span class="comment">#根据需要修改web服务器端口</span></span><br><span class="line">  privileged: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>docker-composer up</code> 建立并启动容器 </p>
</li>
<li>如果除了data容器 全部启动的话 并且浏览localhost也没错的话 那么你就拥有了最新的php环境了</li>
</ol>
<a id="more"></a>
<ul>
<li>几点需要注意的<ol>
<li>首先你需要有docker-composer 如果你在windows下 那就下载 docker toolbox 这个默认安装了 linux下的话 我那个仓库里已经下好了</li>
<li>把仓库克隆下来 并共享此目录 就是替换<code>/c/Users/elick/myapp</code> 我这个目录  data容器指向的就是这个目录 指向时一定要是绝对路径 还有就是 windows下 要写虚拟机内的地址 不要写成windows的地址 也就是把此目录已经共享给虚拟机了 因为windows下 容器是运行在虚拟机内的</li>
<li>目录结构简单说明下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">myapp</span><br><span class="line">├─db</span><br><span class="line">│  └─mysql      <span class="comment">#数据保存地址</span></span><br><span class="line">├─dockerfiles</span><br><span class="line">│  ├─data</span><br><span class="line">│  ├─mysql</span><br><span class="line">│  ├─nginx</span><br><span class="line">│  └─php</span><br><span class="line">├─logs          </span><br><span class="line">├─nginx         <span class="comment">#nginx配置文件放在这里</span></span><br><span class="line">│  └─conf.d     <span class="comment">#虚拟主机配置文件</span></span><br><span class="line">└─www           <span class="comment">#网站内容</span></span><br><span class="line">    └─public</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p><del>好快速搭建说到这里,喜欢唠叨的可以往下看.</del></p>
<p>#下面不用看了 自己弄时的一些记录 估计没人能看懂 </p>
<hr>
<h1 id="心路历程-单一进程容器"><a href="#心路历程-单一进程容器" class="headerlink" title="心路历程  单一进程容器"></a>心路历程  单一进程容器</h1><p><strong>大坑无数的nginx</strong></p>
<p>单一进程容器,也就是一个服务放在一个容器里</p>
<p>Nginx dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Apply Nginx configuration</span><br><span class="line">#终于知道这句的用处了 因为每次ip都是变的</span><br><span class="line">#所以不能直接在这里复制到配置出 </span><br><span class="line">#因为第一次改变后 第二次启动就找不到替换的变量了 </span><br><span class="line">#看启动那个shell就明白了</span><br><span class="line">#ADD nginx.conf /opt/etc/nginx.conf</span><br><span class="line">ADD nginx.conf /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Nginx startup script</span><br><span class="line">#再一次修改了 因为发现直接用 hosts 里的本地域名就可以指向服务器了</span><br><span class="line">#ADD nginx-start.sh /opt/bin/nginx-start.sh</span><br><span class="line">#RUN chmod u=rwx /opt/bin/nginx-start.sh</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /data/nginx/conf.d/</span><br><span class="line">VOLUME [&quot;/data&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#不能执行 是找不到 sed 命令</span><br><span class="line">#ENTRYPOINT 	sed -i &quot;s/%fpm-ip%/$PHP_PORT_9000_TCP_ADDR/&quot; /etc/nginx/nginx.conf</span><br><span class="line">#ENTRYPOINT /etc/nginx/nginx-start.sh</span><br><span class="line"></span><br><span class="line">WORKDIR /opt/bin</span><br><span class="line">#ENTRYPOINT [&quot;/opt/bin/nginx-start.sh&quot;]</span><br><span class="line">#CMD [&quot;true&quot;]</span><br><span class="line">CMD [&quot;nginx&quot;]</span><br></pre></td></tr></table></figure></p>
<p>执行命令建立镜像并启动容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t elick/nginx .</span><br><span class="line">$ docker run --name myapp-nginx -p 80:80 --volumes-from myapp-data -v /c/Users/e</span><br><span class="line">lick/myapp/new/nginx/nginx.conf:/etc/nginx/nginx.conf --link myapp-php:php -d elick</span><br><span class="line">/nginx</span><br></pre></td></tr></table></figure></p>
<p><del>这个nginx有个问题是php-fpm的ip无法得到 必须启动后手动该nginx.conf才行 以前看那个人家使用nginx-start.sh启动 可是到我这命令始终出错 说找不到文件 而且莫名其妙的在每行结尾有个/r的标 而且用#!/bin/bash定义shell也报错 真天了噜</del></p>
<p><del>按道理是 link myapp-php 通过环境变量取得ip 可是就这个shell命令不好使无法进行下去了</del><br>-p 80 只是指向 容器端口 host端口是随机的</p>
<p>第一个坑,因为需要连接php容器,所以配置文件里需要php服务器的地址,一开始的解决方法是写个shell文件,读取环境变量,因为link以后容器内会包含php容器的环境变量,但是这个shell死活报错,就是下面说的那个问题.</p>
<blockquote>
<p><del>利用命令行已经成功建城环境,不过用docker-composer就遇到问题了</del><br>问题终于解决了 原来是shell脚本文件的问题 windows下编辑的文本放到linux就会有格式问题 <a href="http://elickzhao.github.io/2016/04/%E8%84%9A%E6%9C%AC%E6%8A%A5%E9%94%99%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/">具体解决看这里</a></p>
</blockquote>
<p>第二个坑,当时直接把配置文件拷贝到/etc/nginx/nginx.conf 但是每次启动IP都会变化 但是替换变量已经,被替换过了.所以改写了shell 每次都重新复制一遍nginx.conf到/etc/nginx/nginx.conf 然后再去替换才行 </p>
<p>第三个坑,在shell不行的时候,想过用dockerfile执行命令 直接替换,于是发现了 RUN,ENTRYPOINT,CMD 三个命令执行的差别 具体看这里(<a href="http://elickzhao.github.io/2016/04/%E6%80%BB%E7%BB%93%20Dockerfile%20%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/">总结 Dockerfile 一些命令说明</a>) 但是ENTRYPOINT 执行时 sed命令却没有 不知道为什么没深入研究</p>
<p>经过上面痛苦的经历,最后找到了办法,原来link后会写个静态地址到hosts,所以根本不用那么麻烦,直接在配置文件里写 服务器名称就ok  这个名称就是 –link myapp-php:php 后面php这个别名  具体说明看这里<a href="http://elickzhao.github.io/2016/05/%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8%20--link%20%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/">连接容器 –link 简要说明</a></p>
<hr>
<p><strong>坑少了不少的 php</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM php:fpm</span><br><span class="line">RUN mkdir -p /data</span><br><span class="line">VOLUME [<span class="string">"/data"</span>]</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">        libfreetype6-dev \</span><br><span class="line">        libjpeg62-turbo-dev \</span><br><span class="line">        libmcrypt-dev \</span><br><span class="line">        libpng12-dev \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt \</span><br><span class="line">    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) gd \</span><br><span class="line">    <span class="comment">#这个mysqli是我自己添加的 不过这个好像已经下载好了 所以直接install就可以了 没有的恐怕需要上面的apt-get 下载下来才行 不过不知道下载后保存的位置会不会错 因为我自己下了个mysqli 不过在容器里用命令安装时却说找不到</span></span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) mysqli</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"php-fpm"</span>]</span><br></pre></td></tr></table></figure>
<p>有link 那么 暴露端口其实没用 只要在dockerfile的 EXPOSE 9000 把端口暴露给容器即可  所以没有  -p 9000:9000 暴露端口也没事<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t elick/php .   #这里可是有个点的啊</span><br><span class="line">$ docker run --name myapp-php -p 9000:9000 --volumes-from myapp-data -d  elick/php</span><br><span class="line"></span><br><span class="line">#new</span><br><span class="line">docker run --name myapp-php --link db:mysql --volumes-from myapp-data -d  elick/php</span><br></pre></td></tr></table></figure></p>
<p>这里有一个坑,就是扩展php,因为官方镜像竟然没有mysqli 所以没办法只能自己弄,本来都想放弃了,后来还是平心静气看了下鸟语文档,才发现人家已经准备好命令来解决,只不过我只加了mysqli后没有再深入研究了</p>
<p><strong>解决上面的问题mysql就没难度了</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM mysql</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;elick&quot; &lt;xwiwi@foxmail.com&gt;</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /data</span><br><span class="line">VOLUME [&quot;/data&quot;]</span><br><span class="line">CMD [&quot;mysqld&quot;]</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t elick/mysql .</span><br><span class="line">$ docker run --name myapp-mysql  --volumes-from myapp-data -v  /c/Users/elick/myapp/db/mysql:/var/lib/mysql -d elick/mysql</span><br></pre></td></tr></table></figure>
<p>以上都搞懂了 其实mysql就没什么了  其他的相加的服务也是一样</p>
<p>$ docker run –name myapp-data -v /c/Users/elick/myapp/:/data:rw -it elick/data<br>/bin/bash</p>
<hr>
<p><strong>用php代码 取得容器环境变量 从而能连接到mysql 可以试一下</strong><br>能够获取环境变量 但是只能获取和自己相关的 因为使用的用户 是php那个用户 也就是 www-data 并不是root 所以没法看到完整的env环境变量</p>
<p>我又个下策 就是建立容器时 用shell把环境变量写到 一个文件里 然后读出来  要不然每次启动 连接数据库 还得改php文件 这有点问题啊</p>
<p>蠢死了 原来这么简单 就像link那篇文章里写的 –link 会写入hosts  那么 –link mysql:mysql 那么就会用这个别名 放到 hosts 这样可以直接用这个别名来当服务器名 也就是网址了 </p>
<p>看来想的没错 Nginx 里的ip 也是只要用 php 就可以了  只要yaml里配置的别名是正确的就 哦了 </p>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$servername = <span class="string">"mysql"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">"123456"</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>myapp-data 一点小小的问题</strong><br>使用数据容器 用docker-composer 建立时 容器不会启动 但是共享内容还是好使的 究原因 是因为docker是一次性执行 如果没有挂起任务 就会自动关闭 </p>
<p>解决办法 手动建立这个容器 <code>$ docker run --name myapp-data -v /c/Users/elick/myapp/:/data:rw -it elick/data /bin/bash</code> 千万不要用 -d  要不容器还是启动不起来 或者自己写个死循环程序 然后启动时 执行这个程序 但是坏处是 当你关闭容器时 会造成麻烦 具体看这篇文章 <a href="http://xiaorui.cc/2015/01/09/%E9%80%9A%E8%BF%87%E4%BF%A1%E5%8F%B7%E8%A7%A3%E5%86%B3docker%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8%E5%90%8Eexited%E9%80%80%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">通过信号解决docker启动容器后Exited退出的问题</a></p>
<p><del>连接mysql居然还需要本地ip才可以 真实麻烦啊</del></p>
<h1 id="另一种形式的环境-就是把nginx和php放到一个容器里-这样省去了很多麻烦"><a href="#另一种形式的环境-就是把nginx和php放到一个容器里-这样省去了很多麻烦" class="headerlink" title="另一种形式的环境 就是把nginx和php放到一个容器里 这样省去了很多麻烦"></a>另一种形式的环境 就是把nginx和php放到一个容器里 这样省去了很多麻烦</h1><p>推荐用这个仓库 这个比较好用一些 <a href="https://github.com/skiy-dockerfile/nginx-php7" target="_blank" rel="noopener">https://github.com/skiy-dockerfile/nginx-php7</a><br>看来只能使用nginx和php绑定到一起的 因为这样都在同一个服务器 所以使用127.0.0.1 就可以了 而且这种形式也不错 因为根本也没什么必要把他们分开 如有扩展可以前台再加nginx指向这个nginx</p>
<h1 id="过去的总结-这个已经过时了"><a href="#过去的总结-这个已经过时了" class="headerlink" title="过去的总结 这个已经过时了"></a>过去的总结 这个已经过时了</h1><p>遇到了好多个坑,为了把php-fpm的ip传给nginx,折腾的要死啊! 使用 –link 虽然nginx容器有了 php容器的环境变量IP地址 但是得把这个IP放到nginx.conf里才行 所以需要做些动作</p>
<ul>
<li>刚开始想放到Dockerfile里 用了 <code>RUN  sed -i &quot;s/%fpm-ip%/$PHP_PORT_9000_TCP_ADDR/&quot; /etc/nginx/nginx.conf</code> 但是RUN只在image里 执行也就是说此时容器没有启动 所以环境变量还没有</li>
<li>于是乎用了 ENTRYPOINT 这个是可以 但是就是上面提到的 shell错误问题 却一直没往这方面想 所以走了弯路</li>
<li>其实还用了 CMD 但是好像并没有 执行命令 还得进入容器启动 不知道为什么 也懒得找了</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github 更新标签]]></title>
      <url>http://elickzhao.github.io/2016/05/Github%20%E6%9B%B4%E6%96%B0%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>不知道为什么 我用TortoiseGit在本地打上了标签 但是同步的时候 Github却不显示 使用了 git bash 命令 推送了一下就好使了  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>
<p>参考文章:<br><a href="http://zengrong.net/post/1746.htm" target="_blank" rel="noopener">Git查看、删除、重命名远程分支和tag</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[连接容器 --link 简要说明]]></title>
      <url>http://elickzhao.github.io/2016/05/%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8%20--link%20%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/halcyonbaby/article/details/42112325" target="_blank" rel="noopener">docker容器互联的两种方式</a><br><a href="http://get.ftqq.com/26.get" target="_blank" rel="noopener">连接容器 | Docker中文指南</a><br><a href="https://segmentfault.com/a/1190000002949036" target="_blank" rel="noopener">Docker多容器连接-以Nginx+PHP为例</a><br><a href="http://www.tuicool.com/articles/RfQRny" target="_blank" rel="noopener">Docker学习总结之跨主机进行link</a><br><a href="http://www.open-open.com/lib/view/open1428540315869.html#" target="_blank" rel="noopener">Docker Machine + Compose + Swarm</a><br><a href="http://os.51cto.com/art/201411/456204.htm" target="_blank" rel="noopener">让Docker功能更强大的10个开源工具</a></p>
<p>这里简单说明下 docker –link 的作用<br>可以参考下面dockerfile文件.<br>如果需要连接mysql容器 只要 docker –link mysql 即可 不需要暴露端口 只要dockerfile里有 expose参数 暴露默认端口 3306 就可以了<br>使用–link 会在hosts文件里 加入一个静态ip地址 以你连接的别名命名的 如果没有别名 就是容器名 例如 mysql 172.17.0.3  所以当你需要连接mysql容器时 只需要在配置文件里写服务器地址为 mysql 就可以了 会自动为你解析成当期容器ip的 因为每次容器启动ip都会变化 根据参考文章说明 此方法试用单个服务器 即所有容器都在一个服务器上 分散的服务器还得需要别的方法 暴露端口或者共享一个连接容器 还有新的方法<br>就是docker Swarm 创建个集群  还有docker kubernetes 这个google的 前一个是docker自己的  还有这个 Shipyard 好像也不错的样子 唉 东西太多了 根本看不过来啊 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">  build: ./mysql</span><br><span class="line">  volumes_from:</span><br><span class="line">    - myapp-data </span><br><span class="line">  environment:</span><br><span class="line">        - MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">php:  </span><br><span class="line">  build: ./php</span><br><span class="line">  expose:</span><br><span class="line">    - &quot;9000:9000&quot;</span><br><span class="line">  volumes_from:</span><br><span class="line">    - myapp-data</span><br><span class="line">  links:</span><br><span class="line">    - mysql</span><br><span class="line">  privileged: true</span><br><span class="line"></span><br><span class="line">nginx:  </span><br><span class="line">  build: ./nginx</span><br><span class="line">  volumes_from:</span><br><span class="line">    - myapp-data</span><br><span class="line">  links:</span><br><span class="line">    - php:php</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;80:80&quot;</span><br><span class="line">  privileged: true</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker Compose 配置文件 yaml  参数简单介绍]]></title>
      <url>http://elickzhao.github.io/2016/05/Docker%20Compose%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20yaml%20%20%E5%8F%82%E6%95%B0%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>一般情况的用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">  build: ./mysql</span><br><span class="line">  volumes_from:</span><br><span class="line">    - myapp-data </span><br><span class="line">  environment:</span><br><span class="line">        - MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">php:  </span><br><span class="line">  build: ./php</span><br><span class="line">  expose:</span><br><span class="line">    - &quot;9000:9000&quot;</span><br><span class="line">  volumes_from:</span><br><span class="line">    - myapp-data</span><br><span class="line">  links:</span><br><span class="line">    - mysql</span><br><span class="line">  privileged: true</span><br><span class="line"></span><br><span class="line">nginx:  </span><br><span class="line">  build: ./nginx</span><br><span class="line">  volumes_from:</span><br><span class="line">    - myapp-data</span><br><span class="line">  links:</span><br><span class="line">    - php:php</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;80:80&quot;</span><br><span class="line">  privileged: true</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>配置参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>image</td>
<td style="text-align:left">从镜像的构建容器</td>
</tr>
<tr>
<td>build</td>
<td style="text-align:left">直接从pwd的Dockerfile来build，而非通过image选项来pull</td>
</tr>
<tr>
<td>links</td>
<td style="text-align:left">连接到那些容器。每个占一行，格式为SERVICE[:ALIAS],例如 – db[:database] 如果不写别名 就是一致的 这个别名 会写在hosts里 当作服务器名 这样可以直接用于连接容器服务</td>
</tr>
<tr>
<td>external_links</td>
<td style="text-align:left">连接到该compose.yaml文件之外的容器中，比如是提供共享或者通用服务的容器服务。格式同links</td>
</tr>
<tr>
<td>command</td>
<td style="text-align:left">替换默认的command命令</td>
</tr>
<tr>
<td>ports</td>
<td style="text-align:left">导出端口 主机端口:容器端口</td>
</tr>
<tr>
<td>expose</td>
<td style="text-align:left">导出端口，但不映射到宿主机的端口上。它仅对links的容器开放。格式直接指定端口号即可。</td>
</tr>
<tr>
<td>volumes</td>
<td style="text-align:left">加载路径作为卷, 主机路径:容器路径:rw(读写属性) 容器路径必须是绝对路径</td>
</tr>
<tr>
<td>volumes_from</td>
<td style="text-align:left">加载其他容器 服务所有卷</td>
</tr>
<tr>
<td>env_file</td>
<td style="text-align:left">从一个文件中导入环境变量，文件的格式为RACK_ENV=development</td>
</tr>
<tr>
<td>extends</td>
<td style="text-align:left">扩展另一个服务，可以覆盖其中的一些选项 看下面 例1</td>
</tr>
<tr>
<td>net</td>
<td style="text-align:left">容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个。</td>
</tr>
<tr>
<td>dns</td>
<td style="text-align:left">可以设置一个或多个自定义的DNS地址。</td>
</tr>
<tr>
<td>dns_search</td>
<td style="text-align:left">可以设置一个或多个DNS的扫描域。</td>
</tr>
<tr>
<td>orking_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares，docker run</td>
<td style="text-align:left">这些命令都是单行的命令,效果和Dockerfile是一样的  看例2</td>
</tr>
</tbody>
</table>
<p>例1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">common.yml</span><br><span class="line">webapp:</span><br><span class="line">  build:./webapp</span><br><span class="line">  environment:- DEBUG=false- SEND_EMAILS=false</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line">development.yml</span><br><span class="line">web:extends:</span><br><span class="line">    file: common.yml</span><br><span class="line">    service: webapp</span><br><span class="line">  ports:-&quot;8000:8000&quot;</span><br><span class="line">  links:- db</span><br><span class="line">  environment:- DEBUG=true</span><br><span class="line">db:</span><br><span class="line">  image: postgres</span><br></pre></td></tr></table></figure></p>
<p>例2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cpu_shares:73</span><br><span class="line">working_dir:/code</span><br><span class="line">entrypoint: /code/entrypoint.sh</span><br><span class="line">user: postgresql</span><br><span class="line">hostname: foo</span><br><span class="line">domainname: foo.com</span><br><span class="line">mem_limit:1000000000</span><br><span class="line">privileged:true</span><br><span class="line">restart: always</span><br><span class="line">stdin_open:true</span><br><span class="line">tty:true</span><br></pre></td></tr></table></figure></p>
<p>常用命令说明</p>
<table>
<thead>
<tr>
<th>命令参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker-compose up</td>
<td>启动服务器</td>
</tr>
<tr>
<td>-d</td>
<td>以daemon(守护进程)方式启动容器</td>
</tr>
<tr>
<td>–verbose</td>
<td>输出详细信息</td>
</tr>
<tr>
<td>-f</td>
<td>制定一个非docker-compose.yml命名的yaml文件</td>
</tr>
<tr>
<td>-p</td>
<td>设置一个项目名称（默认是directory名）</td>
</tr>
<tr>
<td>build</td>
<td>构建服务</td>
</tr>
<tr>
<td>kill -s SIGINT</td>
<td>给服务发送特定的信号</td>
</tr>
<tr>
<td>logs</td>
<td>输出日志</td>
</tr>
<tr>
<td>port</td>
<td>输出绑定的端口</td>
</tr>
<tr>
<td>ps</td>
<td>输出运行的容器</td>
</tr>
<tr>
<td>pull</td>
<td>pull服务的image</td>
</tr>
<tr>
<td>rm</td>
<td>删除停止的容器</td>
</tr>
<tr>
<td>run</td>
<td>运行某个服务，例如docker-compose run web python manage.py shell</td>
</tr>
<tr>
<td>start</td>
<td>运行某个服务中存在的容器</td>
</tr>
<tr>
<td>stop</td>
<td>停止某个服务中存在的容器</td>
</tr>
<tr>
<td>up</td>
<td>create + run + attach容器到服务</td>
</tr>
<tr>
<td>scale</td>
<td>设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3</td>
</tr>
</tbody>
</table>
<p>感觉有些命令和docker命令重合 所以感觉有些命令没什么用处</p>
<p><a href="http://codecloud.net/docker-compose-yaml-5232.html" target="_blank" rel="noopener">Docker Compose YAML 模板文件</a></p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows下如何生成 github 和 gitoschina 的 ssh 公钥 -- 更新版]]></title>
      <url>http://elickzhao.github.io/2016/05/windows%E4%B8%8B%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%20github%20%E5%92%8C%20gitoschina%20%E7%9A%84%20ssh%20%E5%85%AC%E9%92%A5%20--%20%E6%9B%B4%E6%96%B0%E7%89%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个文档已经更新了三次了,所以看时要仔细阅读下.</p>
</blockquote>
<ol>
<li>安装git，从程序目录打开 “Git Bash” </li>
<li>键入命令：ssh-keygen -t rsa -C “email@email.com”<br>“email@email.com”是github账号</li>
<li>提醒你输入key的名称，输入如id_rsa</li>
<li>在C:\Documents and Settings\Administrator\下产生两个文件：id_rsa和id_rsa.pub</li>
<li>把4中生成的密钥文件复制到C:\Documents and Settings\Administrator.ssh\ 目 录下。</li>
<li>用记事本打开id_rsa.pub文件，复制内容，在github.com的网站上到ssh密钥管理页面，添加新公钥，随便取个名字，内容粘贴刚</li>
</ol>
<p>才复制的内容。</p>
<ol>
<li>^_^ OK了</li>
</ol>
<p>需要注意步骤2中产生的密钥文件在当前用户的根目录，必须把这两个文件放到当前用户目录的“.ssh”目录下才能生效。<br>在windows中只能在命令行下输入创建”.”开头的文件夹。命令为 mkdir .ssh</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p><strong>以上的方法有可能存在问题</strong><br>使用 Git Bash 生成的公钥与私钥 放到github 经过测试 <code>ssh -T git@github.com</code> 却返回禁止访问</p>
<blockquote>
<p>第三次更新.<br><img src="/image/17-1/1.jpg" alt=""><br>如图一 虽然显示github好像没有通过.<br><img src="/image/17-1/2.jpg" alt=""><br>但如图二,其实是能更新github的.<br>这里还要注意一下当使用测试命令的时候会自动添加ip到 <code>known_hosts</code> 如果没有这个的话会报错如图三.<br><img src="/image/17-1/3.jpg" alt=""></p>
</blockquote>
<p>这次因为用Vagrant ssh 需要ssh程序所以下载了 cygwin <code>注意:cygwin的ssh也不是默认的 需要选择下载</code>  用这里的ssh生成的密钥就可以了 生成的方法跟上面是一致的 不过这个密钥的存放位置需要找一下 就是在cygwin的安装目录下的/home里面 <code>/home/elick/.ssh/id_rsa</code> 这里是cygwin默认的家目录<br>然后把公钥复制到github和oschina 用命令测试 <code>ssh -T git@git.oschina.net</code> 返回欢迎就ok了<br><a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">参考文档</a></p>
<p><del>但还有个问题 Git Tortoise用的是putty密钥 所以这个密钥虽然测试成功 但是不能用客户端来用 这个有空看看怎么办</del></p>
<p>上面那个问题已经 解决了 <a href="https://www.zybuluo.com/mdeditor#350408" target="_blank" rel="noopener">解决的文章在这里</a></p>
<p>简单说明一下 就是 GitTortoise 会自带一个 putty 密码生成工具 用这个工具转换 这个密码 并用 Git Tortoise 另一个工具 Pageant 把密码填进去 以后提交git时 这个工具帮你自动转换putty密码了 同步的时候 GitTortoise有个选项转换密码 勾上就行了 详情还是看上面的那个文章</p>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的apt-get命令]]></title>
      <url>http://elickzhao.github.io/2016/05/%E5%B8%B8%E7%94%A8%E7%9A%84apt-get%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>apt-get update</strong>：在修改/etc/apt/sources.list或者/etc/apt/preferences之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。</p>
<p><strong>apt-get install packagename</strong>：安装一个新软件包</p>
<p><strong>apt-get remove packagename</strong>：卸载一个已安装的软件包（保留配置文件）</p>
<p><strong>apt-get remove package - - purge</strong>: 删除包，包括删除配置文件等 </p>
<p><strong>apt-get clean</strong>：这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。</p>
<p><strong>apt-get upgrade</strong>：更新所有已安装的软件包</p>
<p><strong>apt-get dist-upgrade</strong>：将系统升级到新版本</p>
<p><strong>apt-cache search package</strong> 搜索包 </p>
<a id="more"></a>
<p><strong>apt-cache show package</strong> 获取包的相关信息，如说明、大小、版本等 </p>
<p><strong>apt-get install package - - reinstall</strong> 重新安装包 </p>
<p><strong>apt-get -f install</strong> 修复安装”-f = ——fix-missing” </p>
<p><strong>apt-get install build-essential</strong> 配置c/c++ compile环境  </p>
<p><strong>apt-cache depends package</strong> 了解使用依赖 </p>
<p><strong>apt-cache rdepends package</strong> 是查看该包被哪些包依赖 </p>
<p><strong>apt-get build-dep package</strong> 安装相关的编译环境 </p>
<p><strong>apt-get source package</strong> 下载该包的源代码 </p>
<p><strong>apt-get check</strong> 检查是否有损坏的依赖</p>
<p><strong>apt-get autoclean</strong>：定期运行这个命令来清除那些已经卸载的软件包的.deb文件。 </p>
<p><strong>apt-get autoremove</strong> :自动清除不需要的程序包。</p>
<hr>
<p>aptitude 比apt-get更加好的选择 当一些依赖无法正确安装时可以用这个命令试试, 不过得先安装</p>
<p><a href="http://blog.csdn.net/xiaoyanghuaban/article/details/22946987" target="_blank" rel="noopener"> dpkg —- apt-get —— aptitude 三种方式的区别 及命令格式</a><br><a href="http://www.linuxdiyf.com/bbs/thread-197491-1-1.html" target="_blank" rel="noopener">apt-get靠边，用aptitude解决比较复杂的软件关系</a><br><a href="http://www.cnblogs.com/timeship/archive/2013/02/28/2937666.html" target="_blank" rel="noopener">apt-get和aptitude的区别</a></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下怎样搜索文件]]></title>
      <url>http://elickzhao.github.io/2016/04/Linux%E4%B8%8B%E6%80%8E%E6%A0%B7%E6%90%9C%E7%B4%A2%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用linux系统难免会忘记文件所在的位置，可以使用以下命令对系统中的文件进行搜索。搜索文件的命令为”find“；”locate“；”whereis“；”which“；”type“</p>
</blockquote>
<h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p>linux下最强大的搜索命令为”find“。<br>它的格式为 <code>find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;</code>；<br>比如使用find命令搜索在根目录下的所有interfaces文件所在位置，<br>命令格式为 <code>find / -name  &#39;interfaces&#39;</code></p>
<p>查找当前目录下以@开头的文件或者目录，搜索深度为一级也就是只在当前目录找，不进入子目录<br><code>find . -maxdepth 1 -name &quot;@*&quot;</code></p>
<a id="more"></a>
<h1 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h1><p>使用locate搜索linux系统中的文件，它比find命令快。<br>因为它查询的是数据库(/var/lib/locatedb)，数据库包含本地所有的文件信息。<br>使用locate命令在根目录下搜索interfaces文件的命令为 <code>locate interfaces</code></p>
<h1 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h1><p>使用”whereis“命令可以搜索linux系统中的所有可执行文件即二进制文件。<br>使用whereis命令搜索grep二进制文件的命令为 <code>whereis grep</code>。</p>
<h1 id="which"><a href="#which" class="headerlink" title="which"></a>which</h1><p>使用which命令查看系统命令是否存在，并返回系统命令所在的位置。<br>使用which命令查看grep命令是否存在以及存在的目录的命令为 <code>which grep</code>。</p>
<h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><p>使用type命令查看系统中的某个命令是否为系统自带的命令。<br>使用type命令查看cd命令是否为系统自带的命令；查看grep 是否为系统自带的命令。<br><code>type cd</code> <code>type grep</code></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 获取服务器详细信息代码]]></title>
      <url>http://elickzhao.github.io/2016/04/PHP%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>说明一下为什么写这个.因为docker的link时需要取得环境变量里面的mysql容器的IP地址,所以想用php取得容器的环境变量.原本想用 <code>$_ENV[]</code> 发现没有内容 原来需要修改 <strong>php.ini</strong> 里面 <code>variables_order = &quot;EGPCS&quot;</code><br>上述配置表示PHP 接受的外部变量来源及顺序，EGPCS 是Environment、Get、Post、Cookies 和Server 的缩写。如果variables_order 的配置中缺少E ，则PHP 无法接受环境变量，那么<code>$_ENV</code> 也就为空了。 后来想到用 php 执行 shell 命令 使用exec , system , shell_exec  但还是获取不到 好赖用 system(env) 才发现原来是我登录的用户为 www-data 所以根本获取不到额外的环境变量 所以这个想法只能作罢, 至于下面 是顺手总结的 一些全局变量的用法</p>
</blockquote>
<a id="more"></a>
<table>
<thead>
<tr>
<th>功能</th>
<th style="text-align:center">代码</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>获取系统类型及版本号：</td>
<td style="text-align:center"><code>php_uname()</code></td>
<td style="text-align:center">(例：Windows NT COMPUTER 5.1 build 2600)</td>
</tr>
<tr>
<td>只获取系统类型：</td>
<td style="text-align:center"><code>php_uname(&#39;s&#39;)</code></td>
<td style="text-align:center">(或：PHP_OS，例：Windows NT)</td>
</tr>
<tr>
<td>只获取系统版本号：</td>
<td style="text-align:center"><code>php_uname(&#39;r&#39;)</code></td>
<td style="text-align:center">无   </td>
</tr>
<tr>
<td>获取PHP运行方式：</td>
<td style="text-align:center"><code>php_sapi_name()</code></td>
<td style="text-align:center">(PHP run mode：apache2handler)</td>
</tr>
<tr>
<td>获取前进程用户名：</td>
<td style="text-align:center"><code>Get_Current_User()</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取PHP版本：</td>
<td style="text-align:center"><code>PHP_VERSION</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取Zend版本：</td>
<td style="text-align:center"><code>Zend_Version()</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取PHP安装路径：</td>
<td style="text-align:center"><code>DEFAULT_INCLUDE_PATH</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取当前文件绝对路径：</td>
<td style="text-align:center"><strong>FILE</strong></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取客户端IP：</td>
<td style="text-align:center"><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取服务器解译引擎：</td>
<td style="text-align:center"><code>$_SERVER[&#39;SERVER_SOFTWARE&#39;]</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取服务器CPU数量：</td>
<td style="text-align:center"><code>$_SERVER[&#39;PROCESSOR_IDENTIFIER&#39;]</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取服务器系统目录：</td>
<td style="text-align:center"><code>$_SERVER[&#39;SystemRoot&#39;]</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取服务器域名：</td>
<td style="text-align:center">`$_SERVER[‘SERVER_NAME’]</td>
<td style="text-align:center">(建议使用：$_SERVER[“HTTP_HOST”])`</td>
</tr>
<tr>
<td>获取用户域名：</td>
<td style="text-align:center"><code>$_SERVER[&#39;USERDOMAIN&#39;]</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取服务器语言：</td>
<td style="text-align:center"><code>$_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取服务器Web端口：</td>
<td style="text-align:center"><code>$_SERVER[&#39;SERVER_PORT&#39;]</code></td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td>获取服务器IP：</td>
<td style="text-align:center"><code>GetHostByName($_SERVER[&#39;SERVER_NAME&#39;])</code></td>
<td style="text-align:center">推荐</td>
</tr>
<tr>
<td>获取Http请求中Host值：</td>
<td style="text-align:center"><code>$_SERVER[&quot;HTTP_HOST&quot;]</code></td>
<td style="text-align:center">返回值为域名或IP</td>
</tr>
<tr>
<td>接受请求的服务器IP：</td>
<td style="text-align:center"><code>$_SERVER[&quot;SERVER_ADDR&quot;]</code></td>
<td style="text-align:center">(有时候获取不到，)</td>
</tr>
</tbody>
</table>
<p>在PHP网站开发中，为了满足网站的需要，时常需要对PHP环境变量进行设置和应用，在虚拟主机环境下，有时我们更需要通过PHP环境变量操作函 数来对PHP环境变量值进行设置。为此我们有必要对PHP环境变量先有所熟悉。今天和大家分享PHP环境变量$_SERVER和PHP系统常量的部分详细 说明。</p>
<p>PHP提供了很多默认的系统变量，用于获得系统配置信息、网络请求相关信息等。这些默认的系统变量及其作用如表2-1所示。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$GLOBALS[]</code></td>
<td style="text-align:center">储存当前脚本中的所有全局变量，其KEY为变量名，VALUE为变量值</td>
</tr>
<tr>
<td><code>$_SERVER[]</code></td>
<td style="text-align:center">当前WEB服务器变量数组</td>
</tr>
<tr>
<td><code>$_GET[]</code></td>
<td style="text-align:center">存储以GET方法提交表单中的数据</td>
</tr>
<tr>
<td><code>$_POST[]</code></td>
<td style="text-align:center">存储以POST方法提交表单中的数据</td>
</tr>
<tr>
<td><code>$_COOKIE[]</code></td>
<td style="text-align:center">取得或设置用户浏览器Cookies中存储的变量数组</td>
</tr>
<tr>
<td><code>$_FILES[]</code></td>
<td style="text-align:center">存储上传文件提交到当前脚本的数据</td>
</tr>
<tr>
<td><code>$_ENV[]</code></td>
<td style="text-align:center">存储当前WEB环境变量</td>
</tr>
<tr>
<td><code>$_REQUEST[]</code></td>
<td style="text-align:center">存储提交表单中所有请求数组，其中包括<code>$_GET、$_POST、$_COOKIE和$_SESSION</code>中的所有内容</td>
</tr>
<tr>
<td><code>$_SESSION[]</code></td>
<td style="text-align:center">存储当前脚本的会话变量数组</td>
</tr>
</tbody>
</table>
<p>配置文件的不同，在不同环境下显示的内容可能会有所不同。</p>
<p>与系统变量一样，PHP也提供了一些默认的系统常量供使用。在程序中可以随时应用这些系统常量，但是我们不能任意更改这些常量的值。PHP中常用的一些默认系统常量及其作用如表2-2所示。</p>
<table>
<thead>
<tr>
<th>常量</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>FILE</strong></td>
<td style="text-align:center">存储当前脚本的绝对路径及文件名称</td>
</tr>
<tr>
<td><strong>LINE</strong></td>
<td style="text-align:center">存储该常量所在的行号</td>
</tr>
<tr>
<td><strong>FUNCTION</strong></td>
<td style="text-align:center">存储该常量所在的函数名称</td>
</tr>
<tr>
<td><strong>CLASS</strong></td>
<td style="text-align:center">存储该常量所在的类的名称</td>
</tr>
<tr>
<td>PHP_VERSION</td>
<td style="text-align:center">存储当前PHP的版本号</td>
</tr>
<tr>
<td>PHP_OS</td>
<td style="text-align:center">存储当前服务器的操作系统</td>
</tr>
</tbody>
</table>
<p> <code>$_GET</code> 和<code>$_POST</code>主要针对FORM表单提交的数据，<br> <code>$_COOKIE</code>和<code>$_SESSION</code>主要针对客户端游览器和服务器端会话数据。<br> <code>$_FILES</code>主要针对文件上传时提交的数据，<br> <code>$_REQUEST</code>主要针对提交表单中所有请求数组，包括<code>$_GET、$_POST</code>、<br> <code>$_COOKIE</code>中的所有内容，你可以通过<code>print_r</code>函数分别输出<code>$_REQUEST</code>或者<code>$_COOKIE</code>等进行比较。</p>
<p>PHP环境变量$_SERVER简介</p>
<p>　　是一个包含服务器端相关信息的PHP全局环境变量，在PHP4.1.0之前的版本使用$HTTP_SERVER_VARS。</p>
<p>　　<code>$_SERVER[&#39;PHP_SELF&#39;]</code> 当前正在执行脚本的文件名，与 document root相关。在FORM表单中，如执行文件是本身，你可以在ACTION中使用<code>$_SERVER[&#39;PHP_SELF&#39;]</code>，好处是当执行文件名有变动时可以不去频繁替换ACTION中的文件名。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$_SERVER[&#39;SERVER_NAME&#39;]</code></td>
<td style="text-align:center">当前运行的PHP程序所在服务器主机的名称。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;REQUEST_METHOD&#39;]</code></td>
<td style="text-align:center">访问页面时的请求方法，即GET、HEAD、POST、PUT。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code></td>
<td style="text-align:center">当前运行的PHP程序所在的文档根目录。也就是PHP.INI文件中的定义。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;HTTP_REFERER&#39;]</code></td>
<td style="text-align:center">链接到当前页面的前一页面的URL地址。在页面跳转功能中非常有用。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code></td>
<td style="text-align:center">正在浏览当前页面访问者的IP地址。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;REMOTE_HOST&#39;]</code></td>
<td style="text-align:center">正在浏览当前页面用户的主机名。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;REMOTE_PORT&#39;]</code></td>
<td style="text-align:center">正在游览的用户连接到服务器时所使用的端口。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;SCRIPT_FILENAME&#39;]</code></td>
<td style="text-align:center">当前执行脚本的绝对路径名。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;SERVER_PORT&#39;]</code></td>
<td style="text-align:center">服务器所使用的端口</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code></td>
<td style="text-align:center">包含当前脚本的路径。这在页面需要指向自己时非常有用。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;REQUEST_URI&#39;]</code></td>
<td style="text-align:center">访问此页面所需的URI。如“/index.html”。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;PHP_AUTH_USER&#39;]</code></td>
<td style="text-align:center">应用在HTTP用户登录认证功能中，这个变量是用户输入的用户名。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;PHP_AUTH_PW&#39;]</code></td>
<td style="text-align:center">应用在HTTP用户登录认证功能中，这个变量便是用户输入的密码。</td>
</tr>
<tr>
<td><code>$_SERVER[&#39;AUTH_TYPE&#39;]</code></td>
<td style="text-align:center">应用在HTTP用户登录认证功能中，这个变量便是认证的类型。</td>
</tr>
</tbody>
</table>
<p>　　注：上述提到的这些PHP全局环境变量，在php.ini中的register_globals设置为on时，这些变量在所有PHP程序脚本中都可用，也就是$_SERVER数组被分离了。当然为了安全考虑，还是不要将register_globals打开为好。</p>
<p>　　PHP环境变量$_SERVER的更多信息请参考PHP帮助手册，文章开头提到在虚拟主机环境下我们需要通过PHP环境变量操作函数来对PHP环境变量值进行设置，主要用到ini_set和ini_get，其实还有更多此类函数，比如PHP中的错误报告设置等，其实都涉及到PHP.INI中的相关内容，有机会下次分享。</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[脚本报错没有那个文件或目录]]></title>
      <url>http://elickzhao.github.io/2016/04/%E8%84%9A%E6%9C%AC%E6%8A%A5%E9%94%99%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>shell脚本报错：#!binbash 没有那个文件或目录</p>
<p>在Windows下编辑的，文件每行末尾会多出^M，所以先转格式： linux下有个 dos2unix 脚本文件 可以转换</p>
<p>windows下可以使用 Notepad++ 编辑文件 或者 使用 菜单-&gt;编辑-&gt;文档格式转换  来转换文件格式</p>
<p><img src="/image/16-4/5.png" alt="转换格式"></p>
]]></content>
      
        
        <tags>
            
            <tag> 小百科 </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结 Dockerfile 一些命令说明]]></title>
      <url>http://elickzhao.github.io/2016/04/%E6%80%BB%E7%BB%93%20Dockerfile%20%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Dockerfile是一个镜像的表示，可以通过Dockerfile来描述构建镜像的步骤，并自动构建一个容器<br>所有的 Dockerfile 命令格式都是:<br>INSTRUCTION arguments<br>虽然指令忽略大小写，但是建议使用大写。</p>
</blockquote>
<h1 id="FROM-命令"><a href="#FROM-命令" class="headerlink" title="FROM 命令"></a>FROM 命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br></pre></td></tr></table></figure>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></p>
<p>这个设置基本的镜像，为后续的命令使用，所以应该作为Dockerfile的第一条指令。</p>
<p>比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br></pre></td></tr></table></figure></p>
<p>如果没有指定 tag ，则默认tag是latest，如果都没有则会报错。</p>
<h1 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h1><p>有三种格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (like an exec, preferred form)</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)</span><br><span class="line">CMD command param1 param2 (as a shell)</span><br></pre></td></tr></table></figure></p>
<p>一个Dockerfile里只能有一个CMD，如果有多个，只有最后一个生效。这是为了引用镜像时避免启动服务器而无法配置 所以你可以在最后再写个CMD从而屏蔽原镜像的命令</p>
<a id="more"></a>
<h1 id="RUN-命令"><a href="#RUN-命令" class="headerlink" title="RUN 命令"></a>RUN 命令</h1><p>RUN命令会在上面FROM指定的镜像里执行任何命令，然后提交(commit)结果，提交的镜像会在后面继续用到。</p>
<p>两种格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN &lt;command&gt; (the command is run in a shell - `/bin/sh -c`)</span><br></pre></td></tr></table></figure></p>
<p>或:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot; ... ]  (exec form)</span><br><span class="line">#RUN命令等价于:</span><br><span class="line"></span><br><span class="line">docker run image command</span><br><span class="line">docker commit container_id</span><br></pre></td></tr></table></figure></p>
<p>#ENTRYPOINT 命令</p>
<p>有两种语法格式，一种就是上面的(shell方式):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT cmd param1 param2 ...</span><br></pre></td></tr></table></figure></p>
<p>第二种是 exec 格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;cmd&quot;, &quot;param1&quot;, &quot;param2&quot;...]</span><br></pre></td></tr></table></figure></p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;echo&quot;, &quot;Whale you be my container&quot;]</span><br></pre></td></tr></table></figure></p>
<p>ENTRYPOINT 命令设置在容器启动时执行命令 这样 –link 的其他容器环境变量用这个命令将会取得</p>
<blockquote>
<p>这个可能是 和 RUN最大区别 RUN是生成容器时执行一次,还有个区别就是 ENTRYPOINT 和 CMD 一样只执行最后一个  RUN是可以执行多次的<br><del>有一次使用sed命令时 RUN可以用 ENTRYPOINT 虽然能生成容器但是却启动不起来 那次用的Docker-composer 所以也不知道和那个是否有关</del><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@tankywoo-docker:~# cat Dockerfile</span><br><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT echo &quot;Welcome!&quot;</span><br><span class="line"></span><br><span class="line">root@tankywoo-docker:~# docker run 62fda5e450d5</span><br><span class="line">Welcome!</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>启动几次执行几次 最上面 Step 7 哪行命令<br><img src="/image/16-4/6.png" alt="启动执行ENTRYPOINT"></p>
<blockquote>
<p><strong>简要说明:</strong><br>RUN是在building image时会运行的指令, 在Dockerfile中可以写多条RUN指令.<br>CMD和ENTRYPOINT则是在运行container 时会运行的指令, 都只能写一条, 如果写了多条, 则最后一条生效.<br>CMD和ENTRYPOINT的区别是:<br>CMD在运行时会被command覆盖, ENTRYPOINT不会被运行时的command覆盖, 但是也可以指定.</p>
</blockquote>
<h1 id="ADD-命令"><a href="#ADD-命令" class="headerlink" title="ADD 命令"></a>ADD 命令</h1><p>从src复制文件到container的dest路径:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>&lt;src&gt;</code> 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件url<br><code>&lt;dest&gt;</code> 是container中的绝对路径</p>
<h1 id="VOLUME-命令"><a href="#VOLUME-命令" class="headerlink" title="VOLUME 命令"></a>VOLUME 命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;&lt;mountpoint&gt;&quot;]</span><br></pre></td></tr></table></figure>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/data&quot;]</span><br></pre></td></tr></table></figure></p>
<p>创建一个挂载点用于共享目录</p>
<p>#USER 命令</p>
<p>比如指定 memcached 的运行用户，可以使用上面的 ENTRYPOINT 来实现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;memcached&quot;, &quot;-u&quot;, &quot;daemon&quot;]</span><br></pre></td></tr></table></figure></p>
<p>更好的方式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;memcached&quot;]</span><br><span class="line">USER daemon</span><br></pre></td></tr></table></figure></p>
<p>#MAINTAINER 命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure>
<p>MAINTAINER命令用来指定维护者的姓名和联系方式</p>
<h1 id="EXPOSE-命令"><a href="#EXPOSE-命令" class="headerlink" title="EXPOSE 命令"></a>EXPOSE 命令</h1><p>EXPOSE 命令可以设置一个端口在运行的镜像中暴露在外<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br></pre></td></tr></table></figure></p>
<p>比如Nginx使用端口 80，可以把这个端口暴露在外，这样容器外可以看到这个端口并与其通信。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure></p>
<p>详细内容可以看这篇文章 -&gt; <a href="http://www.open-open.com/lib/view/open1435126385232.html" target="_blank" rel="noopener">Docker网络原则入门：EXPOSE，-p，-P，-link</a></p>
<h1 id="WORKDIR-命令"><a href="#WORKDIR-命令" class="headerlink" title="WORKDIR 命令"></a>WORKDIR 命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /opt/bin</span><br></pre></td></tr></table></figure>
<p>配置RUN, CMD, ENTRYPOINT 命令设置当前工作路径</p>
<p>可以设置多次，如果是相对路径，则相对前一个 WORKDIR 命令</p>
<p>比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /opt/bin</span><br><span class="line">RUN pwd</span><br></pre></td></tr></table></figure></p>
<p>其实是在 /opt/bin 下执行 pwd</p>
<h1 id="ENV-命令"><a href="#ENV-命令" class="headerlink" title="ENV 命令"></a>ENV 命令</h1><p>用于设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></p>
<p>设置了后，后续的RUN命令都可以使用</p>
<p>使用此dockerfile生成的image新建container，可以通过 docker inspect 看到这个环境变量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@tankywoo-docker:~# docker inspect 49bfc7a9817f</span><br><span class="line">    ...</span><br><span class="line">    &quot;Env&quot;: [</span><br><span class="line">        &quot;name=tanky&quot;,</span><br><span class="line">        &quot;HOME=/&quot;,</span><br><span class="line">        &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">```    </span><br><span class="line">里面的name=tanky就是设置的。</span><br><span class="line"></span><br><span class="line">也可以通过在docker run时设置或修改环境变量:</span><br></pre></td></tr></table></figure></p>
<p>docker run -i -t –env name=”tanky” ubuntu:newtest /bin/bash<br>```</p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux sed 批量替换字符串]]></title>
      <url>http://elickzhao.github.io/2016/04/linux%20sed%20%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<p>Linux下批量替换多个文件中的字符串的简单方法。用sed命令可以批量替换多个文件中的字符串。<br>命令如下：sed -i “s/原字符串/新字符串/g” <code>grep 原字符串 -rl 所在目录</code><br>例如：我要把 charset=gb2312 替换为 charset=UTF-8，执行命令：sed -i “s/charset=gb2312/charset=UTF-8/g” ‘grep charset=gb2312 -rl /www’ 即可。</p>
<p>解释一下：<br>    -i 表示inplace edit，就地修改文件<br>    -r 表示搜索子目录<br>    -l 表示输出匹配的文件名<br>    这个命令组合很强大，要注意备份文件。<br><a id="more"></a></p>
<p>#关于 sed 的更多说明：<br><strong>sed ‘y/1234567890/ABCDEFGHIJ/’ test_sed</strong><br>    test_sed的内容是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1234567890</span><br><span class="line">2345678901</span><br><span class="line">3456789012</span><br><span class="line"> 4567890123</span><br></pre></td></tr></table></figure></p>
<p>执行后，test_sed的内容是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ABCDEFGHIJ</span><br><span class="line">BCDEFGHIJA</span><br><span class="line">CDEFGHIJAB</span><br><span class="line">DEFGHIJABC</span><br></pre></td></tr></table></figure></p>
<p>注意变换关系是按两个list的位置对应变换</p>
<p>替换每行所有匹配 <strong>sed ‘s/01/Ab/g’ test_sed</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1234567890</span><br><span class="line">23456789Ab</span><br><span class="line">3456789Ab2</span><br><span class="line">456789Ab23</span><br></pre></td></tr></table></figure></p>
<p>注意：第一行的0，1没有分别替换为A,b<br>删除：d命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed ‘2d’ example—–删除example文件的第二行。</span><br><span class="line">$ sed ‘2,$d’ example—–删除example文件的第二行到末尾所有行。</span><br><span class="line">$ sed ‘$d’ example—–删除example文件的最后一行。</span><br><span class="line">$ sed ‘/test/’d example—–删除example文件所有包含test的行。</span><br></pre></td></tr></table></figure></p>
<p>替换：s命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sed ‘s/test/mytest/g’ example—–在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。</span><br><span class="line">$ sed -n ‘s/^test/mytest/p’ example—–(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。</span><br><span class="line">$ sed ‘s/^192.168.0.1/&amp;localhost/’example—–&amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加localhost，变成192.168.0.1localhost。</span><br><span class="line">$ sed -n ‘s/\(love\)able/\1rs/p’ example—–love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。</span><br><span class="line">$ sed ‘s#10#100#g’ example—–不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。</span><br><span class="line">选定行的范围：逗号</span><br><span class="line">$ sed -n ‘/test/,/check/p’ example—–所有在模板test和check所确定的范围内的行都被打印。</span><br><span class="line">$ sed -n ‘5,/^test/p’ example—–打印从第五行开始到第一个包含以test开始的行之间的所有行。</span><br><span class="line">$ sed ‘/test/,/check/s/$/sed test/’ example—–对于模板test和west之间的行，每行的末尾用字符串sed test替换。</span><br></pre></td></tr></table></figure></p>
<p>多点编辑：e命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -e ‘1,5d’ -e ‘s/test/check/’example—–(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</span><br><span class="line">$ sed –expression=’s/test/check/’ –expression=’/love/d’ example—–一个比-e更好的命令是–expression。它能给sed表达式赋值。</span><br></pre></td></tr></table></figure></p>
<p>从文件读入：r命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed ‘/test/r file’ example—–file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。</span><br><span class="line">写入文件：w命令</span><br><span class="line">$ sed -n ‘/test/w file’ example—–在example中所有包含test的行都被写入file里。</span><br></pre></td></tr></table></figure></p>
<p>追加命令：a命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed ‘/^test/a\\—&gt;this is a example’ example&lt;—–‘this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。</span><br></pre></td></tr></table></figure></p>
<p>插入：i命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed ‘/test/i\\</span><br><span class="line">new line</span><br><span class="line">————————-‘ example</span><br><span class="line">如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。</span><br></pre></td></tr></table></figure></p>
<p>下一个：n命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed ‘/test/&#123; n; s/aa/bb/; &#125;’ example—–如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。</span><br></pre></td></tr></table></figure></p>
<p>变形：y命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed ‘1,10y/abcde/ABCDE/’ example—–把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。</span><br></pre></td></tr></table></figure></p>
<p>退出：q命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed ’10q’ example—–打印完第10行后，退出sed。</span><br></pre></td></tr></table></figure></p>
<p>保持和获取：h命令和G命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed -e ‘/test/h’ -e ‘$Gexample—–在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。</span><br><span class="line">保持和互换：h命令和x命令</span><br><span class="line">$ sed -e ‘/test/h’ -e ‘/check/x’ example —–互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。</span><br></pre></td></tr></table></figure></p>
<p><a href="http://www.frostsky.com/2014/01/linux-sed-command/" target="_blank" rel="noopener">原文地址: http://www.frostsky.com/2014/01/linux-sed-command/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 国内源列表]]></title>
      <url>http://elickzhao.github.io/2016/04/ubuntu%20%E5%9B%BD%E5%86%85%E6%BA%90%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>详细地址都在下面连接 ubuntu国内官网<br><a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">源列表</a></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用docker搭建laravel环境 (Docker for the Laravel framework)]]></title>
      <url>http://elickzhao.github.io/2016/04/%E7%94%A8docker%E6%90%AD%E5%BB%BAlaravel%E7%8E%AF%E5%A2%83%20(Docker%20for%20the%20Laravel%20framework)/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>最近一直想搭建个自己的docker开发环境,找了不少资料.在docker-hub上发现这个,虽然内容老一点,不过思路还是很好的.而且发现用docker搭建原来是如此的so easy! 好吧,让我们开始吧.</p>
</blockquote>
<h1 id="首先来看看布局结构"><a href="#首先来看看布局结构" class="headerlink" title="首先来看看布局结构"></a>首先来看看布局结构</h1><p><img src="/image/16-4/4.png" alt="布局图"></p>
<p>简单说明下.每一个服务用了一个容器.所有容器的数据都指向数据容器.这样统一管理的同时,也方便修改和报错.这里原作者把artisan和composer也放在一个容器里,但是我个人感觉这样不是太好.当然为了保持宿主主机的纯净度来讲,这是个正确的选择,就是操作起来太费事了.</p>
<a id="more"></a>
<h1 id="下载所有镜像"><a href="#下载所有镜像" class="headerlink" title="下载所有镜像"></a>下载所有镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull dylanlindgren/docker-laravel-data &amp;&amp; \</span><br><span class="line">  docker pull dylanlindgren/docker-laravel-composer &amp;&amp; \</span><br><span class="line">  docker pull dylanlindgren/docker-laravel-artisan &amp;&amp; \</span><br><span class="line">  docker pull dylanlindgren/docker-laravel-phpfpm &amp;&amp; \</span><br><span class="line">  docker pull dylanlindgren/docker-laravel-nginx</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/dylanlindgren/docker-laravel-nginx" target="_blank" rel="noopener">Nginx这个镜像的Github地址</a>,其他的我就不放了,因为这个仓库的首页上都有.所以如果你想去详细了解文件内容可以去看看.</p>
<h1 id="下载虚拟机并建立共享目录"><a href="#下载虚拟机并建立共享目录" class="headerlink" title="下载虚拟机并建立共享目录"></a>下载虚拟机并建立共享目录</h1><blockquote>
<p>要说明一点我用的是windows,所以下面的操作讲的都是windows下的操作经过.OS X 大致类似,linux是最简单的完全不需要虚拟机的,只要建立共享目录就可以了.</p>
</blockquote>
<ul>
<li>下载docker toolbox并安装 (原文是boot2docker 但是貌似不更新了 而且用不了docker composer 所以用新的吧)</li>
<li>建立共享目录并与虚拟机设置共享</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先进入 virtualbox的目录 使用命令创建共享目录</span></span><br><span class="line">VBoxManage sharedfolder add boot2docker-vm --name myapp --hostpath C:\Users\dylan\myapp</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建转发端口</span></span><br><span class="line">VBoxManage modifyvm boot2docker-vm --natpf1 <span class="string">"web,tcp,,80,,80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当然你还可以直接在virtualbox设置里直接设置这些不用命令</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#进入linux挂载刚才的共享目录</span><br><span class="line">$ boot2docker ssh &apos;sudo mkdir /data&apos;</span><br><span class="line">$ boot2docker ssh &apos;sudo mount -t vboxsf -o &quot;defaults,uid=33,gid=33,rw&quot; myapp /data&apos;</span><br><span class="line"></span><br><span class="line">#共享目录我个人感觉没用,因为每次都得进入linux挂载一次可用,而且只用启动容器时 使用 -v 直接挂载目录就可以了 也不需要这个.当然你可以按着步骤一步一步做 这样肯定能成功!</span><br></pre></td></tr></table></figure>
<h1 id="万事俱备-启动容器"><a href="#万事俱备-启动容器" class="headerlink" title="万事俱备 启动容器"></a>万事俱备 启动容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动数据容器 原本好像有点问题 必须这么写要不启动不起来 至于原因嘛 可能跟 bash有关 比较懒没仔细查</span></span><br><span class="line">`docker run --name myapp-data -v /Users/dylan/myapp:/data:rw -id dylanlindgren/docker-laravel-data /bin/bash ` </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动php容器 --privileged=true 这个必须要不无法创建目录</span></span><br><span class="line">docker run --privileged=<span class="literal">true</span> --name myapp-php --volumes-from myapp-data -d dylanlindgren/docker-laravel-phpfpm </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nginx</span></span><br><span class="line">docker run --privileged=<span class="literal">true</span> --name myapp-web --volumes-from myapp-data -p 80:80 --link myapp-php:fpm -d dylanlindgren/docker-laravel-nginx  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#剩下两个 不想写了 因为感觉没用 如果你想用可以看下面 有原文链接 到那里看一下就会了 跟上面大同小异</span></span><br></pre></td></tr></table></figure>
<h1 id="检查浏览器成功与否"><a href="#检查浏览器成功与否" class="headerlink" title="检查浏览器成功与否"></a>检查浏览器成功与否</h1><p>进入<code>http://localhost</code>查看是否有你想要的内容.这里提个醒因为是laravel环境,所以做了地址改写,把根目录指向了public下,我第一次也是找半天,后来看Github源代码才搞懂. 所以你只要把代码放到你的共享目录,也就是上面C:\Users\dylan\myapp\www\public下就ok了.</p>
<h1 id="打完收工"><a href="#打完收工" class="headerlink" title="打完收工"></a>打完收工</h1><p>到此为止你有了个全新的laravel环境了.不过这还不是我想要的,毕竟版本都很低了,而且有些设置不太合我的心意,所以会自己弄一个环境出来的.</p>
<p><a href="http://dylanlindgren.com/docker-for-the-laravel-framework/" target="_blank" rel="noopener">想看原文的点这里……</a></p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务器相关技术 </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux mount命令的用法详细解析]]></title>
      <url>http://elickzhao.github.io/2016/04/linux%20mount%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="挂接命令-mount"><a href="#挂接命令-mount" class="headerlink" title="挂接命令(mount)"></a>挂接命令(mount)</h1><p>首先，介绍一下挂接(mount)命令的使用方法，mount命令参数非常多，这里主要讲一下今天我们要用到的。<br>命令格式：mount [-t vfstype] [-o options] device dir<br>其中：</p>
<ol>
<li>-t vfstype 指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常用类型有：<br>光盘或光盘镜像：iso9660<br>DOS fat16文件系统：msdos<br>Windows 9x fat32文件系统：vfat<br>Windows NT ntfs文件系统：ntfs<br>Mount Windows文件网络共享：smbfs<br>UNIX(LINUX) 文件网络共享：nfs<br>VirtualBox 文件网络共享: vboxsf</li>
<li>-o options 主要用来描述设备或档案的挂接方式。常用的参数有：<br>loop：用来把一个文件当成硬盘分区挂接上系统<br>ro：采用只读方式挂接设备<br>rw：采用读写方式挂接设备<br>iocharset：指定访问文件系统所用字符集</li>
<li>device 要挂接(mount)的设备。</li>
<li>dir设备在系统上的挂接点(mount point)。<a id="more"></a>
</li>
</ol>
<h1 id="挂接光盘镜像文件"><a href="#挂接光盘镜像文件" class="headerlink" title="挂接光盘镜像文件"></a>挂接光盘镜像文件</h1><ol>
<li><p>从光盘制作光盘镜像文件。将光盘放入光驱，执行下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp /dev/cdrom /home/sunky/mydisk.iso 或</span><br><span class="line">$ dd <span class="keyword">if</span>=/dev/cdrom of=/home/sunky/mydisk.iso</span><br><span class="line"><span class="comment"># 注：执行上面的任何一条命令都可将当前光驱里的光盘制作成光盘镜像文件/home/sunky/mydisk.iso</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件和目录制作成光盘镜像文件，执行下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkisofs -r -J -V mydisk -o /home/sunky/mydisk.iso /home/sunky/ mydir</span><br><span class="line"><span class="comment"># 注：这条命令将/home/sunky/mydir目录下所有的目录和文件制作成光盘镜像文件/home/sunky/mydisk.iso，光盘卷标为：mydisk</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>光盘镜像文件的挂接(mount)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /mnt/vcdrom</span><br><span class="line"><span class="comment"># 注：建立一个目录用来作挂接点(mount point)</span></span><br><span class="line"></span><br><span class="line">$ mount -o loop -t iso9660 /home/sunky/mydisk.iso /mnt/vcdrom</span><br><span class="line"><span class="comment"># 注：使用/mnt/vcdrom就可以访问盘镜像文件mydisk.iso里的所有文件了。</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="挂接移动硬盘"><a href="#挂接移动硬盘" class="headerlink" title="挂接移动硬盘"></a>挂接移动硬盘</h1><p>对linux系统而言，USB接口的移动硬盘是当作SCSI设备对待的。插入移动硬盘之前，应先用fdisk –l 或 more /proc/partitions查看系统的硬盘和硬盘分区情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root at pldyrouter /]#  fdisk -l</span><br></pre></td></tr></table></figure></p>
<p>接好移动硬盘后，再用fdisk –l 或 more<br>/proc/partitions查看系统的硬盘和硬盘分区情况.应该可以发现多了一个SCSI硬盘/dev/sdc和它的两个磁盘分区/dev/sdc1?、/dev/sdc2,其中/dev/sdc5是/dev/sdc2分区的逻辑分区。我们可以使用下面的命令挂接/dev/sdc1和/dev/sdc5。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> -p /mnt/usbhd1</span><br><span class="line"><span class="variable">$mkdir</span> -p /mnt/usbhd2</span><br><span class="line"><span class="comment"># 注：建立目录用来作挂接点(mount point)</span></span><br><span class="line"></span><br><span class="line">$ mount -t ntfs /dev/sdc1 /mnt/usbhd1</span><br><span class="line">$ mount -t vfat /dev/sdc5 /mnt/usbhd2</span><br><span class="line"><span class="comment"># 注：对ntfs格式的磁盘分区应使用-t ntfs 参数，对fat32格式的磁盘分区应使用-t vfat参数。若汉字文件名显示为乱码或不显示，可以使用下面的命令格式。</span></span><br><span class="line"></span><br><span class="line">$ mount -t ntfs -o iocharset=cp936 /dev/sdc1 /mnt/usbhd1</span><br><span class="line">$ mount -t vfat -o iocharset=cp936 /dev/sdc5 /mnt/usbhd2</span><br><span class="line"><span class="comment"># linux系统下使用fdisk分区命令和mkfs文件系统创建命令可以将移动硬盘的分区制作成linux系统所特有的ext2、ext3格式。这样，在linux下使用就更方便了。使用下面的命令直接挂接即可。</span></span><br><span class="line"></span><br><span class="line">$ mount /dev/sdc1 /mnt/usbhd1</span><br></pre></td></tr></table></figure>
<h1 id="挂接U盘"><a href="#挂接U盘" class="headerlink" title="挂接U盘"></a>挂接U盘</h1><p>和USB接口的移动硬盘一样对linux系统而言U盘也是当作SCSI设备对待的。使用方法和移动硬盘完全一样。插入U盘之前，应先用fdisk –l 或 more /proc/partitions查看系统的硬盘和硬盘分区情况。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root at pldyrouter root]<span class="comment">#  fdisk -l</span></span><br></pre></td></tr></table></figure></p>
<p>插入U盘后，再用fdisk –l 或 more /proc/partitions查看系统的硬盘和硬盘分区情况。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root at pldyrouter root]<span class="comment">#  fdisk -l</span></span><br></pre></td></tr></table></figure></p>
<p>系统多了一个SCSI硬盘/dev/sdd和一个磁盘分区/dev/sdd1,/dev/sdd1就是我们要挂接的U盘。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /mnt/usb</span><br><span class="line"><span class="comment"># 注：建立一个目录用来作挂接点(mount point)</span></span><br><span class="line">$ mount -t vfat /dev/sdd1 /mnt/usb</span><br><span class="line"><span class="comment"># 注：现在可以通过/mnt/usb来访问U盘了, 若汉字文件名显示为乱码或不显示，可以使用下面的命令。</span></span><br><span class="line">$ mount -t vfat -o iocharset=cp936 /dev/sdd1 /mnt/usb</span><br></pre></td></tr></table></figure></p>
<h1 id="挂接Windows文件共享"><a href="#挂接Windows文件共享" class="headerlink" title="挂接Windows文件共享"></a>挂接Windows文件共享</h1><p>Windows网络共享的核心是SMB/CIFS，在linux下要挂接(mount)windows的磁盘共享，就必须安装和使用samba 软件包。现在流行的linux发行版绝大多数已经包含了samba软件包，如果安装linux系统时未安装samba请首先安装samba。当然也可以到 www.samba.org网站下载……新的版本是3.0.10版。<br>当windows系统共享设置好以后，就可以在linux客户端挂接(mount)了，具体操作如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir –p /mnt/samba</span><br><span class="line"><span class="comment"># 注：建立一个目录用来作挂接点(mount point)</span></span><br><span class="line">$ mount -t smbfs -o username=administrator,password=pldy123 //10.140.133.23/c$ /mnt/samba</span><br><span class="line"><span class="comment"># 注：administrator 和 pldy123 是ip地址为10.140.133.23</span></span><br></pre></td></tr></table></figure></p>
<p>windows计算机的一个用户名和密码，c$是这台计算机的一个磁盘共享<br>如此就可以在linux系统上通过/mnt/samba来访问windows系统磁盘上的文件了。以上操作在redhat as server 3、redflag server 4.1、suse server 9以及windows NT 4.0、windows 2000、windows xp、windows 2003环境下测试通过。</p>
<h1 id="挂接UNIX系统NFS文件共享"><a href="#挂接UNIX系统NFS文件共享" class="headerlink" title="挂接UNIX系统NFS文件共享"></a>挂接UNIX系统NFS文件共享</h1><p>类似于windows的网络共享，UNIX(Linux)系统也有自己的网络共享，那就是NFS(网络文件系统)，下面我们就以SUN Solaris2.8和REDHAT as server 3 为例简单介绍一下在linux下如何mount nfs网络共享。<br>在linux客户端挂接(mount)NFS磁盘共享之前，必须先配置好NFS服务端。</p>
<ol>
<li><p>Solaris系统NFS服务端配置方法如下：</p>
<ul>
<li><p>修改 /etc/dfs/dfstab, 增加共享目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">share -F nfs -o rw /<span class="built_in">export</span>/home/sunky</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动nfs服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/nfs.server start</span><br></pre></td></tr></table></figure>
</li>
<li><p>NFS服务启动以后，也可以使用下面的命令增加新的共享</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ share /<span class="built_in">export</span>/home/sunky1</span><br><span class="line">$ share /<span class="built_in">export</span>/home/sunky2</span><br><span class="line"><span class="comment"># 注：/export/home/sunky和/export/home/sunky1是准备共享的目录</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>linux系统NFS服务端配置方法如下：</p>
<ul>
<li><p>修改 /etc/exports,增加共享目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="built_in">export</span>/home/sunky 10.140.133.23(rw)</span><br><span class="line">/<span class="built_in">export</span>/home/sunky1 *(rw)</span><br><span class="line">/<span class="built_in">export</span>/home/sunky2 linux-client(rw)</span><br><span class="line"><span class="comment"># 注：/export/home/目录下的sunky、sunky1、sunky2是准备共享的目录，10.140.133.23、*、 linux-client是被允许挂接此共享linux客户机的IP地址或主机名。如果要使用主机名linux-client必须在服务端主机 /etc/hosts文件里增加linux-client主机ip定义。格式如下：</span></span><br><span class="line">10.140.133.23 linux-client</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动与停止NFS服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d/init.d/portmap start (在REDHAT中PORTMAP是默认启动的)</span><br><span class="line">/etc/rc.d/init.d/nfs start 启动NFS服务</span><br><span class="line">/etc/rc.d/init.d/nfs stop 停止NFS服务</span><br><span class="line"><span class="comment"># 注：若修改/etc/export文件增加新的共享，应先停止NFS服务，再启动NFS服务方能使新增加的共享起作用。使用命令exportfs -rv也可以达到同样的效果。</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>linux客户端挂接(mount)其他linux系统或UNIX系统的NFS共享</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir –p /mnt/nfs</span><br><span class="line"><span class="comment"># 注：建立一个目录用来作挂接点(mount point)</span></span><br><span class="line">$ mount -t nfs -o rw 10.140.133.9:/<span class="built_in">export</span>/home/sunky /mnt/nfs</span><br><span class="line"><span class="comment"># 注：这里我们假设10.140.133.9是NFS服务端的主机IP地址，当然这里也可以使用主机名，但必须在本机/etc/hosts文件里增加服务端ip定义。/export/home/sunky为服务端共享的目录。</span></span><br><span class="line">如此就可以在linux客户端通过/mnt/nfs来访问其它linux系统或UNIX系统以NFS方式共享出来的文件了。以上操作在 redhat as server</span><br></pre></td></tr></table></figure>
</li>
<li><p>redflag server4.1、suse server 9以及Solaris 7、Solaris 8、Solaris 9 for x86&amp;sparc环境下测试通过</p>
</li>
</ol>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><p>linux加载光驱<br>（1）使用光驱前，要先mount一下：＃mount /dev/cdrom /mnt/cdrom，然后您就可以进入/mnt/cdrom目录下读取光盘内容了；</p>
<p>（2）当您想退出光盘时，须使用umout命令，否则光驱就会一直处于死锁状态：＃umount /mnt/cdrom。</p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dockerfile VOLUME 和 -v 的区别]]></title>
      <url>http://elickzhao.github.io/2016/04/Dockerfile%20VOLUME%20%E5%92%8C%20-v%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>elick     发布    新文稿         </p>
<p>Dockerfile VOLUME 和 -v 的区别</p>
<p>docker 服务器相关技术</p>
<p>找到了官方的userguide： <a href="https://docs.docker.com/engine/userguide" target="_blank" rel="noopener">https://docs.docker.com/engine/userguide</a>…</p>
<p>从中了解了一点：VOLUME并非只是声明，它会把指定路径重新加载一遍，我通过inspect容器也发现了这一点。</p>
<p>这是在Dockerfile指定了VOLUME，并没有指定-v，查看容器的Mounts信息：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"Mounts":</span> <span class="string">[</span></span><br><span class="line">        <span class="string">&#123;</span></span><br><span class="line"><span class="attr">            "Name":</span> <span class="string">"b3e2dcacd3f9f40b43ccd5773d45ca74f0f49b02d3da17749cb378ff9f59bb67"</span><span class="string">,</span></span><br><span class="line"><span class="attr">            "Source":</span> <span class="string">"/var/lib/docker/volumes/b3e2dcacd3f9f40b43ccd5773d45ca74f0f49b02d3da17749cb378ff9f59bb67/_data"</span><span class="string">,</span></span><br><span class="line"><span class="attr">            "Destination":</span> <span class="string">"/etc"</span><span class="string">,</span></span><br><span class="line"><span class="attr">            "Driver":</span> <span class="string">"local"</span><span class="string">,</span></span><br><span class="line"><span class="attr">            "Mode":</span> <span class="string">""</span><span class="string">,</span></span><br><span class="line"><span class="attr">            "RW":</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">],</span></span><br></pre></td></tr></table></figure></p>
<p>这是在上一个的基础上，指定了-v，查看容器的Mounts信息：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"Mounts":</span> <span class="string">[</span></span><br><span class="line">       <span class="string">&#123;</span></span><br><span class="line"><span class="attr">           "Source":</span> <span class="string">"/etc"</span><span class="string">,</span></span><br><span class="line"><span class="attr">           "Destination":</span> <span class="string">"/etc"</span><span class="string">,</span></span><br><span class="line"><span class="attr">           "Mode":</span> <span class="string">""</span><span class="string">,</span></span><br><span class="line"><span class="attr">           "RW":</span> <span class="literal">true</span></span><br><span class="line">       <span class="string">&#125;</span></span><br><span class="line">   <span class="string">],</span></span><br></pre></td></tr></table></figure>
<p>然后你去<code>/var/lib/docker/volumes/b3e2dcacd3f9f40b43ccd5773d45ca74f0f49b02d3da17749cb378ff9f59bb67/_data</code>目录下看一下，大致就清楚了。当Dockerfile里设置的VOLUME目录存在文件,那么在这个目录里就会出现 如用用了-v再指向这个VOLUME目录,又会被host目录覆盖掉</p>
<p>你可以把VOLUME理解为，从镜像中复制指定卷的文件夹到本地/var/lib/docker/volumes/xxxxxxxxx/文件夹，然后把本地的该文件夹挂载到容器里面去。</p>
<p>本质上还是相当于一个本地文件夹挂载而已。</p>
<p>继续补充，因为VOLUME实际上就是在本地新建了一个文件夹挂载了，那么实际上容器内部的文件夹有三种情况：<br>1、没有指定VOLUME也没有指定-v，这种是普通文件夹。<br>2、指定了VOLUME没有指定-v，这种文件夹可以在不同容器之间共享，但是无法在本地修改。<br>3、指定了-v的文件夹，这种文件夹可以在不同容器之间共享，且可以在本地修改。</p>
<p>那就列举一种需要在不同容器之间共享且不需要在本地修改的情况。</p>
<p>首先，我们先了解容器中获取动态数据的方式：<br>1、本地提供，挂载到容器<br>2、远程提供，从远程下载<br>3、生成提供，在容器内部生成</p>
<p>后面两种命令都不需要在本地修改，但是他们生成的动态数据却可能需要共享。<br>下载命令，比如git clone直接从git服务器拉取代码，不需要挂载本地文件夹。<br>生成命令，比如jekyll（静态网站生成器），你可能挂载一个代码文件夹，然后build目录里生成的静态网页文件需要提供给Apache服务器，那么你需要指定build目录为VOLUME。</p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的vagrant命令]]></title>
      <url>http://elickzhao.github.io/2016/04/%E5%B8%B8%E7%94%A8%E7%9A%84vagrant%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>常用的vagrant命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add NAME URL    #添加一个box</span><br><span class="line">$ vagrant box list            #查看本地已添加的box</span><br><span class="line">$ vagrant box remove NAME virtualbox #删除本地已添加的box，如若是版本1.0.x，执行$ vagrant box remove  NAME</span><br><span class="line">$ vagrant init NAME          #初始化，实质应是创建Vagrantfile文件</span><br><span class="line">$ vagrant up                   #启动虚拟机</span><br><span class="line">$ vagrant halt                 #关闭虚拟机</span><br><span class="line">$ vagrant destroy            #销毁虚拟机</span><br><span class="line">$ vagrant reload             #重启虚拟机</span><br><span class="line">$ vagrant package            #当前正在运行的VirtualBox虚拟环境打包成一个可重复使用的box</span><br><span class="line">$ vagrant ssh                 #进入虚拟环境</span><br><span class="line"></span><br><span class="line">$ vagrant init laravel/homestead #初始化并下载box</span><br><span class="line">$ vagrant box add base precise64.box #base 表示指定默认的box，也可以为box指定名称，使用base时，之后可以直接使用 vagrant init 进行初始化，如果自行指定名称，则初始化的时候需要指定box的名称。</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 服务器相关技术 </tag>
            
            <tag> vagrant </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[应用TortoiseGit为github账号添加SSH keys]]></title>
      <url>http://elickzhao.github.io/2016/04/%E5%BA%94%E7%94%A8TortoiseGit%E4%B8%BAgithub%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0SSH%20keys/</url>
      <content type="html"><![CDATA[<p><strong>呵呵 我算是比较懒的 不过避免重复造轮子这种降低效率的事 还是直接引入别人写得详细的文章吧</strong></p>
<p>这个方法可以解决TortoiseGit的问题,但是无法解决hexo上传的问题.<br>因为hexo用到的密钥其实是ssh的,并不是TortoiseGit里面的.<br>所以解决了TortoiseGit也不代表hexo就可用了.</p>
<p><del><strong>看来我得回家看看了,怎么用一个密码实现了hexo和TortoiseGit两个同时上传</strong><br>目前来看必须使用两个才行,TortoiseGit使用的是putty,但是hexo必须用ssh才可以啊. 所以家里那个电脑怎么做到的.</del><br>上面这个问题我想起来了,putty那个生成密码的工具,还可以转换密码,把ssh转换成putty密码.这样就可以使用一个公钥了.这样hexo和TortoiseGit</p>
<p>简单说下步骤吧,ssh生成密钥,用putty转换密钥-&gt;保存私钥,用putty自动加载转换工具再次转换以供TortoiseGit提交github用.</p>
<p><a href="https://www.zybuluo.com/mdeditor#319400" target="_blank" rel="noopener">看最下面</a></p>
<p><a href="http://jingyan.baidu.com/article/63f236280f7e750209ab3d60.html" target="_blank" rel="noopener">文章地址</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[composer 一些使用记录]]></title>
      <url>http://elickzhao.github.io/2016/04/composer%20%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">composer selfupdate                      </span><br><span class="line">composer require &quot;foo/bar:1.0.0&quot;                    安装一个库</span><br><span class="line">composer update foo/bar                             更新单个库</span><br><span class="line">composer create-project laravel/laravel myapp --prefer-dist 创建laravel项目</span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com 配置仓库镜像</span><br><span class="line">composer global require &quot;laravel/installer=~1.1&quot;    全局安装laravel安装器</span><br><span class="line"></span><br><span class="line">composer install update --prefer-dist               后面这个参数是强制使用压缩包</span><br><span class="line">composer install --profile                          后面这个参数是显示安装时间</span><br><span class="line">composer dump-autoload --optimize                   生产环境优化</span><br><span class="line">composer update symfony/yaml --prefer-source        强制克隆代码 用于修改库文件</span><br><span class="line"></span><br><span class="line">当你更新一个修改的库的时候 会提示你是否放弃修改</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">$ composer update</span><br><span class="line">Loading composer repositories with package information  </span><br><span class="line">Updating dependencies  </span><br><span class="line">  - Updating symfony/symfony v2.2.0 (v2.2.0- =&gt; v2.2.0)</span><br><span class="line">    The package has modified files:</span><br><span class="line">    M Dumper.php</span><br><span class="line">    Discard changes [y,n,v,s,?]?</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p><strong>全局配置目录</strong><br>C:\Users\elick\AppData\Roaming\Composer</p>
]]></content>
      
        
        <tags>
            
            <tag> composer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker常用命令]]></title>
      <url>http://elickzhao.github.io/2016/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="查看docker信息（version、info）"><a href="#查看docker信息（version、info）" class="headerlink" title="查看docker信息（version、info）"></a>查看docker信息（version、info）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看docker版本  </span></span><br><span class="line"><span class="variable">$docker</span> version  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示docker系统的信息  </span></span><br><span class="line"><span class="variable">$docker</span> info</span><br></pre></td></tr></table></figure>
<h1 id="对image的操作（search、pull、images、rmi、history）"><a href="#对image的操作（search、pull、images、rmi、history）" class="headerlink" title="对image的操作（search、pull、images、rmi、history）"></a>对image的操作（search、pull、images、rmi、history）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检索image  </span></span><br><span class="line"><span class="variable">$docker</span> search image_name  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 下载image  </span></span><br><span class="line"><span class="variable">$docker</span> pull image_name  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don't truncate output; -q, --quiet=false Only show numeric IDs  </span></span><br><span class="line"><span class="variable">$docker</span> images  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents  </span></span><br><span class="line"><span class="variable">$docker</span> rmi image_name  </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line">docker rmi $(docker images | grep none | awk <span class="string">'&#123;print $3&#125;'</span> | sort -r)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有未打 tag 的镜像</span></span><br><span class="line">docker rmi $(docker images -q | awk <span class="string">'/^&lt;none&gt;/ &#123; print $3 &#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据格式删除所有镜像</span></span><br><span class="line">docker rm $(docker ps -qf status=exited)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示一个镜像的历史; --no-trunc=false Don't truncate output; -q, --quiet=false Only show numeric IDs  </span></span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">history</span> image_name </span><br><span class="line"></span><br><span class="line"><span class="comment">#导出容器到本地镜像库：</span></span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">export</span> container_id &gt; centos.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入容器快照为镜像(docker import)：</span></span><br><span class="line"><span class="comment">#(1)容器在本地：</span></span><br><span class="line">cat centos.tar | docker import - registry.intra.weibo.com/yushuang3/centos:v2.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#(2)容器在网络上：</span></span><br><span class="line">docker import http://example.com/exampleimage.tgz registry.intra.weibo.com/yushuang3/centos:v2.0</span><br><span class="line"></span><br><span class="line">Note：</span><br><span class="line">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，</span><br><span class="line">也可以使用 docker import 来导入一个容器快照到本地镜像库。</span><br><span class="line">这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），</span><br><span class="line">而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</span><br></pre></td></tr></table></figure>
<h1 id="启动容器（run）"><a href="#启动容器（run）" class="headerlink" title="启动容器（run）"></a>启动容器（run）</h1><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在容器中运行"echo"命令，输出"hello word"  </span></span><br><span class="line"><span class="variable">$docker</span> run image_name <span class="built_in">echo</span> <span class="string">"hello word"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#命名容器</span></span><br><span class="line"><span class="variable">$docker</span> run --name <span class="built_in">test</span> image_name</span><br><span class="line">Note: 这个很有用 这样删除容器等一些操作直接用名称就可以 不用去看ID了</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 交互式进入容器中  </span></span><br><span class="line"><span class="variable">$docker</span> run -i -t image_name /bin/bash  </span><br><span class="line">Note: 如果镜像有tag，需要在image后加:tag名 （-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开）</span><br><span class="line"></span><br><span class="line"><span class="comment">#后台执行容器</span></span><br><span class="line"><span class="variable">$docker</span> run -d image_name </span><br><span class="line"></span><br><span class="line"><span class="comment">#转发端口</span></span><br><span class="line"><span class="variable">$docker</span> run -p 8080:8080 image_name  </span><br><span class="line">Note:  主机端口(host port) : 容器端口(container post)</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载指定的主机目录</span></span><br><span class="line">$ docker run -v /c/Users/elick/www:/var/www</span><br><span class="line">Note: 主机目录 : 容器目录 挂载指定主机目录 这个是Dockerfile VOLUME没法办到的 因为考虑的Dockerfile的迁移问题 主机目录是不确定的,所这个指定目录只能用命令行来执行 而Dockerfile VOLUME 只是挂载了容器内一个目录 还有个问题是 这个挂载是吧主机目录完全复制到容器目录 但不是双向的 会把容器目录内容删除 **两个地址都必须是绝对地址 还有容器内的目录可以没有 会自动添加的**</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在容器中安装新的程序  </span></span><br><span class="line"><span class="variable">$docker</span> run image_name apt-get install -y app_name  </span><br><span class="line"></span><br><span class="line">Note：  在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。</span><br><span class="line"></span><br><span class="line"><span class="comment"># container内的root拥有真正的root权限。</span></span><br><span class="line">docker run --privileged=<span class="literal">false</span>         </span><br><span class="line"></span><br><span class="line">Note: 使用该参数，container内的root拥有真正的root权限。</span><br><span class="line">否则，container内的root只是外部的一个普通用户权限。</span><br><span class="line">否则，container内的root只是外部的一个普通用户权限。</span><br><span class="line">privileged启动的容器，可以看到很多host上的设备，并且可以执行mount。</span><br><span class="line">甚至允许你在docker容器中启动docker容器。</span><br></pre></td></tr></table></figure>
<h1 id="查看容器（ps）"><a href="#查看容器（ps）" class="headerlink" title="查看容器（ps）"></a>查看容器（ps）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前所有正在运行的container  </span></span><br><span class="line"><span class="variable">$docker</span> ps  </span><br><span class="line"><span class="comment"># 列出所有的container  </span></span><br><span class="line"><span class="variable">$docker</span> ps -a  </span><br><span class="line"><span class="comment"># 列出最近一次启动的container  </span></span><br><span class="line"><span class="variable">$docker</span> ps -l</span><br></pre></td></tr></table></figure>
<h1 id="保存对容器的修改（commit）"><a href="#保存对容器的修改（commit）" class="headerlink" title="保存对容器的修改（commit）"></a>保存对容器的修改（commit）</h1><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存对容器的修改; -a, --author="" Author; -m, --message="" Commit message  </span></span><br><span class="line"><span class="variable">$docker</span> commit -a <span class="string">'author'</span> ID new_image_name  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Note：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。</span><br></pre></td></tr></table></figure>
<h1 id="对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）"><a href="#对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）" class="headerlink" title="对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）"></a>对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有容器  </span></span><br><span class="line"><span class="variable">$docker</span> rm `docker ps -a -q`  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container  </span></span><br><span class="line"><span class="variable">$docker</span> rm Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 停止、启动、杀死一个容器  </span></span><br><span class="line"><span class="variable">$docker</span> stop Name/ID  </span><br><span class="line"><span class="variable">$docker</span> start Name/ID  </span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">kill</span> Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps  </span></span><br><span class="line"><span class="variable">$docker</span> logs Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的  </span></span><br><span class="line"><span class="variable">$docker</span> diff Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示一个运行的容器里面的进程信息  </span></span><br><span class="line"><span class="variable">$docker</span> top Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 从容器里面拷贝文件/目录到本地一个路径  </span></span><br><span class="line"><span class="variable">$docker</span> cp Name:/container_path to_path  </span><br><span class="line"><span class="variable">$docker</span> cp ID:/container_path to_path  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10  </span></span><br><span class="line"><span class="variable">$docker</span> restart Name/ID  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process  </span></span><br><span class="line"><span class="variable">$docker</span> attach ID  </span><br><span class="line"></span><br><span class="line">Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。但是脱离出来后 容器也就停止了</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器</span></span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">exec</span> -it container_name /bin/bash</span><br><span class="line">Note: <span class="built_in">exec</span> 使用-it时，和我们平常操作console界面类似。而且也不会像attach方式因为退出，导致 </span><br><span class="line">整个容器退出。（-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开） 和run -it 一样后面必须接上要执行的命令 比如 /bin/bash 否则会报错</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改容器名</span></span><br><span class="line"><span class="variable">$docker</span> rename old容器名  new容器名</span><br><span class="line"></span><br><span class="line"><span class="comment">#要获取容器的输出信息:</span></span><br><span class="line"><span class="variable">$docker</span> logs -f &lt;容器名orID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器的root用户密码</span></span><br><span class="line"><span class="variable">$docker</span> logs &lt;容器名orID&gt; 2&gt;&amp;1 | grep <span class="string">'^User: '</span> | tail -n1</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个容器连接到另一个容器</span></span><br><span class="line"><span class="variable">$docker</span> run -i -t --name sonar -d -link mmysql:db   tpires/sonar-server</span><br><span class="line">Note: sonar容器连接到mmysql容器，并将mmysql容器重命名为db。这样，sonar容器就可以使用db的相关的环境变量了。如下查看环境变量就可以看到mmysql相关环境变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@665f1bdc5913:/<span class="comment"># env</span></span><br><span class="line">HOSTNAME=665f1bdc5913</span><br><span class="line">DB_NAME=/compassionate_pasteur/db</span><br><span class="line">TERM=xterm</span><br><span class="line">DB_PORT=tcp://172.17.0.2:11211</span><br><span class="line">DB_PORT_3306_TCP_PROTO=tcp</span><br><span class="line">DB_PORT_3306_TCP_ADDR=172.17.0.2</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">PWD=/</span><br><span class="line">SHLVL=1</span><br><span class="line">HOME=/</span><br><span class="line">DB_PORT_3306_TCP_PORT=3306</span><br><span class="line">DB_PORT_3306_TCP=tcp://172.17.0.2:3306</span><br><span class="line">container=lxc</span><br><span class="line">_=/usr/bin/env</span><br></pre></td></tr></table></figure>
<h1 id="保存和加载镜像（save、load）"><a href="#保存和加载镜像（save、load）" class="headerlink" title="保存和加载镜像（save、load）"></a>保存和加载镜像（save、load）</h1><p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存镜像到一个tar包; -o, --output="" Write to an file  </span></span><br><span class="line"><span class="variable">$docker</span> save image_name -o file_path  </span><br><span class="line"><span class="comment"># 加载一个tar包格式的镜像; -i, --input="" Read from a tar archive file  </span></span><br><span class="line"><span class="variable">$docker</span> load -i file_path  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 机器a  </span></span><br><span class="line"><span class="variable">$docker</span> save image_name &gt; /home/save.tar  </span><br><span class="line"><span class="comment"># 使用scp将save.tar拷到机器b上，然后：  </span></span><br><span class="line"><span class="variable">$docker</span> load &lt; /home/save.tar</span><br></pre></td></tr></table></figure></p>
<h1 id="登录registry-server（login）"><a href="#登录registry-server（login）" class="headerlink" title="登录registry server（login）"></a>登录registry server（login）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登陆registry server; -e, --email="" Email; -p, --password="" Password; -u, --username="" Username  </span></span><br><span class="line"><span class="variable">$docker</span> login</span><br></pre></td></tr></table></figure>
<h1 id="发布image（push）"><a href="#发布image（push）" class="headerlink" title="发布image（push）"></a>发布image（push）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布docker镜像  </span></span><br><span class="line"><span class="variable">$docker</span> push new_image_name</span><br></pre></td></tr></table></figure>
<h1 id="根据Dockerfile-构建出一个容器"><a href="#根据Dockerfile-构建出一个容器" class="headerlink" title="根据Dockerfile 构建出一个容器"></a>根据Dockerfile 构建出一个容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#build  </span></span><br><span class="line">      --no-cache=<span class="literal">false</span> Do not use cache when building the image  </span><br><span class="line">      -q, --quiet=<span class="literal">false</span> Suppress the verbose output generated by the containers  </span><br><span class="line">      --rm=<span class="literal">true</span> Remove intermediate containers after a successful build  </span><br><span class="line">      -t, --tag=<span class="string">""</span> Repository name (and optionally a tag) to be applied to the resulting image <span class="keyword">in</span> <span class="keyword">case</span> of success  </span><br><span class="line"><span class="variable">$docker</span> build -t image_name Dockerfile_path</span><br></pre></td></tr></table></figure>
<p><a href="http://blog.tankywoo.com/docker/2014/05/08/docker-2-dockerfile.html" target="_blank" rel="noopener">Docker 2 – 关于Dockerfile</a><br><a href="http://blog.tankywoo.com/docker/2014/05/08/docker-4-summary.html" target="_blank" rel="noopener">Docker 4 – 总结</a><br><a href="http://www.tuicool.com/articles/uYzeAnz" target="_blank" rel="noopener">深入理解 Docker Volume（一）</a><br><a href="http://blog.csdn.net/qinyushuang/article/details/43342091" target="_blank" rel="noopener">docker 容器相关命令</a></p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker及boot2docker相关研究]]></title>
      <url>http://elickzhao.github.io/2016/04/docker%E5%8F%8Aboot2docker%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/</url>
      <content type="html"><![CDATA[<h1 id="boot2docker转发端口问题"><a href="#boot2docker转发端口问题" class="headerlink" title="boot2docker转发端口问题"></a>boot2docker转发端口问题</h1><p>  这是个很恶心的问题 因为boot2docker还是依赖与virtualbox 所以虽然使用命令 <code>docker run -dp 8080:8080 php</code>进行转发 但是还需要修改虚拟机的端口转发才可以 </p>
<blockquote>
<p>命令解析:<br>  docker -d 后台执行 -p 转发端口</p>
</blockquote>
<p>  <img src="/image/16-4/2.png" alt="虚拟机转发端口"></p>
<a id="more"></a>
<h1 id="boot2docker数据卷问题"><a href="#boot2docker数据卷问题" class="headerlink" title="boot2docker数据卷问题"></a>boot2docker数据卷问题</h1><p>  这个就更恶心了,使用在windows下的boot2docker命令行就会报错,只有进入virtualbox 使用命令 <code>docker run -dp 8080:8080 --name test1 -v /c/Users/elick/www:/var/www elick/php</code>才可以 真是醉了<br>  <strong>需要注意的一点:</strong> boot2docker建立的虚拟机有个自启动共享目录 <code>c/Users C:\Users</code> 在虚拟机里的根目录下能看到这个目录 所以windows上的目录的根目录是/c/开始的<br><img src="/image/16-4/3.png" alt="共享目录"></p>
<h1 id="boot2docker使用总结"><a href="#boot2docker使用总结" class="headerlink" title="boot2docker使用总结"></a>boot2docker使用总结</h1><p>  从上面两点来看,虽然省略了配置vagrantfile的麻烦,但是还得去弄虚拟机从这点看,貌似还不如使用vagrant来的简单些</p>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="http://avnpc.com/pages/build-php-develop-env-by-docker" target="_blank" rel="noopener">Docker在PHP项目开发环境中的应用</a><br><a href="http://www.tuicool.com/articles/uYzeAnz" target="_blank" rel="noopener">{译} 深入理解 Docker Volume（一）</a><br><a href="http://my.oschina.net/mfk123/blog/292425" target="_blank" rel="noopener">Dockers 快速学习（四）Docker 容器的使用</a><br><a href="http://www.linuxdown.net/install/soft/2016/0303/4906.html" target="_blank" rel="noopener">Docker安装_Ubuntu 15.10 &amp; 14.04 LTS上安装和管理Docker</a><br><a href="http://blog.csdn.net/halcyonbaby/article/details/46884605" target="_blank" rel="noopener">Docker exec与Docker attach</a><br><a href="http://blog.chinaunix.net/uid-10915175-id-4443127.html" target="_blank" rel="noopener">Docker之常用命令</a><br><a href="http://www.tuicool.com/articles/7V7vYn" target="_blank" rel="noopener">Docker学习笔记(2)–Docker常用命令</a><br><a href="http://tech.uc.cn/?p=2726" target="_blank" rel="noopener">利用Docker构建开发环境</a><br><a href="http://snoopyxdy.blog.163.com/blog/static/6011744020147187542090" target="_blank" rel="noopener">利用docker快速部署应用</a><br><a href="http://blog.csdn.net/junjun16818/article/details/30655543" target="_blank" rel="noopener">Docker volume使用</a><br><a href="http://my.oschina.net/piorcn/blog/324202" target="_blank" rel="noopener">Docker学习—挂载本地目录</a></p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务器相关技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决ln -s 软链接产生Too many levels of symbolic links错误]]></title>
      <url>http://elickzhao.github.io/2016/04/%E8%A7%A3%E5%86%B3ln%20-s%20%E8%BD%AF%E9%93%BE%E6%8E%A5%E4%BA%A7%E7%94%9FToo%20many%20levels%20of%20symbolic%20links%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>今天生成软连接发生这个报错,查了一下,原来是因为使用了相对路径,改成绝对路径就没有问题了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ln</span> -s /cygdrive/f/Vagrant /home/elick/vagrant</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>命令解析:<br>ln [参数][源文件或目录][目标文件或目录]</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 服务器相关技术 </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在VirtualBox和Vagrant中安装Docker]]></title>
      <url>http://elickzhao.github.io/2016/04/%E5%9C%A8VirtualBox%E5%92%8CVagrant%E4%B8%AD%E5%AE%89%E8%A3%85Docker/</url>
      <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.jdon.com/artichect/docker-install.html" target="_blank" rel="noopener">在VirtualBox和Vagrant中安装Docker</a><br><a href="http://www.tuicool.com/articles/V36R3y" target="_blank" rel="noopener">OSX下使用vagrant和docker管理创建虚拟环境</a><br><a href="http://rmingwang.com/vagrant-commands-and-config.html" target="_blank" rel="noopener">Vagrant简介和安装配置</a><br><a href="http://ninghao.net/blog/1566" target="_blank" rel="noopener">使用 Vagrant 搭建本地开发环境的教程</a><br><a href="http://www.oschina.net/translate/unsuck-your-vagrant-developing-in-one-vm-with-vagrant-and-docker" target="_blank" rel="noopener">使用 Vagrant 和 Docker 在一个 VM 中进行开发</a><br><a href="http://cloud.51cto.com/art/201503/470256_all.htm" target="_blank" rel="noopener">1+1&gt;2:用Docker和Vagrant构建简洁高效开发环境</a><br><a href="http://blog.sina.com.cn/s/blog_72ef7bea0102vucz.html" target="_blank" rel="noopener">Vagrant运行Docker的几种方法</a><br><a href="http://www.cnblogs.com/ac1985482/p/4029315.html" target="_blank" rel="noopener">vagrant在windows下的使用</a><br><a href="http://www.blogjava.net/yongboy/archive/2013/08/26/403325.html" target="_blank" rel="noopener">服务器操作系统CoreOS初体验</a><br><a href="http://betacz.com/series/%E5%BD%93%E6%B5%81%E6%B5%AA%E8%80%85%28Vagrant%29%E9%81%87%E8%A7%81%E7%A0%81%E5%A4%B4%E5%B7%A5%E4%BA%BA%28Docker%29/" target="_blank" rel="noopener">‘当流浪者(Vagrant)遇见码头工人(Docker)’系列</a></p>
<a id="more"></a>
<h1 id="自我理解"><a href="#自我理解" class="headerlink" title="自我理解"></a>自我理解</h1><p>用boot2docker启动docker 容器一直会卡在 <code>default: Syncing folders to the host VM...</code> 看了下<a href="https://www.vagrantup.com/docs/docker/basics.html" target="_blank" rel="noopener">官方文档</a></p>
<blockquote>
<p>Synced folder note: Vagrant will attempt to use the “best” synced folder implementation it can. For boot2docker, this is often rsync. In this case, make sure you have rsync installed on your host machine. Vagrant will give you a human-friendly error message if it is not.</p>
</blockquote>
<p><del>这尿性是要安装一个rsync的同步软件 这鸟东西安装起来蛮麻烦的 而且基本用不到 所以不装了  毕竟就算是生产环境肯定用不到这个 linux版本 所以开发的时候还得装别的版本 以达到和生产环境同步 所以算了<br>直接搞个 CoreOS 这个试试吧 这个挺新的比较有趣</del><br>最后还是测试了rsync这个软件,因为使用CoreOS加载docker镜像 也会出现卡在同步文件夹那 所以看来问题不在boot2docker </p>
<h1 id="得到升华"><a href="#得到升华" class="headerlink" title="得到升华"></a>得到升华</h1><p><strong>我找到个方法 可以解决这个问题 但是并不是十全十美的方法</strong><br>就是屏蔽同步文件夹<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(<span class="number">2</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, disabled: <span class="literal">true</span>  <span class="meta">#这一句就是</span></span><br><span class="line">  config.vm.provider <span class="string">"docker"</span> <span class="keyword">do</span> |d|</span><br><span class="line">    d.image = <span class="string">"tknerr/baseimage-ubuntu:14.04"</span></span><br><span class="line">    d.has_ssh = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#这句是新加的</span></span><br><span class="line">    <span class="meta">#d.vagrant_machine = "dockerhost" </span></span><br><span class="line">   	<span class="meta">#d.vagrant_vagrantfile = "../coreos/Vagrantfile"</span></span><br><span class="line">    <span class="meta">#config.vm.box = "coreos-stable" </span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  config.vm.provision <span class="string">"shell"</span>, inline: <span class="string">"echo 'hello docker!'"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<h2 id="惊喜发现"><a href="#惊喜发现" class="headerlink" title="惊喜发现"></a>惊喜发现</h2><p><strong>这个简直太省地方了:</strong> 利用boot2docker 加载 tknerr/baseimage-ubuntu:14.04 这个基础镜像 最后生成的虚拟机才有400M coreOS是900M多  而Homestead 已经是2.67G了<br><img src="/image/16-4/1.png" alt="hello"></p>
<p>而且使用的box也非常省 boot2docker只有20M而已</p>
<h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><p><strong>C:\Users\elick.vagrant.d</strong> 这是vagrant的根目录 最主要有两个目录</p>
<ul>
<li>boxes<br> 这个是存放box的目录,所有你下载的各种box都在这里 </li>
<li>data<br> 这个是存放host的一些信息的地方<ul>
<li>docker-host<br>  这个就是用docker,而没有加载box的时候 自动下载的boot2docker</li>
<li>machine-index<br>  存着建立多少个host和host状态的信息 就是那个index 如果在virtualbox删除了host 这里还显示可以在这里手动删了</li>
</ul>
</li>
</ul>
<p><strong>C:\Users\elick\VirtualBox VMs</strong> 就是virtualbox存放虚拟机的位置</p>
]]></content>
      
        <categories>
            
            <category> 服务器端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 服务器相关技术 </tag>
            
            <tag> linux </tag>
            
            <tag> vagrant </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>

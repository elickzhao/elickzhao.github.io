<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>elickzhao&#39;s Blog</title>
  <subtitle>与其临渊羡鱼 不如退而结网!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://elickzhao.github.io/"/>
  <updated>2016-05-05T04:15:33.408Z</updated>
  <id>http://elickzhao.github.io/</id>
  
  <author>
    <name>elickzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个图片说明开源许可协议</title>
    <link href="http://elickzhao.github.io/2016/05/%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>http://elickzhao.github.io/2016/05/常用开源许可协议介绍/</id>
    <published>2016-05-05T04:09:58.000Z</published>
    <updated>2016-05-05T04:15:33.408Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;image/16-5/1.jpg&quot; alt=&quot;开源协议&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文章:&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://down.chinaz.com/server/201105/552_1.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用开源许可协议介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://git.oschina.net/oschina/git-osc/wikis/License&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源许可证的一些介绍&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;image/16-5/1.jpg&quot; alt=&quot;开源协议&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文章:&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://down.chinaz.com/server/201105/552_1.htm&quot; target=
    
    </summary>
    
    
      <category term="小百科" scheme="http://elickzhao.github.io/tags/%E5%B0%8F%E7%99%BE%E7%A7%91/"/>
    
  </entry>
  
  <entry>
    <title>git 删除右键菜单</title>
    <link href="http://elickzhao.github.io/2016/05/git%20%E5%88%A0%E9%99%A4%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <id>http://elickzhao.github.io/2016/05/git 删除右键菜单/</id>
    <published>2016-05-04T13:06:10.000Z</published>
    <updated>2016-05-04T13:07:01.430Z</updated>
    
    <content type="html">&lt;p&gt;首先，我表示git默认的右键菜单很烦，太多项了，而我们平时用的最多的无非是一个Git Bash！&lt;br&gt;删除msGit右键菜单&lt;/p&gt;
&lt;p&gt;如果是windows 64位系统&lt;br&gt;cmd进入”C:\Program Files (x86)\Git\git-cheetah”目录，运行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;regsvr32 /u git_shell_ext64.dll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果还想用这个功能 可以看下面这个文章&lt;/p&gt;
&lt;p&gt;参考文章 &lt;a href=&quot;http://blog.csdn.net/songques/article/details/8488061&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/songques/article/details/8488061&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我表示git默认的右键菜单很烦，太多项了，而我们平时用的最多的无非是一个Git Bash！&lt;br&gt;删除msGit右键菜单&lt;/p&gt;
&lt;p&gt;如果是windows 64位系统&lt;br&gt;cmd进入”C:\Program Files (x86)\Git\git-cheetah”目
    
    </summary>
    
    
      <category term="Git" scheme="http://elickzhao.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>windows 下安装VirtualBox , Vagrant 和 Homestead</title>
    <link href="http://elickzhao.github.io/2016/05/windows%20%E4%B8%8B%E5%AE%89%E8%A3%85VirtualBox%20,%20Vagrant%20%E5%92%8C%20Homestead/"/>
    <id>http://elickzhao.github.io/2016/05/windows 下安装VirtualBox , Vagrant 和 Homestead/</id>
    <published>2016-05-04T09:54:01.000Z</published>
    <updated>2016-05-04T10:22:41.215Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载 VirtualBox 并安装 这个不用说一顿下一步就好了 &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载安装 Vagrant 这个也是跟上面一样 &lt;a href=&quot;https://www.vagrantup.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt; 哦 记得重启电脑要不命令不好使的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载 Homestead Vagrant Box  这里你可以使用命令 &lt;code&gt;vagrant box add laravel/homestead&lt;/code&gt;  慢慢等 大概20分钟左右吧 &lt;code&gt;(使用命令时会让你选择 记得要选择 virtualbox 如果你装的VM那就选另一个就好了)&lt;/code&gt;&lt;br&gt;也可以看到下载地址自己下 就是在输入命令后 开始下载时 果断 Ctrl+C &lt;img src=&quot;https://dn-phphub.qbox.me/uploads/images/201502/22/1/MK7b6C67N1.png&quot; alt=&quot;就是这里&quot;&gt;&lt;br&gt;通过地址我发现 &lt;a href=&quot;https://atlas.hashicorp.com/laravel/boxes/homestead&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;直接去浏览版本&lt;/a&gt; 然后进入版本后在后面 接上这个 &lt;code&gt;providers/virtualbox.box&lt;/code&gt; 就可以下载了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我试了下下载速度其实快不了多少 但是有个好处可以断点续传 而使用命令是不可以的 如果失败了 是比较麻烦的&lt;br&gt;&lt;a href=&quot;https://atlas.hashicorp.com/laravel/boxes/homestead/versions/0.4.2/providers/virtualbox.box&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://atlas.hashicorp.com/laravel/boxes/homestead/versions/0.4.2/providers/virtualbox.box&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;失败了…  唉下载那种方式我失败了 总说文件无法打开 也不知道为啥 但是别人都成功了 算了不管了 以后再说吧 还是直接用命令下 反正时间也没差多少&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;命令执行后 会在 C:\Users\ &lt;code&gt;你的用户名&lt;/code&gt; \.vagrant.d\boxes 下面增加这个box (名字是laravel-VAGRANTSLASH-homestead) 如果想删除可以直接上这里删除 (而且上次操作时不知道为什么出来两个版本 一个0.4.2 一个0.3.0 不知道是不是跟我建立了两个虚拟机有关 以后测试下) 不过现在光有box 还没有建立虚拟机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面是下载 laravel/Homestead命令 &lt;code&gt;composer global require &amp;quot;laravel/homestead=~2.0&amp;quot;&lt;/code&gt; 如果你没装composer 可以直接用git clone 来下载 &lt;code&gt;git clone https://github.com/laravel/homestead.git Homestead&lt;/code&gt; 可以任选其一 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化 配置文件 Homestead.yaml 这个有很三个方法 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去克隆下来文件夹,找到init.bat点击执行就可以了 就会生成默认配置文件 (composer global 下载的文件位置在 C:\Users\ &lt;code&gt;你的用户名&lt;/code&gt; \AppData\Roaming\Composer\vendor\laravel\homestead)&lt;/li&gt;
&lt;li&gt;还是去到克隆的那个文件夹 使用 bash init.sh 来生成 但是这个需要你安装Git 并且把Git下的bin目录放到环境变量里才可以 否则找不到这个bash命令的&lt;/li&gt;
&lt;li&gt;使用homestead init 来生成默认配置 但是同样 需要配置环境变量 否则无法使用, 建议还是把composer配置到环境变量,因为其他一些项目有时也需要执行一些命令 这样可以一劳永逸 比如laravel-install (配置环境变量的目录 C:\Users\ &lt;code&gt;你的用户名&lt;/code&gt;\AppData\Roaming\Composer\vendor\bin)&lt;br&gt;&lt;strong&gt;&lt;del&gt;第三个方法又失败了 可能windows下不能使用 只有在linux才能使用 反正提示没有init这个命令 而且 -h 也没有 找到这个命令&lt;/del&gt;&lt;/strong&gt;  可以了原来是 laravel/Homestea 版本问题 如果是3.0版本就没有这个命令 2.0的版本就有这个命令 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好了 这种方式是全局安装 接下来就是配置这个 主机的配置了 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方式是全局安装，即同一主机上所有项目共享该Homestead盒子，当然你也可以为每个项目单独指定Homestead盒子，可参考&lt;a href=&quot;http://laravelacademy.org/post/51.html#ipt_kb_toc_51_6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel Homestead相应的文档&lt;/a&gt;，这里不再赘述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 虚拟主机ip 这个默认就可以不需要改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip: &amp;quot;192.168.10.10&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 虚拟主机 使用内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memory: 2048&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 虚拟主机 使用CPU核心数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpus: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 使用哪个 Vagrant 提供者： virtualbox 、 vmware_fushion 或者 vmware_workstation 我们下载的是virtualbox版 所以默认就是这个了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;provider: virtualbox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 私有SSH KEY 这个我没有 也能登录和使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;authorize: ~/.ssh/id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keys:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 共享文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;folders:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - map: F:\phpStudy\WWW\homestead&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      to: /home/vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - map: F:\phpStudy\WWW\homestead\laravelapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      to: /home/vagrant/laravelapp  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 站点配置 这个需要配置本地host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sites:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - map: homestead.app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      to: /home/vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - map: laravel.app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      to: /home/vagrant/laravelapp/public&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      //hhvm: true  这个必须对齐to 要不会报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#多站点可以这么写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 数据库名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;databases:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - homestead&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 数据库对应.env环境变量 也就是laravel项目.env配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variables:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - key: APP_ENV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      value: local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#黑火测试配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# blackfire:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#     - id: foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#       token: bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#       client-id: foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#       client-token: bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#端口映射 可以把虚拟机端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#     - send: 93000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#       to: 9300&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#     - send: 7777&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#       to: 777&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#       protocol: udp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#测试一则 这里必须有空格 方向别搞反了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - send: 8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      to: 80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;启动并初始化 homestead 虚拟机 进入自己的目录 使用命令  &lt;code&gt;Homestead up&lt;/code&gt;  &lt;strong&gt;这个命令是2.0版本才有 3.0版本是没有的 而且使用前必须使用homestead init 要不即使有配置文件也会出错 还有个问题就是这个版本会找0.3.0那个版本的box 也就是说我上面下载的0.4.2那个没用了 也就是为什么上面说会出现两个版本 看来还得用新的3.0 Homestead试一下&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;有几个问题需要注意 共享目录如果配置错误 更改配置文件 居然也不好使 只能销毁重新建立虚拟机 不知道为什么 其他设置均可以 可能我这个机器Vagrant现在也有些问题 而且还有个问题共享目录php文件不显示 只显示laravel项目 很诡异 我在根目录放歌index.php文件就不显示 但是laravel项目指定域名就可以&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个新版本的3.0 很是麻烦 去掉了很多命令 就剩了一个make  &lt;del&gt;全局的虚拟机好像不好使了&lt;/del&gt; 只有项目的虚拟机可以用 而且比较简单 只要在项目里 &lt;code&gt;composer require laravel/homestead&lt;/code&gt; 并在项目根目录执行 &lt;code&gt;homestead make&lt;/code&gt;  然后启动就可以了 &lt;code&gt;vagrant up&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;全局的虚拟机可以使用 步骤是&lt;ol&gt;
&lt;li&gt;先安装 VirtualBox 和 Vagrant &lt;/li&gt;
&lt;li&gt;到用户目录 也就是进入 &lt;code&gt;C:\Users\elick&lt;/code&gt; 以后 &lt;code&gt;git clone https://github.com/laravel/homestead.git Homestead&lt;/code&gt; 最好不要用composer 用Git吧 这个比较方便 和上个版本不一样了&lt;/li&gt;
&lt;li&gt;进入 Homestead 用命令生成配置文件 &lt;code&gt;bash init.sh&lt;/code&gt; 或者点击init.bat 这样生成C:\Users\ &lt;code&gt;你的用户名&lt;/code&gt; .homestead 目录并且在目录下生成配置文件&lt;/li&gt;
&lt;li&gt;然后这步很关键了 进入刚才git clone下来的 Homestead 目录 在这个目录下 vagrant up 其他目录使用这个命令是没用的 只有在这个目录里使用才可以 这样就生成了全局虚拟机&lt;/li&gt;
&lt;li&gt;几个有用的命令&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant destroy --force     //删除命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant reload --provision  //更新配置文件 好像说是更新网站配置文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;  &lt;code&gt;vagrant up&lt;/code&gt; 必须在 Homestead 目录下使用,还有就是直接启动虚拟机的话,那么 &lt;code&gt;Homestead.yaml&lt;/code&gt;的配置就会失效,所以必须用 &lt;code&gt;vagrant up&lt;/code&gt; 来启动虚拟机. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*说明:&lt;/strong&gt; 其实主要是挂载共享目录问题,端口是没问题的,只不过是默认端口,不是你配置的那个.所以你需要进入虚拟机后 手动挂载共享目录,这样也可以用的,只不过何必跟自己找麻烦,还是老实用&lt;code&gt;vagrant up&lt;/code&gt;吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些文章地址&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/small_rice_/article/details/45366299&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows 安装laravel Homestead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lovelace.blog.51cto.com/1028430/1423343&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vagrant打造自己的开发环境~~我也来一发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cloud.51cto.com/art/201503/470256_all.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1+1&amp;gt;2:用Docker和Vagrant构建简洁高效开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://laravelacademy.org/post/2749.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;{Laravel 5.2 文档}  开始 —— Laravel Homestead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://laravel.com/docs/5.2/homestead&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel Homestead&lt;/a&gt;  学院翻译的不完全 下面半段没翻译 所以还得看原版&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载 VirtualBox 并安装 这个不用说一顿下一步就好了 &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载安装 Vagrant 这个也是跟上面一样 &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;下载地址&lt;/a&gt; 哦 记得重启电脑要不命令不好使的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载 Homestead Vagrant Box  这里你可以使用命令 &lt;code&gt;vagrant box add laravel/homestead&lt;/code&gt;  慢慢等 大概20分钟左右吧 &lt;code&gt;(使用命令时会让你选择 记得要选择 virtualbox 如果你装的VM那就选另一个就好了)&lt;/code&gt;&lt;br&gt;也可以看到下载地址自己下 就是在输入命令后 开始下载时 果断 Ctrl+C &lt;img src=&quot;https://dn-phphub.qbox.me/uploads/images/201502/22/1/MK7b6C67N1.png&quot; alt=&quot;就是这里&quot;&gt;&lt;br&gt;通过地址我发现 &lt;a href=&quot;https://atlas.hashicorp.com/laravel/boxes/homestead&quot;&gt;直接去浏览版本&lt;/a&gt; 然后进入版本后在后面 接上这个 &lt;code&gt;providers/virtualbox.box&lt;/code&gt; 就可以下载了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我试了下下载速度其实快不了多少 但是有个好处可以断点续传 而使用命令是不可以的 如果失败了 是比较麻烦的&lt;br&gt;&lt;a href=&quot;https://atlas.hashicorp.com/laravel/boxes/homestead/versions/0.4.2/providers/virtualbox.box&quot;&gt;https://atlas.hashicorp.com/laravel/boxes/homestead/versions/0.4.2/providers/virtualbox.box&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;失败了…  唉下载那种方式我失败了 总说文件无法打开 也不知道为啥 但是别人都成功了 算了不管了 以后再说吧 还是直接用命令下 反正时间也没差多少&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
      <category term="vagrant" scheme="http://elickzhao.github.io/tags/vagrant/"/>
    
      <category term="laravel" scheme="http://elickzhao.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>自己的docker开发环境 -- 自我版</title>
    <link href="http://elickzhao.github.io/2016/05/%E8%87%AA%E5%B7%B1%E7%9A%84docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%20--%20%E8%87%AA%E6%88%91%E7%89%88/"/>
    <id>http://elickzhao.github.io/2016/05/自己的docker开发环境 -- 自我版/</id>
    <published>2016-05-04T08:49:40.000Z</published>
    <updated>2016-05-04T09:58:07.442Z</updated>
    
    <content type="html">&lt;p&gt;这世界变化快啊 我刚学会这个 又出新东西了&lt;br&gt;&lt;a href=&quot;http://www.csdn.net/article/2014-12-24/2823292-Docker-Kubernetes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于Kubernetes构建Docker集群管理详解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1428540315869.html#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Machine + Compose + Swarm&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://os.51cto.com/art/201411/456204.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;让Docker功能更强大的10个开源工具&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://elickzhao.github.io/2016/05/%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8%20--link%20%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/&quot;&gt;连接容器 –link 简要说明&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;懒人的最爱-–-下载快速用&quot;&gt;&lt;a href=&quot;#懒人的最爱-–-下载快速用&quot; class=&quot;headerlink&quot; title=&quot;懒人的最爱 – 下载快速用&quot;&gt;&lt;/a&gt;懒人的最爱 – 下载快速用&lt;/h1&gt;&lt;p&gt;为了方便急用的同志们,把仓库和配置方法放在最前面,如果想学习的请往下看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库地址: &lt;a href=&quot;https://github.com/elickzhao/docker-study&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/elickzhao/docker-study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置方法&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入&lt;code&gt;dockerfiles&lt;/code&gt;目录, 修改配置文件&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;/c/Users/elick/myapp:/data:rw&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#这里修改 &#39;/c/Users/elick/myapp&#39; 为你主机上要共享的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;/c/Users/elick/myapp/db/mysql:/var/lib/mysql&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#这里修改 &#39;/c/Users/elick/myapp&#39; 为你主机上要共享的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - MYSQL_ROOT_PASSWORD=123456 &lt;span class=&quot;comment&quot;&gt;#根据你的需要修改数据库密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;3306:3306&quot;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#根据需要修改数据库端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;php:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  expose:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;9000&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;/c/Users/elick/myapp/nginx/nginx.conf:/etc/nginx/nginx.conf&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#这里修改 &#39;/c/Users/elick/myapp&#39; 为你主机上要共享的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - php:php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;80:80&quot;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#根据需要修改web服务器端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;docker-composer up&lt;/code&gt; 建立并启动容器 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果除了data容器 全部启动的话 并且浏览localhost也没错的话 那么你就拥有了最新的php环境了&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;几点需要注意的&lt;ol&gt;
&lt;li&gt;首先你需要有docker-composer 如果你在windows下 那就下载 docker toolbox 这个默认安装了 linux下的话 我那个仓库里已经下好了&lt;/li&gt;
&lt;li&gt;把仓库克隆下来 并共享此目录 就是替换&lt;code&gt;/c/Users/elick/myapp&lt;/code&gt; 我这个目录  data容器指向的就是这个目录 指向时一定要是绝对路径 还有就是 windows下 要写虚拟机内的地址 不要写成windows的地址 也就是把此目录已经共享给虚拟机了 因为windows下 容器是运行在虚拟机内的&lt;/li&gt;
&lt;li&gt;目录结构简单说明下&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  └─mysql      &lt;span class=&quot;comment&quot;&gt;#数据保存地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─dockerfiles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  ├─data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  ├─mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  ├─nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  └─php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─logs          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─nginx         &lt;span class=&quot;comment&quot;&gt;#nginx配置文件放在这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  └─conf.d     &lt;span class=&quot;comment&quot;&gt;#虚拟主机配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└─www           &lt;span class=&quot;comment&quot;&gt;#网站内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └─public&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;好快速搭建说到这里,喜欢唠叨的可以往下看.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;#下面不用看了 自己弄时的一些记录 估计没人能看懂 &lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;心路历程-单一进程容器&quot;&gt;&lt;a href=&quot;#心路历程-单一进程容器&quot; class=&quot;headerlink&quot; title=&quot;心路历程  单一进程容器&quot;&gt;&lt;/a&gt;心路历程  单一进程容器&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;大坑无数的nginx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单一进程容器,也就是一个服务放在一个容器里&lt;/p&gt;
&lt;p&gt;Nginx dockerfile&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Apply Nginx configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#终于知道这句的用处了 因为每次ip都是变的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#所以不能直接在这里复制到配置出 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#因为第一次改变后 第二次启动就找不到替换的变量了 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#看启动那个shell就明白了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ADD nginx.conf /opt/etc/nginx.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD nginx.conf /etc/nginx/nginx.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Nginx startup script&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#再一次修改了 因为发现直接用 hosts 里的本地域名就可以指向服务器了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ADD nginx-start.sh /opt/bin/nginx-start.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#RUN chmod u=rwx /opt/bin/nginx-start.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN mkdir -p /data/nginx/conf.d/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VOLUME [&amp;quot;/data&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#不能执行 是找不到 sed 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ENTRYPOINT 	sed -i &amp;quot;s/%fpm-ip%/$PHP_PORT_9000_TCP_ADDR/&amp;quot; /etc/nginx/nginx.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ENTRYPOINT /etc/nginx/nginx-start.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WORKDIR /opt/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ENTRYPOINT [&amp;quot;/opt/bin/nginx-start.sh&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#CMD [&amp;quot;true&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;nginx&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行命令建立镜像并启动容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker build -t elick/nginx .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name myapp-nginx -p 80:80 --volumes-from myapp-data -v /c/Users/e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lick/myapp/new/nginx/nginx.conf:/etc/nginx/nginx.conf --link myapp-php:php -d elick&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这个nginx有个问题是php-fpm的ip无法得到 必须启动后手动该nginx.conf才行 以前看那个人家使用nginx-start.sh启动 可是到我这命令始终出错 说找不到文件 而且莫名其妙的在每行结尾有个/r的标 而且用#!/bin/bash定义shell也报错 真天了噜&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;按道理是 link myapp-php 通过环境变量取得ip 可是就这个shell命令不好使无法进行下去了&lt;/del&gt;&lt;br&gt;-p 80 只是指向 容器端口 host端口是随机的&lt;/p&gt;
&lt;p&gt;第一个坑,因为需要连接php容器,所以配置文件里需要php服务器的地址,一开始的解决方法是写个shell文件,读取环境变量,因为link以后容器内会包含php容器的环境变量,但是这个shell死活报错,就是下面说的那个问题.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;利用命令行已经成功建城环境,不过用docker-composer就遇到问题了&lt;/del&gt;&lt;br&gt;问题终于解决了 原来是shell脚本文件的问题 windows下编辑的文本放到linux就会有格式问题 &lt;a href=&quot;http://elickzhao.github.io/2016/04/%E8%84%9A%E6%9C%AC%E6%8A%A5%E9%94%99%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/&quot;&gt;具体解决看这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二个坑,当时直接把配置文件拷贝到/etc/nginx/nginx.conf 但是每次启动IP都会变化 但是替换变量已经,被替换过了.所以改写了shell 每次都重新复制一遍nginx.conf到/etc/nginx/nginx.conf 然后再去替换才行 &lt;/p&gt;
&lt;p&gt;第三个坑,在shell不行的时候,想过用dockerfile执行命令 直接替换,于是发现了 RUN,ENTRYPOINT,CMD 三个命令执行的差别 具体看这里(&lt;a href=&quot;http://elickzhao.github.io/2016/04/%E6%80%BB%E7%BB%93%20Dockerfile%20%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/&quot;&gt;总结 Dockerfile 一些命令说明&lt;/a&gt;) 但是ENTRYPOINT 执行时 sed命令却没有 不知道为什么没深入研究&lt;/p&gt;
&lt;p&gt;经过上面痛苦的经历,最后找到了办法,原来link后会写个静态地址到hosts,所以根本不用那么麻烦,直接在配置文件里写 服务器名称就ok  这个名称就是 –link myapp-php:php 后面php这个别名  具体说明看这里&lt;a href=&quot;http://elickzhao.github.io/2016/05/%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8%20--link%20%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/&quot;&gt;连接容器 –link 简要说明&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;坑少了不少的 php&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM php:fpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN mkdir -p /data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VOLUME [&lt;span class=&quot;string&quot;&gt;&quot;/data&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        libfreetype6-dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        libjpeg62-turbo-dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        libmcrypt-dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        libpng12-dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;&amp;amp; docker-php-ext-install -j$(nproc) iconv mcrypt \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;&amp;amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;&amp;amp; docker-php-ext-install -j$(nproc) gd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#这个mysqli是我自己添加的 不过这个好像已经下载好了 所以直接install就可以了 没有的恐怕需要上面的apt-get 下载下来才行 不过不知道下载后保存的位置会不会错 因为我自己下了个mysqli 不过在容器里用命令安装时却说找不到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;&amp;amp; docker-php-ext-install -j$(nproc) mysqli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&lt;span class=&quot;string&quot;&gt;&quot;php-fpm&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有link 那么 暴露端口其实没用 只要在dockerfile的 EXPOSE 9000 把端口暴露给容器即可  所以没有  -p 9000:9000 暴露端口也没事&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker build -t elick/php .   #这里可是有个点的啊&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name myapp-php -p 9000:9000 --volumes-from myapp-data -d  elick/php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name myapp-php --link db:mysql --volumes-from myapp-data -d  elick/php&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有一个坑,就是扩展php,因为官方镜像竟然没有mysqli 所以没办法只能自己弄,本来都想放弃了,后来还是平心静气看了下鸟语文档,才发现人家已经准备好命令来解决,只不过我只加了mysqli后没有再深入研究了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决上面的问题mysql就没难度了&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MAINTAINER &amp;quot;elick&amp;quot; &amp;lt;xwiwi@foxmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN mkdir -p /data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VOLUME [&amp;quot;/data&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;mysqld&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker build -t elick/mysql .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name myapp-mysql  --volumes-from myapp-data -v  /c/Users/elick/myapp/db/mysql:/var/lib/mysql &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; elick/mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上都搞懂了 其实mysql就没什么了  其他的相加的服务也是一样&lt;/p&gt;
&lt;p&gt;$ docker run –name myapp-data -v /c/Users/elick/myapp/:/data:rw -it elick/data&lt;br&gt;/bin/bash&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;用php代码 取得容器环境变量 从而能连接到mysql 可以试一下&lt;/strong&gt;&lt;br&gt;能够获取环境变量 但是只能获取和自己相关的 因为使用的用户 是php那个用户 也就是 www-data 并不是root 所以没法看到完整的env环境变量&lt;/p&gt;
&lt;p&gt;我又个下策 就是建立容器时 用shell把环境变量写到 一个文件里 然后读出来  要不然每次启动 连接数据库 还得改php文件 这有点问题啊&lt;/p&gt;
&lt;p&gt;蠢死了 原来这么简单 就像link那篇文章里写的 –link 会写入hosts  那么 –link mysql:mysql 那么就会用这个别名 放到 hosts 这样可以直接用这个别名来当服务器名 也就是网址了 &lt;/p&gt;
&lt;p&gt;看来想的没错 Nginx 里的ip 也是只要用 php 就可以了  只要yaml里配置的别名是正确的就 哦了 &lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$servername = &lt;span class=&quot;string&quot;&gt;&quot;mysql&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$username = &lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$password = &lt;span class=&quot;string&quot;&gt;&quot;123456&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;myapp-data 一点小小的问题&lt;/strong&gt;&lt;br&gt;使用数据容器 用docker-composer 建立时 容器不会启动 但是共享内容还是好使的 究原因 是因为docker是一次性执行 如果没有挂起任务 就会自动关闭 &lt;/p&gt;
&lt;p&gt;解决办法 手动建立这个容器 &lt;code&gt;$ docker run --name myapp-data -v /c/Users/elick/myapp/:/data:rw -it elick/data /bin/bash&lt;/code&gt; 千万不要用 -d  要不容器还是启动不起来 或者自己写个死循环程序 然后启动时 执行这个程序 但是坏处是 当你关闭容器时 会造成麻烦 具体看这篇文章 &lt;a href=&quot;http://xiaorui.cc/2015/01/09/%E9%80%9A%E8%BF%87%E4%BF%A1%E5%8F%B7%E8%A7%A3%E5%86%B3docker%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8%E5%90%8Eexited%E9%80%80%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过信号解决docker启动容器后Exited退出的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;连接mysql居然还需要本地ip才可以 真实麻烦啊&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&quot;另一种形式的环境-就是把nginx和php放到一个容器里-这样省去了很多麻烦&quot;&gt;&lt;a href=&quot;#另一种形式的环境-就是把nginx和php放到一个容器里-这样省去了很多麻烦&quot; class=&quot;headerlink&quot; title=&quot;另一种形式的环境 就是把nginx和php放到一个容器里 这样省去了很多麻烦&quot;&gt;&lt;/a&gt;另一种形式的环境 就是把nginx和php放到一个容器里 这样省去了很多麻烦&lt;/h1&gt;&lt;p&gt;推荐用这个仓库 这个比较好用一些 &lt;a href=&quot;https://github.com/skiy-dockerfile/nginx-php7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/skiy-dockerfile/nginx-php7&lt;/a&gt;&lt;br&gt;看来只能使用nginx和php绑定到一起的 因为这样都在同一个服务器 所以使用127.0.0.1 就可以了 而且这种形式也不错 因为根本也没什么必要把他们分开 如有扩展可以前台再加nginx指向这个nginx&lt;/p&gt;
&lt;h1 id=&quot;过去的总结-这个已经过时了&quot;&gt;&lt;a href=&quot;#过去的总结-这个已经过时了&quot; class=&quot;headerlink&quot; title=&quot;过去的总结 这个已经过时了&quot;&gt;&lt;/a&gt;过去的总结 这个已经过时了&lt;/h1&gt;&lt;p&gt;遇到了好多个坑,为了把php-fpm的ip传给nginx,折腾的要死啊! 使用 –link 虽然nginx容器有了 php容器的环境变量IP地址 但是得把这个IP放到nginx.conf里才行 所以需要做些动作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刚开始想放到Dockerfile里 用了 &lt;code&gt;RUN  sed -i &amp;quot;s/%fpm-ip%/$PHP_PORT_9000_TCP_ADDR/&amp;quot; /etc/nginx/nginx.conf&lt;/code&gt; 但是RUN只在image里 执行也就是说此时容器没有启动 所以环境变量还没有&lt;/li&gt;
&lt;li&gt;于是乎用了 ENTRYPOINT 这个是可以 但是就是上面提到的 shell错误问题 却一直没往这方面想 所以走了弯路&lt;/li&gt;
&lt;li&gt;其实还用了 CMD 但是好像并没有 执行命令 还得进入容器启动 不知道为什么 也懒得找了&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这世界变化快啊 我刚学会这个 又出新东西了&lt;br&gt;&lt;a href=&quot;http://www.csdn.net/article/2014-12-24/2823292-Docker-Kubernetes&quot;&gt;基于Kubernetes构建Docker集群管理详解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1428540315869.html#&quot;&gt;Docker Machine + Compose + Swarm&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://os.51cto.com/art/201411/456204.htm&quot;&gt;让Docker功能更强大的10个开源工具&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://elickzhao.github.io/2016/05/%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8%20--link%20%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/&quot;&gt;连接容器 –link 简要说明&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;懒人的最爱-–-下载快速用&quot;&gt;&lt;a href=&quot;#懒人的最爱-–-下载快速用&quot; class=&quot;headerlink&quot; title=&quot;懒人的最爱 – 下载快速用&quot;&gt;&lt;/a&gt;懒人的最爱 – 下载快速用&lt;/h1&gt;&lt;p&gt;为了方便急用的同志们,把仓库和配置方法放在最前面,如果想学习的请往下看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库地址: &lt;a href=&quot;https://github.com/elickzhao/docker-study&quot;&gt;https://github.com/elickzhao/docker-study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置方法&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入&lt;code&gt;dockerfiles&lt;/code&gt;目录, 修改配置文件&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;/c/Users/elick/myapp:/data:rw&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#这里修改 &#39;/c/Users/elick/myapp&#39; 为你主机上要共享的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;/c/Users/elick/myapp/db/mysql:/var/lib/mysql&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#这里修改 &#39;/c/Users/elick/myapp&#39; 为你主机上要共享的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - MYSQL_ROOT_PASSWORD=123456 &lt;span class=&quot;comment&quot;&gt;#根据你的需要修改数据库密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;3306:3306&quot;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#根据需要修改数据库端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;php:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  expose:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;9000&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;/c/Users/elick/myapp/nginx/nginx.conf:/etc/nginx/nginx.conf&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#这里修改 &#39;/c/Users/elick/myapp&#39; 为你主机上要共享的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - php:php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;80:80&quot;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#根据需要修改web服务器端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;docker-composer up&lt;/code&gt; 建立并启动容器 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果除了data容器 全部启动的话 并且浏览localhost也没错的话 那么你就拥有了最新的php环境了&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Github 更新标签</title>
    <link href="http://elickzhao.github.io/2016/05/Github%20%E6%9B%B4%E6%96%B0%E6%A0%87%E7%AD%BE/"/>
    <id>http://elickzhao.github.io/2016/05/Github 更新标签/</id>
    <published>2016-05-03T14:02:25.000Z</published>
    <updated>2016-05-03T14:03:11.163Z</updated>
    
    <content type="html">&lt;p&gt;不知道为什么 我用TortoiseGit在本地打上了标签 但是同步的时候 Github却不显示 使用了 git bash 命令 推送了一下就好使了  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push --tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考文章:&lt;br&gt;&lt;a href=&quot;http://zengrong.net/post/1746.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git查看、删除、重命名远程分支和tag&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不知道为什么 我用TortoiseGit在本地打上了标签 但是同步的时候 Github却不显示 使用了 git bash 命令 推送了一下就好使了  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
    
      <category term="Git" scheme="http://elickzhao.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>连接容器 --link 简要说明</title>
    <link href="http://elickzhao.github.io/2016/05/%E8%BF%9E%E6%8E%A5%E5%AE%B9%E5%99%A8%20--link%20%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/"/>
    <id>http://elickzhao.github.io/2016/05/连接容器 --link 简要说明/</id>
    <published>2016-05-02T14:40:34.000Z</published>
    <updated>2016-05-02T16:17:33.657Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/halcyonbaby/article/details/42112325&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker容器互联的两种方式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://get.ftqq.com/26.get&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;连接容器 | Docker中文指南&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002949036&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker多容器连接-以Nginx+PHP为例&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/RfQRny&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker学习总结之跨主机进行link&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1428540315869.html#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Machine + Compose + Swarm&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://os.51cto.com/art/201411/456204.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;让Docker功能更强大的10个开源工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里简单说明下 docker –link 的作用&lt;br&gt;可以参考下面dockerfile文件.&lt;br&gt;如果需要连接mysql容器 只要 docker –link mysql 即可 不需要暴露端口 只要dockerfile里有 expose参数 暴露默认端口 3306 就可以了&lt;br&gt;使用–link 会在hosts文件里 加入一个静态ip地址 以你连接的别名命名的 如果没有别名 就是容器名 例如 mysql 172.17.0.3  所以当你需要连接mysql容器时 只需要在配置文件里写服务器地址为 mysql 就可以了 会自动为你解析成当期容器ip的 因为每次容器启动ip都会变化 根据参考文章说明 此方法试用单个服务器 即所有容器都在一个服务器上 分散的服务器还得需要别的方法 暴露端口或者共享一个连接容器 还有新的方法&lt;br&gt;就是docker Swarm 创建个集群  还有docker kubernetes 这个google的 前一个是docker自己的  还有这个 Shipyard 好像也不错的样子 唉 东西太多了 根本看不过来啊 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - MYSQL_ROOT_PASSWORD=123456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;php:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  expose:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;quot;9000:9000&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - php:php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;quot;80:80&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/halcyonbaby/article/details/42112325&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker容器互联的两种方式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http:/
    
    </summary>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose 配置文件 yaml  参数简单介绍</title>
    <link href="http://elickzhao.github.io/2016/05/Docker%20Compose%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20yaml%20%20%E5%8F%82%E6%95%B0%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://elickzhao.github.io/2016/05/Docker Compose 配置文件 yaml  参数简单介绍/</id>
    <published>2016-05-02T14:35:58.000Z</published>
    <updated>2016-05-03T10:05:08.441Z</updated>
    
    <content type="html">&lt;p&gt;一般情况的用法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - MYSQL_ROOT_PASSWORD=123456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;php:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  expose:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;quot;9000:9000&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - php:php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;quot;80:80&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置参数&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;image&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从镜像的构建容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;build&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;直接从pwd的Dockerfile来build，而非通过image选项来pull&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;links&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;连接到那些容器。每个占一行，格式为SERVICE[:ALIAS],例如 – db[:database] 如果不写别名 就是一致的 这个别名 会写在hosts里 当作服务器名 这样可以直接用于连接容器服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;external_links&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;连接到该compose.yaml文件之外的容器中，比如是提供共享或者通用服务的容器服务。格式同links&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;替换默认的command命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ports&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;导出端口 主机端口:容器端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expose&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;导出端口，但不映射到宿主机的端口上。它仅对links的容器开放。格式直接指定端口号即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volumes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;加载路径作为卷, 主机路径:容器路径:rw(读写属性) 容器路径必须是绝对路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volumes_from&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;加载其他容器 服务所有卷&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;env_file&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从一个文件中导入环境变量，文件的格式为RACK_ENV=development&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extends&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;扩展另一个服务，可以覆盖其中的一些选项 看下面 例1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;net&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dns&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可以设置一个或多个自定义的DNS地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dns_search&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可以设置一个或多个DNS的扫描域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;orking_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares，docker run&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;这些命令都是单行的命令,效果和Dockerfile是一样的  看例2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例1&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;common.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build:./webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:- DEBUG=false- SEND_EMAILS=false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;development.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;web:extends:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file: common.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    service: webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:-&amp;quot;8000:8000&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:- db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:- DEBUG=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  image: postgres&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例2&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cpu_shares:73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;working_dir:/code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entrypoint: /code/entrypoint.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user: postgresql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hostname: foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;domainname: foo.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mem_limit:1000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;privileged:true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;restart: always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stdin_open:true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tty:true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;常用命令说明&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;docker-compose up&lt;/td&gt;
&lt;td&gt;启动服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;以daemon(守护进程)方式启动容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–verbose&lt;/td&gt;
&lt;td&gt;输出详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;制定一个非docker-compose.yml命名的yaml文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;设置一个项目名称（默认是directory名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;build&lt;/td&gt;
&lt;td&gt;构建服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kill -s SIGINT&lt;/td&gt;
&lt;td&gt;给服务发送特定的信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logs&lt;/td&gt;
&lt;td&gt;输出日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;输出绑定的端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ps&lt;/td&gt;
&lt;td&gt;输出运行的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pull&lt;/td&gt;
&lt;td&gt;pull服务的image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rm&lt;/td&gt;
&lt;td&gt;删除停止的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;运行某个服务，例如docker-compose run web python manage.py shell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;运行某个服务中存在的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop&lt;/td&gt;
&lt;td&gt;停止某个服务中存在的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;create + run + attach容器到服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale&lt;/td&gt;
&lt;td&gt;设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;感觉有些命令和docker命令重合 所以感觉有些命令没什么用处&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codecloud.net/docker-compose-yaml-5232.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Compose YAML 模板文件&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况的用法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - MYSQL_ROOT_PASSWORD=123456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;php:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  expose:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;quot;9000:9000&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: ./nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes_from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - myapp-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - php:php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;quot;80:80&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  privileged: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>windows下如何生成 github 和 gitoschina 的 ssh 公钥 -- 更新版</title>
    <link href="http://elickzhao.github.io/2016/05/windows%E4%B8%8B%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%20github%20%E5%92%8C%20gitoschina%20%E7%9A%84%20ssh%20%E5%85%AC%E9%92%A5%20--%20%E6%9B%B4%E6%96%B0%E7%89%88/"/>
    <id>http://elickzhao.github.io/2016/05/windows下如何生成 github 和 gitoschina 的 ssh 公钥 -- 更新版/</id>
    <published>2016-05-01T11:54:10.000Z</published>
    <updated>2016-05-01T12:03:03.674Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;安装git，从程序目录打开 “Git Bash” &lt;/li&gt;
&lt;li&gt;键入命令：ssh-keygen -t rsa -C “email@email.com”&lt;br&gt;“email@email.com”是github账号&lt;/li&gt;
&lt;li&gt;提醒你输入key的名称，输入如id_rsa&lt;/li&gt;
&lt;li&gt;在C:\Documents and Settings\Administrator\下产生两个文件：id_rsa和id_rsa.pub&lt;/li&gt;
&lt;li&gt;把4中生成的密钥文件复制到C:\Documents and Settings\Administrator.ssh\ 目 录下。&lt;/li&gt;
&lt;li&gt;用记事本打开id_rsa.pub文件，复制内容，在github.com的网站上到ssh密钥管理页面，添加新公钥，随便取个名字，内容粘贴刚&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;才复制的内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;^_^ OK了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意步骤2中产生的密钥文件在当前用户的根目录，必须把这两个文件放到当前用户目录的“.ssh”目录下才能生效。&lt;br&gt;在windows中只能在命令行下输入创建”.”开头的文件夹。命令为 mkdir .ssh&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;以上的方法有可能存在问题&lt;/strong&gt;&lt;br&gt;使用 Git Bash 生成的公钥与私钥 放到github 经过测试 &lt;code&gt;ssh -T git@github.com&lt;/code&gt; 却返回禁止访问&lt;/p&gt;
&lt;p&gt;这次因为用Vagrant ssh 需要ssh程序所以下载了 cygwin &lt;code&gt;注意:cygwin的ssh也不是默认的 需要选择下载&lt;/code&gt;  用这里的ssh生成的密钥就可以了 生成的方法跟上面是一致的 不过这个密钥的存放位置需要找一下 就是在cygwin的安装目录下的/home里面 &lt;code&gt;/home/elick/.ssh/id_rsa&lt;/code&gt; 这里是cygwin默认的家目录&lt;br&gt;然后把公钥复制到github和oschina 用命令测试 &lt;code&gt;ssh -T git@git.oschina.net&lt;/code&gt; 返回欢迎就ok了&lt;br&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;但还有个问题 Git Tortoise用的是putty密钥 所以这个密钥虽然测试成功 但是不能用客户端来用 这个有空看看怎么办&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;上面那个问题已经 解决了 &lt;a href=&quot;http://elickzhao.github.io/2016/04/%E5%BA%94%E7%94%A8TortoiseGit%E4%B8%BAgithub%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0SSH%20keys/&quot;&gt;解决的文章在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单说明一下 就是 Git Tortoise 会自带一个 putty 密码生成工具 用这个工具转换 这个密码 并用 Git Tortoise 另一个工具 Pageant 把密码填进去 以后提交git时 这个工具帮你自动转换putty密码了 详情还是看上面的那个文章&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;安装git，从程序目录打开 “Git Bash” &lt;/li&gt;
&lt;li&gt;键入命令：ssh-keygen -t rsa -C “email@email.com”&lt;br&gt;“email@email.com”是github账号&lt;/li&gt;
&lt;li&gt;提醒你输入key的名称，输入如id_rsa&lt;/li&gt;
&lt;li&gt;在C:\Documents and Settings\Administrator\下产生两个文件：id_rsa和id_rsa.pub&lt;/li&gt;
&lt;li&gt;把4中生成的密钥文件复制到C:\Documents and Settings\Administrator.ssh\ 目 录下。&lt;/li&gt;
&lt;li&gt;用记事本打开id_rsa.pub文件，复制内容，在github.com的网站上到ssh密钥管理页面，添加新公钥，随便取个名字，内容粘贴刚&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;才复制的内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;^_^ OK了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意步骤2中产生的密钥文件在当前用户的根目录，必须把这两个文件放到当前用户目录的“.ssh”目录下才能生效。&lt;br&gt;在windows中只能在命令行下输入创建”.”开头的文件夹。命令为 mkdir .ssh&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://elickzhao.github.io/tags/Git/"/>
    
      <category term="ssh" scheme="http://elickzhao.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>常用的apt-get命令</title>
    <link href="http://elickzhao.github.io/2016/05/%E5%B8%B8%E7%94%A8%E7%9A%84apt-get%E5%91%BD%E4%BB%A4/"/>
    <id>http://elickzhao.github.io/2016/05/常用的apt-get命令/</id>
    <published>2016-04-30T15:15:51.000Z</published>
    <updated>2016-04-30T15:17:19.209Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;apt-get update&lt;/strong&gt;：在修改/etc/apt/sources.list或者/etc/apt/preferences之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get install packagename&lt;/strong&gt;：安装一个新软件包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get remove packagename&lt;/strong&gt;：卸载一个已安装的软件包（保留配置文件）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get remove package - - purge&lt;/strong&gt;: 删除包，包括删除配置文件等 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get clean&lt;/strong&gt;：这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get upgrade&lt;/strong&gt;：更新所有已安装的软件包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get dist-upgrade&lt;/strong&gt;：将系统升级到新版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-cache search package&lt;/strong&gt; 搜索包 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;apt-cache show package&lt;/strong&gt; 获取包的相关信息，如说明、大小、版本等 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get install package - - reinstall&lt;/strong&gt; 重新安装包 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get -f install&lt;/strong&gt; 修复安装”-f = ——fix-missing” &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get install build-essential&lt;/strong&gt; 配置c/c++ compile环境  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-cache depends package&lt;/strong&gt; 了解使用依赖 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-cache rdepends package&lt;/strong&gt; 是查看该包被哪些包依赖 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get build-dep package&lt;/strong&gt; 安装相关的编译环境 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get source package&lt;/strong&gt; 下载该包的源代码 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get check&lt;/strong&gt; 检查是否有损坏的依赖&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get autoclean&lt;/strong&gt;：定期运行这个命令来清除那些已经卸载的软件包的.deb文件。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get autoremove&lt;/strong&gt; :自动清除不需要的程序包。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;apt-get update&lt;/strong&gt;：在修改/etc/apt/sources.list或者/etc/apt/preferences之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get install packagename&lt;/strong&gt;：安装一个新软件包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get remove packagename&lt;/strong&gt;：卸载一个已安装的软件包（保留配置文件）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get remove package - - purge&lt;/strong&gt;: 删除包，包括删除配置文件等 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get clean&lt;/strong&gt;：这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get upgrade&lt;/strong&gt;：更新所有已安装的软件包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-get dist-upgrade&lt;/strong&gt;：将系统升级到新版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apt-cache search package&lt;/strong&gt; 搜索包 &lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
      <category term="ubuntu" scheme="http://elickzhao.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux下怎样搜索文件</title>
    <link href="http://elickzhao.github.io/2016/04/Linux%E4%B8%8B%E6%80%8E%E6%A0%B7%E6%90%9C%E7%B4%A2%E6%96%87%E4%BB%B6/"/>
    <id>http://elickzhao.github.io/2016/04/Linux下怎样搜索文件/</id>
    <published>2016-04-30T12:39:59.000Z</published>
    <updated>2016-04-30T12:41:54.548Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;使用linux系统难免会忘记文件所在的位置，可以使用以下命令对系统中的文件进行搜索。搜索文件的命令为”find“；”locate“；”whereis“；”which“；”type“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerlink&quot; title=&quot;find&quot;&gt;&lt;/a&gt;find&lt;/h1&gt;&lt;p&gt;linux下最强大的搜索命令为”find“。&lt;br&gt;它的格式为 &lt;code&gt;find &amp;lt;指定目录&amp;gt; &amp;lt;指定条件&amp;gt; &amp;lt;指定动作&amp;gt;&lt;/code&gt;；&lt;br&gt;比如使用find命令搜索在根目录下的所有interfaces文件所在位置，&lt;br&gt;命令格式为 &lt;code&gt;find / -name  &amp;#39;interfaces&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查找当前目录下以@开头的文件或者目录，搜索深度为一级也就是只在当前目录找，不进入子目录&lt;br&gt;&lt;code&gt;find . -maxdepth 1 -name &amp;quot;@*&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;locate&quot;&gt;&lt;a href=&quot;#locate&quot; class=&quot;headerlink&quot; title=&quot;locate&quot;&gt;&lt;/a&gt;locate&lt;/h1&gt;&lt;p&gt;使用locate搜索linux系统中的文件，它比find命令快。&lt;br&gt;因为它查询的是数据库(/var/lib/locatedb)，数据库包含本地所有的文件信息。&lt;br&gt;使用locate命令在根目录下搜索interfaces文件的命令为 &lt;code&gt;locate interfaces&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;whereis&quot;&gt;&lt;a href=&quot;#whereis&quot; class=&quot;headerlink&quot; title=&quot;whereis&quot;&gt;&lt;/a&gt;whereis&lt;/h1&gt;&lt;p&gt;使用”whereis“命令可以搜索linux系统中的所有可执行文件即二进制文件。&lt;br&gt;使用whereis命令搜索grep二进制文件的命令为 &lt;code&gt;whereis grep&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;which&quot;&gt;&lt;a href=&quot;#which&quot; class=&quot;headerlink&quot; title=&quot;which&quot;&gt;&lt;/a&gt;which&lt;/h1&gt;&lt;p&gt;使用which命令查看系统命令是否存在，并返回系统命令所在的位置。&lt;br&gt;使用which命令查看grep命令是否存在以及存在的目录的命令为 &lt;code&gt;which grep&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;type&quot;&gt;&lt;a href=&quot;#type&quot; class=&quot;headerlink&quot; title=&quot;type&quot;&gt;&lt;/a&gt;type&lt;/h1&gt;&lt;p&gt;使用type命令查看系统中的某个命令是否为系统自带的命令。&lt;br&gt;使用type命令查看cd命令是否为系统自带的命令；查看grep 是否为系统自带的命令。&lt;br&gt;&lt;code&gt;type cd&lt;/code&gt; &lt;code&gt;type grep&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用linux系统难免会忘记文件所在的位置，可以使用以下命令对系统中的文件进行搜索。搜索文件的命令为”find“；”locate“；”whereis“；”which“；”type“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerlink&quot; title=&quot;find&quot;&gt;&lt;/a&gt;find&lt;/h1&gt;&lt;p&gt;linux下最强大的搜索命令为”find“。&lt;br&gt;它的格式为 &lt;code&gt;find &amp;lt;指定目录&amp;gt; &amp;lt;指定条件&amp;gt; &amp;lt;指定动作&amp;gt;&lt;/code&gt;；&lt;br&gt;比如使用find命令搜索在根目录下的所有interfaces文件所在位置，&lt;br&gt;命令格式为 &lt;code&gt;find / -name  &amp;#39;interfaces&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查找当前目录下以@开头的文件或者目录，搜索深度为一级也就是只在当前目录找，不进入子目录&lt;br&gt;&lt;code&gt;find . -maxdepth 1 -name &amp;quot;@*&amp;quot;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP 获取服务器详细信息代码</title>
    <link href="http://elickzhao.github.io/2016/04/PHP%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E4%BB%A3%E7%A0%81/"/>
    <id>http://elickzhao.github.io/2016/04/PHP 获取服务器详细信息代码/</id>
    <published>2016-04-29T14:37:15.000Z</published>
    <updated>2016-04-29T15:10:07.952Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;说明一下为什么写这个.因为docker的link时需要取得环境变量里面的mysql容器的IP地址,所以想用php取得容器的环境变量.原本想用 &lt;code&gt;$_ENV[]&lt;/code&gt; 发现没有内容 原来需要修改 &lt;strong&gt;php.ini&lt;/strong&gt; 里面 &lt;code&gt;variables_order = &amp;quot;EGPCS&amp;quot;&lt;/code&gt;&lt;br&gt;上述配置表示PHP 接受的外部变量来源及顺序，EGPCS 是Environment、Get、Post、Cookies 和Server 的缩写。如果variables_order 的配置中缺少E ，则PHP 无法接受环境变量，那么&lt;code&gt;$_ENV&lt;/code&gt; 也就为空了。 后来想到用 php 执行 shell 命令 使用exec , system , shell_exec  但还是获取不到 好赖用 system(env) 才发现原来是我登录的用户为 www-data 所以根本获取不到额外的环境变量 所以这个想法只能作罢, 至于下面 是顺手总结的 一些全局变量的用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;代码&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;获取系统类型及版本号：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;php_uname()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(例：Windows NT COMPUTER 5.1 build 2600)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;只获取系统类型：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;php_uname(&amp;#39;s&amp;#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(或：PHP_OS，例：Windows NT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;只获取系统版本号：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;php_uname(&amp;#39;r&amp;#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无   &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取PHP运行方式：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;php_sapi_name()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(PHP run mode：apache2handler)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取前进程用户名：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Get_Current_User()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取PHP版本：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;PHP_VERSION&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取Zend版本：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;Zend_Version()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取PHP安装路径：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;DEFAULT_INCLUDE_PATH&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取当前文件绝对路径：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;FILE&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取客户端IP：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取服务器解译引擎：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;#39;SERVER_SOFTWARE&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取服务器CPU数量：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;#39;PROCESSOR_IDENTIFIER&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取服务器系统目录：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;#39;SystemRoot&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取服务器域名：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;`$_SERVER[‘SERVER_NAME’]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(建议使用：$_SERVER[“HTTP_HOST”])`&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取用户域名：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;#39;USERDOMAIN&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取服务器语言：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;#39;HTTP_ACCEPT_LANGUAGE&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取服务器Web端口：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;#39;SERVER_PORT&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取服务器IP：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;GetHostByName($_SERVER[&amp;#39;SERVER_NAME&amp;#39;])&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;推荐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取Http请求中Host值：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;quot;HTTP_HOST&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;返回值为域名或IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接受请求的服务器IP：&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;$_SERVER[&amp;quot;SERVER_ADDR&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(有时候获取不到，)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在PHP网站开发中，为了满足网站的需要，时常需要对PHP环境变量进行设置和应用，在虚拟主机环境下，有时我们更需要通过PHP环境变量操作函 数来对PHP环境变量值进行设置。为此我们有必要对PHP环境变量先有所熟悉。今天和大家分享PHP环境变量$_SERVER和PHP系统常量的部分详细 说明。&lt;/p&gt;
&lt;p&gt;PHP提供了很多默认的系统变量，用于获得系统配置信息、网络请求相关信息等。这些默认的系统变量及其作用如表2-1所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$GLOBALS[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;储存当前脚本中的所有全局变量，其KEY为变量名，VALUE为变量值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;当前WEB服务器变量数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_GET[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储以GET方法提交表单中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_POST[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储以POST方法提交表单中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_COOKIE[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;取得或设置用户浏览器Cookies中存储的变量数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_FILES[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储上传文件提交到当前脚本的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_ENV[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储当前WEB环境变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_REQUEST[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储提交表单中所有请求数组，其中包括&lt;code&gt;$_GET、$_POST、$_COOKIE和$_SESSION&lt;/code&gt;中的所有内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SESSION[]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储当前脚本的会话变量数组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;配置文件的不同，在不同环境下显示的内容可能会有所不同。&lt;/p&gt;
&lt;p&gt;与系统变量一样，PHP也提供了一些默认的系统常量供使用。在程序中可以随时应用这些系统常量，但是我们不能任意更改这些常量的值。PHP中常用的一些默认系统常量及其作用如表2-2所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;常量&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FILE&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储当前脚本的绝对路径及文件名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LINE&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储该常量所在的行号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FUNCTION&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储该常量所在的函数名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CLASS&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储该常量所在的类的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP_VERSION&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储当前PHP的版本号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP_OS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;存储当前服务器的操作系统&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; &lt;code&gt;$_GET&lt;/code&gt; 和&lt;code&gt;$_POST&lt;/code&gt;主要针对FORM表单提交的数据，&lt;br&gt; &lt;code&gt;$_COOKIE&lt;/code&gt;和&lt;code&gt;$_SESSION&lt;/code&gt;主要针对客户端游览器和服务器端会话数据。&lt;br&gt; &lt;code&gt;$_FILES&lt;/code&gt;主要针对文件上传时提交的数据，&lt;br&gt; &lt;code&gt;$_REQUEST&lt;/code&gt;主要针对提交表单中所有请求数组，包括&lt;code&gt;$_GET、$_POST&lt;/code&gt;、&lt;br&gt; &lt;code&gt;$_COOKIE&lt;/code&gt;中的所有内容，你可以通过&lt;code&gt;print_r&lt;/code&gt;函数分别输出&lt;code&gt;$_REQUEST&lt;/code&gt;或者&lt;code&gt;$_COOKIE&lt;/code&gt;等进行比较。&lt;/p&gt;
&lt;p&gt;PHP环境变量$_SERVER简介&lt;/p&gt;
&lt;p&gt;　　是一个包含服务器端相关信息的PHP全局环境变量，在PHP4.1.0之前的版本使用$HTTP_SERVER_VARS。&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;$_SERVER[&amp;#39;PHP_SELF&amp;#39;]&lt;/code&gt; 当前正在执行脚本的文件名，与 document root相关。在FORM表单中，如执行文件是本身，你可以在ACTION中使用&lt;code&gt;$_SERVER[&amp;#39;PHP_SELF&amp;#39;]&lt;/code&gt;，好处是当执行文件名有变动时可以不去频繁替换ACTION中的文件名。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;SERVER_NAME&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;当前运行的PHP程序所在服务器主机的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;REQUEST_METHOD&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;访问页面时的请求方法，即GET、HEAD、POST、PUT。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;DOCUMENT_ROOT&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;当前运行的PHP程序所在的文档根目录。也就是PHP.INI文件中的定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;HTTP_REFERER&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;链接到当前页面的前一页面的URL地址。在页面跳转功能中非常有用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;正在浏览当前页面访问者的IP地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;REMOTE_HOST&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;正在浏览当前页面用户的主机名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;REMOTE_PORT&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;正在游览的用户连接到服务器时所使用的端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;SCRIPT_FILENAME&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;当前执行脚本的绝对路径名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;SERVER_PORT&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;服务器所使用的端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;SCRIPT_NAME&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;包含当前脚本的路径。这在页面需要指向自己时非常有用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;REQUEST_URI&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;访问此页面所需的URI。如“/index.html”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;PHP_AUTH_USER&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;应用在HTTP用户登录认证功能中，这个变量是用户输入的用户名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;PHP_AUTH_PW&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;应用在HTTP用户登录认证功能中，这个变量便是用户输入的密码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$_SERVER[&amp;#39;AUTH_TYPE&amp;#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;应用在HTTP用户登录认证功能中，这个变量便是认证的类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;　　注：上述提到的这些PHP全局环境变量，在php.ini中的register_globals设置为on时，这些变量在所有PHP程序脚本中都可用，也就是$_SERVER数组被分离了。当然为了安全考虑，还是不要将register_globals打开为好。&lt;/p&gt;
&lt;p&gt;　　PHP环境变量$_SERVER的更多信息请参考PHP帮助手册，文章开头提到在虚拟主机环境下我们需要通过PHP环境变量操作函数来对PHP环境变量值进行设置，主要用到ini_set和ini_get，其实还有更多此类函数，比如PHP中的错误报告设置等，其实都涉及到PHP.INI中的相关内容，有机会下次分享。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说明一下为什么写这个.因为docker的link时需要取得环境变量里面的mysql容器的IP地址,所以想用php取得容器的环境变量.原本想用 &lt;code&gt;$_ENV[]&lt;/code&gt; 发现没有内容 原来需要修改 &lt;strong&gt;php.ini&lt;/strong&gt; 里面 &lt;code&gt;variables_order = &amp;quot;EGPCS&amp;quot;&lt;/code&gt;&lt;br&gt;上述配置表示PHP 接受的外部变量来源及顺序，EGPCS 是Environment、Get、Post、Cookies 和Server 的缩写。如果variables_order 的配置中缺少E ，则PHP 无法接受环境变量，那么&lt;code&gt;$_ENV&lt;/code&gt; 也就为空了。 后来想到用 php 执行 shell 命令 使用exec , system , shell_exec  但还是获取不到 好赖用 system(env) 才发现原来是我登录的用户为 www-data 所以根本获取不到额外的环境变量 所以这个想法只能作罢, 至于下面 是顺手总结的 一些全局变量的用法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
      <category term="php" scheme="http://elickzhao.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>脚本报错没有那个文件或目录</title>
    <link href="http://elickzhao.github.io/2016/04/%E8%84%9A%E6%9C%AC%E6%8A%A5%E9%94%99%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/"/>
    <id>http://elickzhao.github.io/2016/04/脚本报错没有那个文件或目录/</id>
    <published>2016-04-28T14:26:00.000Z</published>
    <updated>2016-04-28T14:50:55.612Z</updated>
    
    <content type="html">&lt;p&gt;shell脚本报错：#!binbash 没有那个文件或目录&lt;/p&gt;
&lt;p&gt;在Windows下编辑的，文件每行末尾会多出^M，所以先转格式： linux下有个 dos2unix 脚本文件 可以转换&lt;/p&gt;
&lt;p&gt;windows下可以使用 Notepad++ 编辑文件 或者 使用 菜单-&amp;gt;编辑-&amp;gt;文档格式转换  来转换文件格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/16-4/5.png&quot; alt=&quot;转换格式&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;shell脚本报错：#!binbash 没有那个文件或目录&lt;/p&gt;
&lt;p&gt;在Windows下编辑的，文件每行末尾会多出^M，所以先转格式： linux下有个 dos2unix 脚本文件 可以转换&lt;/p&gt;
&lt;p&gt;windows下可以使用 Notepad++ 编辑文件 或者 使
    
    </summary>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
      <category term="小百科" scheme="http://elickzhao.github.io/tags/%E5%B0%8F%E7%99%BE%E7%A7%91/"/>
    
  </entry>
  
  <entry>
    <title>总结 Dockerfile 一些命令说明</title>
    <link href="http://elickzhao.github.io/2016/04/%E6%80%BB%E7%BB%93%20Dockerfile%20%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/"/>
    <id>http://elickzhao.github.io/2016/04/总结 Dockerfile 一些命令说明/</id>
    <published>2016-04-27T14:44:57.000Z</published>
    <updated>2016-04-29T09:06:19.586Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Dockerfile是一个镜像的表示，可以通过Dockerfile来描述构建镜像的步骤，并自动构建一个容器&lt;br&gt;所有的 Dockerfile 命令格式都是:&lt;br&gt;INSTRUCTION arguments&lt;br&gt;虽然指令忽略大小写，但是建议使用大写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;FROM-命令&quot;&gt;&lt;a href=&quot;#FROM-命令&quot; class=&quot;headerlink&quot; title=&quot;FROM 命令&quot;&gt;&lt;/a&gt;FROM 命令&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM &amp;lt;image&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个设置基本的镜像，为后续的命令使用，所以应该作为Dockerfile的第一条指令。&lt;/p&gt;
&lt;p&gt;比如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有指定 tag ，则默认tag是latest，如果都没有则会报错。&lt;/p&gt;
&lt;h1 id=&quot;CMD-命令&quot;&gt;&lt;a href=&quot;#CMD-命令&quot; class=&quot;headerlink&quot; title=&quot;CMD 命令&quot;&gt;&lt;/a&gt;CMD 命令&lt;/h1&gt;&lt;p&gt;有三种格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] (like an exec, preferred form)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] (as default parameters to ENTRYPOINT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD command param1 param2 (as a shell)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个Dockerfile里只能有一个CMD，如果有多个，只有最后一个生效。这是为了引用镜像时避免启动服务器而无法配置 所以你可以在最后再写个CMD从而屏蔽原镜像的命令&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;RUN-命令&quot;&gt;&lt;a href=&quot;#RUN-命令&quot; class=&quot;headerlink&quot; title=&quot;RUN 命令&quot;&gt;&lt;/a&gt;RUN 命令&lt;/h1&gt;&lt;p&gt;RUN命令会在上面FROM指定的镜像里执行任何命令，然后提交(commit)结果，提交的镜像会在后面继续用到。&lt;/p&gt;
&lt;p&gt;两种格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUN &amp;lt;command&amp;gt; (the command is run in a shell - `/bin/sh -c`)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUN [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot; ... ]  (exec form)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#RUN命令等价于:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run image command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker commit container_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#ENTRYPOINT 命令&lt;/p&gt;
&lt;p&gt;有两种语法格式，一种就是上面的(shell方式):&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT cmd param1 param2 ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二种是 exec 格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&amp;quot;cmd&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&amp;quot;echo&amp;quot;, &amp;quot;Whale you be my container&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ENTRYPOINT 命令设置在容器启动时执行命令 这样 –link 的其他容器环境变量用这个命令将会取得&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个可能是 和 RUN最大区别 RUN是生成容器时执行一次,还有个区别就是 ENTRYPOINT 和 CMD 一样只执行最后一个  RUN是可以执行多次的&lt;br&gt;&lt;del&gt;有一次使用sed命令时 RUN可以用 ENTRYPOINT 虽然能生成容器但是却启动不起来 那次用的Docker-composer 所以也不知道和那个是否有关&lt;/del&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@tankywoo-docker:~# cat Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT echo &amp;quot;Welcome!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@tankywoo-docker:~# docker run 62fda5e450d5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Welcome!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;启动几次执行几次 最上面 Step 7 哪行命令&lt;br&gt;&lt;img src=&quot;/image/16-4/6.png&quot; alt=&quot;启动执行ENTRYPOINT&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简要说明:&lt;/strong&gt;&lt;br&gt;RUN是在building image时会运行的指令, 在Dockerfile中可以写多条RUN指令.&lt;br&gt;CMD和ENTRYPOINT则是在运行container 时会运行的指令, 都只能写一条, 如果写了多条, 则最后一条生效.&lt;br&gt;CMD和ENTRYPOINT的区别是:&lt;br&gt;CMD在运行时会被command覆盖, ENTRYPOINT不会被运行时的command覆盖, 但是也可以指定.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;ADD-命令&quot;&gt;&lt;a href=&quot;#ADD-命令&quot; class=&quot;headerlink&quot; title=&quot;ADD 命令&quot;&gt;&lt;/a&gt;ADD 命令&lt;/h1&gt;&lt;p&gt;从src复制文件到container的dest路径:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ADD &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件url&lt;br&gt;&lt;code&gt;&amp;lt;dest&amp;gt;&lt;/code&gt; 是container中的绝对路径&lt;/p&gt;
&lt;h1 id=&quot;VOLUME-命令&quot;&gt;&lt;a href=&quot;#VOLUME-命令&quot; class=&quot;headerlink&quot; title=&quot;VOLUME 命令&quot;&gt;&lt;/a&gt;VOLUME 命令&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VOLUME [&amp;quot;&amp;lt;mountpoint&amp;gt;&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VOLUME [&amp;quot;/data&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建一个挂载点用于共享目录&lt;/p&gt;
&lt;p&gt;#USER 命令&lt;/p&gt;
&lt;p&gt;比如指定 memcached 的运行用户，可以使用上面的 ENTRYPOINT 来实现:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&amp;quot;memcached&amp;quot;, &amp;quot;-u&amp;quot;, &amp;quot;daemon&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更好的方式是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&amp;quot;memcached&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER daemon&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#MAINTAINER 命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MAINTAINER &amp;lt;name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;MAINTAINER命令用来指定维护者的姓名和联系方式&lt;/p&gt;
&lt;h1 id=&quot;EXPOSE-命令&quot;&gt;&lt;a href=&quot;#EXPOSE-命令&quot; class=&quot;headerlink&quot; title=&quot;EXPOSE 命令&quot;&gt;&lt;/a&gt;EXPOSE 命令&lt;/h1&gt;&lt;p&gt;EXPOSE 命令可以设置一个端口在运行的镜像中暴露在外&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt;...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如Nginx使用端口 80，可以把这个端口暴露在外，这样容器外可以看到这个端口并与其通信。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE 80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;详细内容可以看这篇文章 -&amp;gt; &lt;a href=&quot;http://www.open-open.com/lib/view/open1435126385232.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker网络原则入门：EXPOSE，-p，-P，-link&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;WORKDIR-命令&quot;&gt;&lt;a href=&quot;#WORKDIR-命令&quot; class=&quot;headerlink&quot; title=&quot;WORKDIR 命令&quot;&gt;&lt;/a&gt;WORKDIR 命令&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WORKDIR /opt/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置RUN, CMD, ENTRYPOINT 命令设置当前工作路径&lt;/p&gt;
&lt;p&gt;可以设置多次，如果是相对路径，则相对前一个 WORKDIR 命令&lt;/p&gt;
&lt;p&gt;比如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WORKDIR /opt/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN pwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实是在 /opt/bin 下执行 pwd&lt;/p&gt;
&lt;h1 id=&quot;ENV-命令&quot;&gt;&lt;a href=&quot;#ENV-命令&quot; class=&quot;headerlink&quot; title=&quot;ENV 命令&quot;&gt;&lt;/a&gt;ENV 命令&lt;/h1&gt;&lt;p&gt;用于设置环境变量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置了后，后续的RUN命令都可以使用&lt;/p&gt;
&lt;p&gt;使用此dockerfile生成的image新建container，可以通过 docker inspect 看到这个环境变量:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@tankywoo-docker:~# docker inspect 49bfc7a9817f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Env&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;name=tanky&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;HOME=/&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;里面的name=tanky就是设置的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;也可以通过在docker run时设置或修改环境变量:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;docker run -i -t –env name=”tanky” ubuntu:newtest /bin/bash&lt;br&gt;```&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Dockerfile是一个镜像的表示，可以通过Dockerfile来描述构建镜像的步骤，并自动构建一个容器&lt;br&gt;所有的 Dockerfile 命令格式都是:&lt;br&gt;INSTRUCTION arguments&lt;br&gt;虽然指令忽略大小写，但是建议使用大写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;FROM-命令&quot;&gt;&lt;a href=&quot;#FROM-命令&quot; class=&quot;headerlink&quot; title=&quot;FROM 命令&quot;&gt;&lt;/a&gt;FROM 命令&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM &amp;lt;image&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个设置基本的镜像，为后续的命令使用，所以应该作为Dockerfile的第一条指令。&lt;/p&gt;
&lt;p&gt;比如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有指定 tag ，则默认tag是latest，如果都没有则会报错。&lt;/p&gt;
&lt;h1 id=&quot;CMD-命令&quot;&gt;&lt;a href=&quot;#CMD-命令&quot; class=&quot;headerlink&quot; title=&quot;CMD 命令&quot;&gt;&lt;/a&gt;CMD 命令&lt;/h1&gt;&lt;p&gt;有三种格式:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] (like an exec, preferred form)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] (as default parameters to ENTRYPOINT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD command param1 param2 (as a shell)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个Dockerfile里只能有一个CMD，如果有多个，只有最后一个生效。这是为了引用镜像时避免启动服务器而无法配置 所以你可以在最后再写个CMD从而屏蔽原镜像的命令&lt;/p&gt;
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>linux sed 批量替换字符串</title>
    <link href="http://elickzhao.github.io/2016/04/linux%20sed%20%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://elickzhao.github.io/2016/04/linux sed 批量替换字符串/</id>
    <published>2016-04-27T13:25:04.000Z</published>
    <updated>2016-04-27T13:28:06.178Z</updated>
    
    <content type="html">&lt;p&gt;Linux下批量替换多个文件中的字符串的简单方法。用sed命令可以批量替换多个文件中的字符串。&lt;br&gt;命令如下：sed -i “s/原字符串/新字符串/g” &lt;code&gt;grep 原字符串 -rl 所在目录&lt;/code&gt;&lt;br&gt;例如：我要把 charset=gb2312 替换为 charset=UTF-8，执行命令：sed -i “s/charset=gb2312/charset=UTF-8/g” ‘grep charset=gb2312 -rl /www’ 即可。&lt;/p&gt;
&lt;p&gt;解释一下：&lt;br&gt;    -i 表示inplace edit，就地修改文件&lt;br&gt;    -r 表示搜索子目录&lt;br&gt;    -l 表示输出匹配的文件名&lt;br&gt;    这个命令组合很强大，要注意备份文件。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#关于 sed 的更多说明：&lt;br&gt;&lt;strong&gt;sed ‘y/1234567890/ABCDEFGHIJ/’ test_sed&lt;/strong&gt;&lt;br&gt;    test_sed的内容是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1234567890&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2345678901&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3456789012&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 4567890123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行后，test_sed的内容是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ABCDEFGHIJ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BCDEFGHIJA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CDEFGHIJAB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEFGHIJABC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意变换关系是按两个list的位置对应变换&lt;/p&gt;
&lt;p&gt;替换每行所有匹配 &lt;strong&gt;sed ‘s/01/Ab/g’ test_sed&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1234567890&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23456789Ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3456789Ab2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;456789Ab23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：第一行的0，1没有分别替换为A,b&lt;br&gt;删除：d命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘2d’ example—–删除example文件的第二行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘2,$d’ example—–删除example文件的第二行到末尾所有行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘$d’ example—–删除example文件的最后一行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘/test/’d example—–删除example文件所有包含test的行。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;替换：s命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘s/test/mytest/g’ example—–在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -n ‘s/^test/mytest/p’ example—–(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘s/^192.168.0.1/&amp;amp;localhost/’example—–&amp;amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加localhost，变成192.168.0.1localhost。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -n ‘s/\(love\)able/\1rs/p’ example—–love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘s#10#100#g’ example—–不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;选定行的范围：逗号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -n ‘/test/,/check/p’ example—–所有在模板test和check所确定的范围内的行都被打印。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -n ‘5,/^test/p’ example—–打印从第五行开始到第一个包含以test开始的行之间的所有行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘/test/,/check/s/$/sed test/’ example—–对于模板test和west之间的行，每行的末尾用字符串sed test替换。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;多点编辑：e命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed -e ‘1,5d’ -e ‘s/test/check/’example—–(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed –expression=’s/test/check/’ –expression=’/love/d’ example—–一个比-e更好的命令是–expression。它能给sed表达式赋值。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从文件读入：r命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘/test/r file’ example—–file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;写入文件：w命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -n ‘/test/w file’ example—–在example中所有包含test的行都被写入file里。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;追加命令：a命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘/^test/a\\—&amp;gt;this is a example’ example&amp;lt;—–‘this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;插入：i命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘/test/i\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;————————-‘ example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下一个：n命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘/test/&amp;#123; n; s/aa/bb/; &amp;#125;’ example—–如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;变形：y命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ‘1,10y/abcde/ABCDE/’ example—–把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;退出：q命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed ’10q’ example—–打印完第10行后，退出sed。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;保持和获取：h命令和G命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed -e ‘/test/h’ -e ‘$Gexample—–在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;保持和互换：h命令和x命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -e ‘/test/h’ -e ‘/check/x’ example —–互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.frostsky.com/2014/01/linux-sed-command/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址: http://www.frostsky.com/2014/01/linux-sed-command/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux下批量替换多个文件中的字符串的简单方法。用sed命令可以批量替换多个文件中的字符串。&lt;br&gt;命令如下：sed -i “s/原字符串/新字符串/g” &lt;code&gt;grep 原字符串 -rl 所在目录&lt;/code&gt;&lt;br&gt;例如：我要把 charset=gb2312 替换为 charset=UTF-8，执行命令：sed -i “s/charset=gb2312/charset=UTF-8/g” ‘grep charset=gb2312 -rl /www’ 即可。&lt;/p&gt;
&lt;p&gt;解释一下：&lt;br&gt;    -i 表示inplace edit，就地修改文件&lt;br&gt;    -r 表示搜索子目录&lt;br&gt;    -l 表示输出匹配的文件名&lt;br&gt;    这个命令组合很强大，要注意备份文件。&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 国内源列表</title>
    <link href="http://elickzhao.github.io/2016/04/ubuntu%20%E5%9B%BD%E5%86%85%E6%BA%90%E5%88%97%E8%A1%A8/"/>
    <id>http://elickzhao.github.io/2016/04/ubuntu 国内源列表/</id>
    <published>2016-04-26T14:40:34.000Z</published>
    <updated>2016-04-26T14:41:53.372Z</updated>
    
    <content type="html">&lt;p&gt;详细地址都在下面连接 ubuntu国内官网&lt;br&gt;&lt;a href=&quot;http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源列表&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;详细地址都在下面连接 ubuntu国内官网&lt;br&gt;&lt;a href=&quot;http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源列表&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>用docker搭建laravel环境 (Docker for the Laravel framework)</title>
    <link href="http://elickzhao.github.io/2016/04/%E7%94%A8docker%E6%90%AD%E5%BB%BAlaravel%E7%8E%AF%E5%A2%83%20(Docker%20for%20the%20Laravel%20framework)/"/>
    <id>http://elickzhao.github.io/2016/04/用docker搭建laravel环境 (Docker for the Laravel framework)/</id>
    <published>2016-04-25T14:54:28.000Z</published>
    <updated>2016-04-25T15:00:58.669Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近一直想搭建个自己的docker开发环境,找了不少资料.在docker-hub上发现这个,虽然内容老一点,不过思路还是很好的.而且发现用docker搭建原来是如此的so easy! 好吧,让我们开始吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;首先来看看布局结构&quot;&gt;&lt;a href=&quot;#首先来看看布局结构&quot; class=&quot;headerlink&quot; title=&quot;首先来看看布局结构&quot;&gt;&lt;/a&gt;首先来看看布局结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/image/16-4/4.png&quot; alt=&quot;布局图&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单说明下.每一个服务用了一个容器.所有容器的数据都指向数据容器.这样统一管理的同时,也方便修改和报错.这里原作者把artisan和composer也放在一个容器里,但是我个人感觉这样不是太好.当然为了保持宿主主机的纯净度来讲,这是个正确的选择,就是操作起来太费事了.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;下载所有镜像&quot;&gt;&lt;a href=&quot;#下载所有镜像&quot; class=&quot;headerlink&quot; title=&quot;下载所有镜像&quot;&gt;&lt;/a&gt;下载所有镜像&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull dylanlindgren/docker-laravel-data &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  docker pull dylanlindgren/docker-laravel-composer &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  docker pull dylanlindgren/docker-laravel-artisan &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  docker pull dylanlindgren/docker-laravel-phpfpm &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  docker pull dylanlindgren/docker-laravel-nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dylanlindgren/docker-laravel-nginx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx这个镜像的Github地址&lt;/a&gt;,其他的我就不放了,因为这个仓库的首页上都有.所以如果你想去详细了解文件内容可以去看看.&lt;/p&gt;
&lt;h1 id=&quot;下载虚拟机并建立共享目录&quot;&gt;&lt;a href=&quot;#下载虚拟机并建立共享目录&quot; class=&quot;headerlink&quot; title=&quot;下载虚拟机并建立共享目录&quot;&gt;&lt;/a&gt;下载虚拟机并建立共享目录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;要说明一点我用的是windows,所以下面的操作讲的都是windows下的操作经过.OS X 大致类似,linux是最简单的完全不需要虚拟机的,只要建立共享目录就可以了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;下载docker toolbox并安装 (原文是boot2docker 但是貌似不更新了 而且用不了docker composer 所以用新的吧)&lt;/li&gt;
&lt;li&gt;建立共享目录并与虚拟机设置共享&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#首先进入 virtualbox的目录 使用命令创建共享目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VBoxManage sharedfolder add boot2docker-vm --name myapp --hostpath C:\Users\dylan\myapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#创建转发端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VBoxManage modifyvm boot2docker-vm --natpf1 &lt;span class=&quot;string&quot;&gt;&quot;web,tcp,,80,,80&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#当然你还可以直接在virtualbox设置里直接设置这些不用命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#进入linux挂载刚才的共享目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ boot2docker ssh &amp;apos;sudo mkdir /data&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ boot2docker ssh &amp;apos;sudo mount -t vboxsf -o &amp;quot;defaults,uid=33,gid=33,rw&amp;quot; myapp /data&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#共享目录我个人感觉没用,因为每次都得进入linux挂载一次可用,而且只用启动容器时 使用 -v 直接挂载目录就可以了 也不需要这个.当然你可以按着步骤一步一步做 这样肯定能成功!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;万事俱备-启动容器&quot;&gt;&lt;a href=&quot;#万事俱备-启动容器&quot; class=&quot;headerlink&quot; title=&quot;万事俱备 启动容器&quot;&gt;&lt;/a&gt;万事俱备 启动容器&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#启动数据容器 原本好像有点问题 必须这么写要不启动不起来 至于原因嘛 可能跟 bash有关 比较懒没仔细查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`docker run --name myapp-data -v /Users/dylan/myapp:/data:rw -id dylanlindgren/docker-laravel-data /bin/bash ` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#启动php容器 --privileged=true 这个必须要不无法创建目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --privileged=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; --name myapp-php --volumes-from myapp-data &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; dylanlindgren/docker-laravel-phpfpm &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#启动Nginx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --privileged=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; --name myapp-web --volumes-from myapp-data -p 80:80 --link myapp-php:fpm &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; dylanlindgren/docker-laravel-nginx  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#剩下两个 不想写了 因为感觉没用 如果你想用可以看下面 有原文链接 到那里看一下就会了 跟上面大同小异&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;检查浏览器成功与否&quot;&gt;&lt;a href=&quot;#检查浏览器成功与否&quot; class=&quot;headerlink&quot; title=&quot;检查浏览器成功与否&quot;&gt;&lt;/a&gt;检查浏览器成功与否&lt;/h1&gt;&lt;p&gt;进入&lt;code&gt;http://localhost&lt;/code&gt;查看是否有你想要的内容.这里提个醒因为是laravel环境,所以做了地址改写,把根目录指向了public下,我第一次也是找半天,后来看Github源代码才搞懂. 所以你只要把代码放到你的共享目录,也就是上面C:\Users\dylan\myapp\www\public下就ok了.&lt;/p&gt;
&lt;h1 id=&quot;打完收工&quot;&gt;&lt;a href=&quot;#打完收工&quot; class=&quot;headerlink&quot; title=&quot;打完收工&quot;&gt;&lt;/a&gt;打完收工&lt;/h1&gt;&lt;p&gt;到此为止你有了个全新的laravel环境了.不过这还不是我想要的,毕竟版本都很低了,而且有些设置不太合我的心意,所以会自己弄一个环境出来的.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dylanlindgren.com/docker-for-the-laravel-framework/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;想看原文的点这里……&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近一直想搭建个自己的docker开发环境,找了不少资料.在docker-hub上发现这个,虽然内容老一点,不过思路还是很好的.而且发现用docker搭建原来是如此的so easy! 好吧,让我们开始吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;首先来看看布局结构&quot;&gt;&lt;a href=&quot;#首先来看看布局结构&quot; class=&quot;headerlink&quot; title=&quot;首先来看看布局结构&quot;&gt;&lt;/a&gt;首先来看看布局结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/image/16-4/4.png&quot; alt=&quot;布局图&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单说明下.每一个服务用了一个容器.所有容器的数据都指向数据容器.这样统一管理的同时,也方便修改和报错.这里原作者把artisan和composer也放在一个容器里,但是我个人感觉这样不是太好.当然为了保持宿主主机的纯净度来讲,这是个正确的选择,就是操作起来太费事了.&lt;/p&gt;
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
      <category term="laravel" scheme="http://elickzhao.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>linux mount命令的用法详细解析</title>
    <link href="http://elickzhao.github.io/2016/04/linux%20mount%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://elickzhao.github.io/2016/04/linux mount命令的用法详细解析/</id>
    <published>2016-04-21T14:52:53.000Z</published>
    <updated>2016-04-21T15:14:23.322Z</updated>
    
    <content type="html">&lt;h1 id=&quot;挂接命令-mount&quot;&gt;&lt;a href=&quot;#挂接命令-mount&quot; class=&quot;headerlink&quot; title=&quot;挂接命令(mount)&quot;&gt;&lt;/a&gt;挂接命令(mount)&lt;/h1&gt;&lt;p&gt;首先，介绍一下挂接(mount)命令的使用方法，mount命令参数非常多，这里主要讲一下今天我们要用到的。&lt;br&gt;命令格式：mount [-t vfstype] [-o options] device dir&lt;br&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-t vfstype 指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常用类型有：&lt;br&gt;光盘或光盘镜像：iso9660&lt;br&gt;DOS fat16文件系统：msdos&lt;br&gt;Windows 9x fat32文件系统：vfat&lt;br&gt;Windows NT ntfs文件系统：ntfs&lt;br&gt;Mount Windows文件网络共享：smbfs&lt;br&gt;UNIX(LINUX) 文件网络共享：nfs&lt;br&gt;VirtualBox 文件网络共享: vboxsf&lt;/li&gt;
&lt;li&gt;-o options 主要用来描述设备或档案的挂接方式。常用的参数有：&lt;br&gt;loop：用来把一个文件当成硬盘分区挂接上系统&lt;br&gt;ro：采用只读方式挂接设备&lt;br&gt;rw：采用读写方式挂接设备&lt;br&gt;iocharset：指定访问文件系统所用字符集&lt;/li&gt;
&lt;li&gt;device 要挂接(mount)的设备。&lt;/li&gt;
&lt;li&gt;dir设备在系统上的挂接点(mount point)。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;挂接光盘镜像文件&quot;&gt;&lt;a href=&quot;#挂接光盘镜像文件&quot; class=&quot;headerlink&quot; title=&quot;挂接光盘镜像文件&quot;&gt;&lt;/a&gt;挂接光盘镜像文件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从光盘制作光盘镜像文件。将光盘放入光驱，执行下面的命令。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cp /dev/cdrom /home/sunky/mydisk.iso 或&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ dd &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;=/dev/cdrom of=/home/sunky/mydisk.iso&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：执行上面的任何一条命令都可将当前光驱里的光盘制作成光盘镜像文件/home/sunky/mydisk.iso&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将文件和目录制作成光盘镜像文件，执行下面的命令。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkisofs -r -J -V mydisk -o /home/sunky/mydisk.iso /home/sunky/ mydir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：这条命令将/home/sunky/mydir目录下所有的目录和文件制作成光盘镜像文件/home/sunky/mydisk.iso，光盘卷标为：mydisk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;光盘镜像文件的挂接(mount)&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir /mnt/vcdrom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：建立一个目录用来作挂接点(mount point)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -o loop -t iso9660 /home/sunky/mydisk.iso /mnt/vcdrom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：使用/mnt/vcdrom就可以访问盘镜像文件mydisk.iso里的所有文件了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;挂接移动硬盘&quot;&gt;&lt;a href=&quot;#挂接移动硬盘&quot; class=&quot;headerlink&quot; title=&quot;挂接移动硬盘&quot;&gt;&lt;/a&gt;挂接移动硬盘&lt;/h1&gt;&lt;p&gt;对linux系统而言，USB接口的移动硬盘是当作SCSI设备对待的。插入移动硬盘之前，应先用fdisk –l 或 more /proc/partitions查看系统的硬盘和硬盘分区情况。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root at pldyrouter /]#  fdisk -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接好移动硬盘后，再用fdisk –l 或 more&lt;br&gt;/proc/partitions查看系统的硬盘和硬盘分区情况.应该可以发现多了一个SCSI硬盘/dev/sdc和它的两个磁盘分区/dev/sdc1?、/dev/sdc2,其中/dev/sdc5是/dev/sdc2分区的逻辑分区。我们可以使用下面的命令挂接/dev/sdc1和/dev/sdc5。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$mkdir&lt;/span&gt; -p /mnt/usbhd1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$mkdir&lt;/span&gt; -p /mnt/usbhd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：建立目录用来作挂接点(mount point)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t ntfs /dev/sdc1 /mnt/usbhd1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t vfat /dev/sdc5 /mnt/usbhd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：对ntfs格式的磁盘分区应使用-t ntfs 参数，对fat32格式的磁盘分区应使用-t vfat参数。若汉字文件名显示为乱码或不显示，可以使用下面的命令格式。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t ntfs -o iocharset=cp936 /dev/sdc1 /mnt/usbhd1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t vfat -o iocharset=cp936 /dev/sdc5 /mnt/usbhd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# linux系统下使用fdisk分区命令和mkfs文件系统创建命令可以将移动硬盘的分区制作成linux系统所特有的ext2、ext3格式。这样，在linux下使用就更方便了。使用下面的命令直接挂接即可。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount /dev/sdc1 /mnt/usbhd1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;挂接U盘&quot;&gt;&lt;a href=&quot;#挂接U盘&quot; class=&quot;headerlink&quot; title=&quot;挂接U盘&quot;&gt;&lt;/a&gt;挂接U盘&lt;/h1&gt;&lt;p&gt;和USB接口的移动硬盘一样对linux系统而言U盘也是当作SCSI设备对待的。使用方法和移动硬盘完全一样。插入U盘之前，应先用fdisk –l 或 more /proc/partitions查看系统的硬盘和硬盘分区情况。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root at pldyrouter root]&lt;span class=&quot;comment&quot;&gt;#  fdisk -l&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;插入U盘后，再用fdisk –l 或 more /proc/partitions查看系统的硬盘和硬盘分区情况。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root at pldyrouter root]&lt;span class=&quot;comment&quot;&gt;#  fdisk -l&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;系统多了一个SCSI硬盘/dev/sdd和一个磁盘分区/dev/sdd1,/dev/sdd1就是我们要挂接的U盘。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir -p /mnt/usb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：建立一个目录用来作挂接点(mount point)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t vfat /dev/sdd1 /mnt/usb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：现在可以通过/mnt/usb来访问U盘了, 若汉字文件名显示为乱码或不显示，可以使用下面的命令。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t vfat -o iocharset=cp936 /dev/sdd1 /mnt/usb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;挂接Windows文件共享&quot;&gt;&lt;a href=&quot;#挂接Windows文件共享&quot; class=&quot;headerlink&quot; title=&quot;挂接Windows文件共享&quot;&gt;&lt;/a&gt;挂接Windows文件共享&lt;/h1&gt;&lt;p&gt;Windows网络共享的核心是SMB/CIFS，在linux下要挂接(mount)windows的磁盘共享，就必须安装和使用samba 软件包。现在流行的linux发行版绝大多数已经包含了samba软件包，如果安装linux系统时未安装samba请首先安装samba。当然也可以到 www.samba.org网站下载……新的版本是3.0.10版。&lt;br&gt;当windows系统共享设置好以后，就可以在linux客户端挂接(mount)了，具体操作如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir –p /mnt/samba&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：建立一个目录用来作挂接点(mount point)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t smbfs -o username=administrator,password=pldy123 //10.140.133.23/c$ /mnt/samba&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：administrator 和 pldy123 是ip地址为10.140.133.23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;windows计算机的一个用户名和密码，c$是这台计算机的一个磁盘共享&lt;br&gt;如此就可以在linux系统上通过/mnt/samba来访问windows系统磁盘上的文件了。以上操作在redhat as server 3、redflag server 4.1、suse server 9以及windows NT 4.0、windows 2000、windows xp、windows 2003环境下测试通过。&lt;/p&gt;
&lt;h1 id=&quot;挂接UNIX系统NFS文件共享&quot;&gt;&lt;a href=&quot;#挂接UNIX系统NFS文件共享&quot; class=&quot;headerlink&quot; title=&quot;挂接UNIX系统NFS文件共享&quot;&gt;&lt;/a&gt;挂接UNIX系统NFS文件共享&lt;/h1&gt;&lt;p&gt;类似于windows的网络共享，UNIX(Linux)系统也有自己的网络共享，那就是NFS(网络文件系统)，下面我们就以SUN Solaris2.8和REDHAT as server 3 为例简单介绍一下在linux下如何mount nfs网络共享。&lt;br&gt;在linux客户端挂接(mount)NFS磁盘共享之前，必须先配置好NFS服务端。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Solaris系统NFS服务端配置方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改 /etc/dfs/dfstab, 增加共享目录&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;share -F nfs -o rw /&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/home/sunky&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动nfs服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ /etc/init.d/nfs.server start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NFS服务启动以后，也可以使用下面的命令增加新的共享&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ share /&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/home/sunky1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ share /&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/home/sunky2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：/export/home/sunky和/export/home/sunky1是准备共享的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux系统NFS服务端配置方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改 /etc/exports,增加共享目录&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/home/sunky 10.140.133.23(rw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/home/sunky1 *(rw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/home/sunky2 linux-client(rw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：/export/home/目录下的sunky、sunky1、sunky2是准备共享的目录，10.140.133.23、*、 linux-client是被允许挂接此共享linux客户机的IP地址或主机名。如果要使用主机名linux-client必须在服务端主机 /etc/hosts文件里增加linux-client主机ip定义。格式如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.140.133.23 linux-client&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动与停止NFS服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/etc/rc.d/init.d/portmap start (在REDHAT中PORTMAP是默认启动的)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/rc.d/init.d/nfs start 启动NFS服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/rc.d/init.d/nfs stop 停止NFS服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：若修改/etc/export文件增加新的共享，应先停止NFS服务，再启动NFS服务方能使新增加的共享起作用。使用命令exportfs -rv也可以达到同样的效果。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux客户端挂接(mount)其他linux系统或UNIX系统的NFS共享&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir –p /mnt/nfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：建立一个目录用来作挂接点(mount point)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mount -t nfs -o rw 10.140.133.9:/&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/home/sunky /mnt/nfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注：这里我们假设10.140.133.9是NFS服务端的主机IP地址，当然这里也可以使用主机名，但必须在本机/etc/hosts文件里增加服务端ip定义。/export/home/sunky为服务端共享的目录。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如此就可以在linux客户端通过/mnt/nfs来访问其它linux系统或UNIX系统以NFS方式共享出来的文件了。以上操作在 redhat as server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redflag server4.1、suse server 9以及Solaris 7、Solaris 8、Solaris 9 for x86&amp;amp;sparc环境下测试通过&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;补充：&quot;&gt;&lt;a href=&quot;#补充：&quot; class=&quot;headerlink&quot; title=&quot;补充：&quot;&gt;&lt;/a&gt;补充：&lt;/h1&gt;&lt;p&gt;linux加载光驱&lt;br&gt;（1）使用光驱前，要先mount一下：＃mount /dev/cdrom /mnt/cdrom，然后您就可以进入/mnt/cdrom目录下读取光盘内容了；&lt;/p&gt;
&lt;p&gt;（2）当您想退出光盘时，须使用umout命令，否则光驱就会一直处于死锁状态：＃umount /mnt/cdrom。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;挂接命令-mount&quot;&gt;&lt;a href=&quot;#挂接命令-mount&quot; class=&quot;headerlink&quot; title=&quot;挂接命令(mount)&quot;&gt;&lt;/a&gt;挂接命令(mount)&lt;/h1&gt;&lt;p&gt;首先，介绍一下挂接(mount)命令的使用方法，mount命令参数非常多，这里主要讲一下今天我们要用到的。&lt;br&gt;命令格式：mount [-t vfstype] [-o options] device dir&lt;br&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-t vfstype 指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常用类型有：&lt;br&gt;光盘或光盘镜像：iso9660&lt;br&gt;DOS fat16文件系统：msdos&lt;br&gt;Windows 9x fat32文件系统：vfat&lt;br&gt;Windows NT ntfs文件系统：ntfs&lt;br&gt;Mount Windows文件网络共享：smbfs&lt;br&gt;UNIX(LINUX) 文件网络共享：nfs&lt;br&gt;VirtualBox 文件网络共享: vboxsf&lt;/li&gt;
&lt;li&gt;-o options 主要用来描述设备或档案的挂接方式。常用的参数有：&lt;br&gt;loop：用来把一个文件当成硬盘分区挂接上系统&lt;br&gt;ro：采用只读方式挂接设备&lt;br&gt;rw：采用读写方式挂接设备&lt;br&gt;iocharset：指定访问文件系统所用字符集&lt;/li&gt;
&lt;li&gt;device 要挂接(mount)的设备。&lt;/li&gt;
&lt;li&gt;dir设备在系统上的挂接点(mount point)。
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile VOLUME 和 -v 的区别</title>
    <link href="http://elickzhao.github.io/2016/04/Dockerfile%20VOLUME%20%E5%92%8C%20-v%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://elickzhao.github.io/2016/04/Dockerfile VOLUME 和 -v 的区别/</id>
    <published>2016-04-21T12:27:05.000Z</published>
    <updated>2016-04-21T12:38:03.494Z</updated>
    
    <content type="html">&lt;p&gt;elick     发布    新文稿         &lt;/p&gt;
&lt;p&gt;Dockerfile VOLUME 和 -v 的区别&lt;/p&gt;
&lt;p&gt;docker 服务器相关技术&lt;/p&gt;
&lt;p&gt;找到了官方的userguide： &lt;a href=&quot;https://docs.docker.com/engine/userguide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.docker.com/engine/userguide&lt;/a&gt;…&lt;/p&gt;
&lt;p&gt;从中了解了一点：VOLUME并非只是声明，它会把指定路径重新加载一遍，我通过inspect容器也发现了这一点。&lt;/p&gt;
&lt;p&gt;这是在Dockerfile指定了VOLUME，并没有指定-v，查看容器的Mounts信息：&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;Mounts&quot;:&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            &quot;Name&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;b3e2dcacd3f9f40b43ccd5773d45ca74f0f49b02d3da17749cb378ff9f59bb67&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            &quot;Source&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/var/lib/docker/volumes/b3e2dcacd3f9f40b43ccd5773d45ca74f0f49b02d3da17749cb378ff9f59bb67/_data&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            &quot;Destination&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/etc&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            &quot;Driver&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;local&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            &quot;Mode&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            &quot;RW&quot;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是在上一个的基础上，指定了-v，查看容器的Mounts信息：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;Mounts&quot;:&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;           &quot;Source&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/etc&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;           &quot;Destination&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/etc&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;           &quot;Mode&quot;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;           &quot;RW&quot;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你去&lt;code&gt;/var/lib/docker/volumes/b3e2dcacd3f9f40b43ccd5773d45ca74f0f49b02d3da17749cb378ff9f59bb67/_data&lt;/code&gt;目录下看一下，大致就清楚了。当Dockerfile里设置的VOLUME目录存在文件,那么在这个目录里就会出现 如用用了-v再指向这个VOLUME目录,又会被host目录覆盖掉&lt;/p&gt;
&lt;p&gt;你可以把VOLUME理解为，从镜像中复制指定卷的文件夹到本地/var/lib/docker/volumes/xxxxxxxxx/文件夹，然后把本地的该文件夹挂载到容器里面去。&lt;/p&gt;
&lt;p&gt;本质上还是相当于一个本地文件夹挂载而已。&lt;/p&gt;
&lt;p&gt;继续补充，因为VOLUME实际上就是在本地新建了一个文件夹挂载了，那么实际上容器内部的文件夹有三种情况：&lt;br&gt;1、没有指定VOLUME也没有指定-v，这种是普通文件夹。&lt;br&gt;2、指定了VOLUME没有指定-v，这种文件夹可以在不同容器之间共享，但是无法在本地修改。&lt;br&gt;3、指定了-v的文件夹，这种文件夹可以在不同容器之间共享，且可以在本地修改。&lt;/p&gt;
&lt;p&gt;那就列举一种需要在不同容器之间共享且不需要在本地修改的情况。&lt;/p&gt;
&lt;p&gt;首先，我们先了解容器中获取动态数据的方式：&lt;br&gt;1、本地提供，挂载到容器&lt;br&gt;2、远程提供，从远程下载&lt;br&gt;3、生成提供，在容器内部生成&lt;/p&gt;
&lt;p&gt;后面两种命令都不需要在本地修改，但是他们生成的动态数据却可能需要共享。&lt;br&gt;下载命令，比如git clone直接从git服务器拉取代码，不需要挂载本地文件夹。&lt;br&gt;生成命令，比如jekyll（静态网站生成器），你可能挂载一个代码文件夹，然后build目录里生成的静态网页文件需要提供给Apache服务器，那么你需要指定build目录为VOLUME。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;elick     发布    新文稿         &lt;/p&gt;
&lt;p&gt;Dockerfile VOLUME 和 -v 的区别&lt;/p&gt;
&lt;p&gt;docker 服务器相关技术&lt;/p&gt;
&lt;p&gt;找到了官方的userguide： &lt;a href=&quot;https://docs.docker
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>常用的vagrant命令</title>
    <link href="http://elickzhao.github.io/2016/04/%E5%B8%B8%E7%94%A8%E7%9A%84vagrant%E5%91%BD%E4%BB%A4/"/>
    <id>http://elickzhao.github.io/2016/04/常用的vagrant命令/</id>
    <published>2016-04-20T13:28:00.000Z</published>
    <updated>2016-04-20T13:38:27.299Z</updated>
    
    <content type="html">&lt;p&gt;常用的vagrant命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant box add NAME URL    #添加一个box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant box list            #查看本地已添加的box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant box remove NAME virtualbox #删除本地已添加的box，如若是版本1.0.x，执行$ vagrant box remove  NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant init NAME          #初始化，实质应是创建Vagrantfile文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant up                   #启动虚拟机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant halt                 #关闭虚拟机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant destroy            #销毁虚拟机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant reload             #重启虚拟机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant package            #当前正在运行的VirtualBox虚拟环境打包成一个可重复使用的box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant ssh                 #进入虚拟环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant init laravel/homestead #初始化并下载box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant box add base precise64.box #base 表示指定默认的box，也可以为box指定名称，使用base时，之后可以直接使用 vagrant init 进行初始化，如果自行指定名称，则初始化的时候需要指定box的名称。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;常用的vagrant命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
      <category term="vagrant" scheme="http://elickzhao.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>应用TortoiseGit为github账号添加SSH keys</title>
    <link href="http://elickzhao.github.io/2016/04/%E5%BA%94%E7%94%A8TortoiseGit%E4%B8%BAgithub%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0SSH%20keys/"/>
    <id>http://elickzhao.github.io/2016/04/应用TortoiseGit为github账号添加SSH keys/</id>
    <published>2016-04-19T09:35:30.000Z</published>
    <updated>2016-04-19T09:36:56.356Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;呵呵 我算是比较懒的 不过避免重复造轮子这种降低效率的事 还是直接引入别人写得详细的文章吧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/63f236280f7e750209ab3d60.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章地址&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;呵呵 我算是比较懒的 不过避免重复造轮子这种降低效率的事 还是直接引入别人写得详细的文章吧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/63f236280f7e750209ab3d60.
    
    </summary>
    
    
      <category term="Git" scheme="http://elickzhao.github.io/tags/Git/"/>
    
  </entry>
  
</feed>

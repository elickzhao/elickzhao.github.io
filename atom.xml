<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>elickzhao&#39;s Blog</title>
  <subtitle>与其临渊羡鱼 不如退而结网!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://elickzhao.github.io/"/>
  <updated>2016-04-21T07:03:25.398Z</updated>
  <id>http://elickzhao.github.io/</id>
  
  <author>
    <name>elickzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> ubuntu 国内源列表</title>
    <link href="http://elickzhao.github.io/2016/04/ubuntu-%E5%9B%BD%E5%86%85%E6%BA%90%E5%88%97%E8%A1%A8/"/>
    <id>http://elickzhao.github.io/2016/04/ubuntu-国内源列表/</id>
    <published>2016-04-21T06:56:00.000Z</published>
    <updated>2016-04-21T07:03:25.398Z</updated>
    
    <content type="html">&lt;p&gt;详细地址都在下面连接 ubuntu国内官网&lt;br&gt;&lt;a href=&quot;http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源列表&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;详细地址都在下面连接 ubuntu国内官网&lt;br&gt;&lt;a href=&quot;http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源列表&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>常用的vagrant命令</title>
    <link href="http://elickzhao.github.io/2016/04/%E5%B8%B8%E7%94%A8%E7%9A%84vagrant%E5%91%BD%E4%BB%A4/"/>
    <id>http://elickzhao.github.io/2016/04/常用的vagrant命令/</id>
    <published>2016-04-20T13:28:00.000Z</published>
    <updated>2016-04-20T13:38:27.299Z</updated>
    
    <content type="html">&lt;p&gt;常用的vagrant命令:&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant box add NAME URL    &lt;span class=&quot;comment&quot;&gt;#添加一个box&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant box list            &lt;span class=&quot;comment&quot;&gt;#查看本地已添加的box&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant box remove NAME virtualbox &lt;span class=&quot;comment&quot;&gt;#删除本地已添加的box，如若是版本1.0.x，执行$ vagrant box remove  NAME&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant init NAME          &lt;span class=&quot;comment&quot;&gt;#初始化，实质应是创建Vagrantfile文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant up                   &lt;span class=&quot;comment&quot;&gt;#启动虚拟机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant halt                 &lt;span class=&quot;comment&quot;&gt;#关闭虚拟机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant destroy            &lt;span class=&quot;comment&quot;&gt;#销毁虚拟机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant reload             &lt;span class=&quot;comment&quot;&gt;#重启虚拟机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant package            &lt;span class=&quot;comment&quot;&gt;#当前正在运行的VirtualBox虚拟环境打包成一个可重复使用的box&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant ssh                 &lt;span class=&quot;comment&quot;&gt;#进入虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant init laravel/homestead &lt;span class=&quot;comment&quot;&gt;#初始化并下载box&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;vagrant box add base precise64.box &lt;span class=&quot;comment&quot;&gt;#base 表示指定默认的box，也可以为box指定名称，使用base时，之后可以直接使用 vagrant init 进行初始化，如果自行指定名称，则初始化的时候需要指定box的名称。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;常用的vagrant命令:&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
      <category term="vagrant" scheme="http://elickzhao.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>应用TortoiseGit为github账号添加SSH keys</title>
    <link href="http://elickzhao.github.io/2016/04/%E5%BA%94%E7%94%A8TortoiseGit%E4%B8%BAgithub%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0SSH%20keys/"/>
    <id>http://elickzhao.github.io/2016/04/应用TortoiseGit为github账号添加SSH keys/</id>
    <published>2016-04-19T09:35:30.000Z</published>
    <updated>2016-04-19T09:36:56.356Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;呵呵 我算是比较懒的 不过避免重复造轮子这种降低效率的事 还是直接引入别人写得详细的文章吧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/63f236280f7e750209ab3d60.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章地址&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;呵呵 我算是比较懒的 不过避免重复造轮子这种降低效率的事 还是直接引入别人写得详细的文章吧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/63f236280f7e750209ab3d60.
    
    </summary>
    
    
      <category term="Git" scheme="http://elickzhao.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>composer 一些使用记录</title>
    <link href="http://elickzhao.github.io/2016/04/%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://elickzhao.github.io/2016/04/一些使用记录/</id>
    <published>2016-04-18T16:01:32.000Z</published>
    <updated>2016-04-19T07:12:52.731Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer selfupdate                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer require &quot;foo/bar:1.0.0&quot;                    安装一个库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; foo/bar                             更新单个库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt; laravel/laravel myapp &lt;span class=&quot;comment&quot;&gt;--prefer-dist 创建laravel项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer config -g repo.packagist composer https://packagist.phpcomposer.com 配置仓库镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; require &lt;span class=&quot;string&quot;&gt;&quot;laravel/installer=~1.1&quot;&lt;/span&gt;    全局安装laravel安装器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--prefer-dist               后面这个参数是强制使用压缩包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--profile                          后面这个参数是显示安装时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer dump-autoload &lt;span class=&quot;comment&quot;&gt;--optimize                   生产环境优化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; symfony/yaml &lt;span class=&quot;comment&quot;&gt;--prefer-source        强制克隆代码 用于修改库文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当你更新一个修改的库的时候 会提示你是否放弃修改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ composer &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Loading composer repositories &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; information  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Updating dependencies  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - Updating symfony/symfony v2&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt; (v2&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;- =&amp;gt; v2&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    The &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; has modified files:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    M Dumper.php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Discard changes [y,n,v,s,?]?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;全局配置目录&lt;/strong&gt;&lt;br&gt;C:\Users\elick\AppData\Roaming\Composer&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
    
    </summary>
    
    
      <category term="composer 一些使用记录" scheme="http://elickzhao.github.io/tags/composer-%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://elickzhao.github.io/2016/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://elickzhao.github.io/2016/04/Docker常用命令/</id>
    <published>2016-04-18T15:42:00.000Z</published>
    <updated>2016-04-21T07:13:30.426Z</updated>
    
    <content type="html">&lt;p&gt;title: Docker常用命令&lt;br&gt;date: 2016-04-19 00:42:12&lt;br&gt;tags: [docker,服务器相关技术]&lt;/p&gt;
&lt;h2 id=&quot;categories-服务器端&quot;&gt;&lt;a href=&quot;#categories-服务器端&quot; class=&quot;headerlink&quot; title=&quot;categories: 服务器端&quot;&gt;&lt;/a&gt;categories: 服务器端&lt;/h2&gt;&lt;h1 id=&quot;查看docker信息（version、info）&quot;&gt;&lt;a href=&quot;#查看docker信息（version、info）&quot; class=&quot;headerlink&quot; title=&quot;查看docker信息（version、info）&quot;&gt;&lt;/a&gt;查看docker信息（version、info）&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看docker版本  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; version  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示docker系统的信息  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; info&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;对image的操作（search、pull、images、rmi、history）&quot;&gt;&lt;a href=&quot;#对image的操作（search、pull、images、rmi、history）&quot; class=&quot;headerlink&quot; title=&quot;对image的操作（search、pull、images、rmi、history）&quot;&gt;&lt;/a&gt;对image的操作（search、pull、images、rmi、history）&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 检索image  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; search image_name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载image  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; pull image_name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don&#39;t truncate output; -q, --quiet=false Only show numeric IDs  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; images  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; rmi image_name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#删除所有镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker rmi $(docker images | grep none | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $3&amp;#125;&#39;&lt;/span&gt; | sort -r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示一个镜像的历史; --no-trunc=false Don&#39;t truncate output; -q, --quiet=false Only show numeric IDs  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt; image_name &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#导出容器到本地镜像库：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; container_id &amp;gt; centos.tar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#导入容器快照为镜像(docker import)：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#(1)容器在本地：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat centos.tar | docker import - registry.intra.weibo.com/yushuang3/centos:v2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#(2)容器在网络上：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker import http://example.com/exampleimage.tgz registry.intra.weibo.com/yushuang3/centos:v2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;也可以使用 docker import 来导入一个容器快照到本地镜像库。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;启动容器（run）&quot;&gt;&lt;a href=&quot;#启动容器（run）&quot; class=&quot;headerlink&quot; title=&quot;启动容器（run）&quot;&gt;&lt;/a&gt;启动容器（run）&lt;/h1&gt;&lt;p&gt;docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在容器中运行&quot;echo&quot;命令，输出&quot;hello word&quot;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; run image_name &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello word&quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#命名容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; run --name &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; image_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note: 这个很有用 这样删除容器等一些操作直接用名称就可以 不用去看ID了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 交互式进入容器中  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; run -i -t image_name /bin/bash  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note: 如果镜像有tag，需要在image后加:tag名 （-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#后台执行容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; run &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; image_name &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#转发端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; run -p 8080:8080 image_name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note:  主机端口(host port) : 容器端口(container post)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#挂载指定的主机目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -v /c/Users/elick/www:/var/www&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note: 主机目录 : 容器目录 挂载指定主机目录 这个是Dockerfile VOLUME没法办到的 因为考虑的Dockerfile的迁移问题 主机目录是不确定的,所这个指定目录只能用命令行来执行 而Dockerfile VOLUME 只是挂载了容器内一个目录 还有个问题是 这个挂载是吧主机目录完全复制到容器目录 但不是双向的 会把容器目录内容删除 **两个地址都必须是绝对地址 还有容器内的目录可以没有 会自动添加的**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在容器中安装新的程序  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; run image_name apt-get install -y app_name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note：  在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;查看容器（ps）&quot;&gt;&lt;a href=&quot;#查看容器（ps）&quot; class=&quot;headerlink&quot; title=&quot;查看容器（ps）&quot;&gt;&lt;/a&gt;查看容器（ps）&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出当前所有正在运行的container  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; ps  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出所有的container  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; ps &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出最近一次启动的container  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; ps &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;保存对容器的修改（commit）&quot;&gt;&lt;a href=&quot;#保存对容器的修改（commit）&quot; class=&quot;headerlink&quot; title=&quot;保存对容器的修改（commit）&quot;&gt;&lt;/a&gt;保存对容器的修改（commit）&lt;/h1&gt;&lt;p&gt;当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存对容器的修改; -a, --author=&quot;&quot; Author; -m, --message=&quot;&quot; Commit message  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; commit &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;author&#39;&lt;/span&gt; ID new_image_name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）&quot;&gt;&lt;a href=&quot;#对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）&quot; class=&quot;headerlink&quot; title=&quot;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）&quot;&gt;&lt;/a&gt;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach、exec、rename、logs、link）&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除所有容器  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; rm `docker ps &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -q`  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; rm Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 停止、启动、杀死一个容器  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; stop Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; start Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; logs Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; diff Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示一个运行的容器里面的进程信息  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; top Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 从容器里面拷贝文件/目录到本地一个路径  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; cp Name:/container_path to_path  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; cp ID:/container_path to_path  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; restart Name/ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; attach ID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。但是脱离出来后 容器也就停止了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#进入容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it container_name /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note: &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; 使用-it时，和我们平常操作console界面类似。而且也不会像attach方式因为退出，导致 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;整个容器退出。（-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开） 和run -it 一样后面必须接上要执行的命令 比如 /bin/bash 否则会报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#修改容器名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; rename old容器名  new容器名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#要获取容器的输出信息:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; logs &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &amp;lt;容器名orID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看容器的root用户密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; logs &amp;lt;容器名orID&amp;gt; 2&amp;gt;&amp;amp;1 | grep &lt;span class=&quot;string&quot;&gt;&#39;^User: &#39;&lt;/span&gt; | tail -n1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#一个容器连接到另一个容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; run -i -t --name sonar &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; -link mmysql:db   tpires/sonar-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note: sonar容器连接到mmysql容器，并将mmysql容器重命名为db。这样，sonar容器就可以使用db的相关的环境变量了。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;保存和加载镜像（save、load）&quot;&gt;&lt;a href=&quot;#保存和加载镜像（save、load）&quot; class=&quot;headerlink&quot; title=&quot;保存和加载镜像（save、load）&quot;&gt;&lt;/a&gt;保存和加载镜像（save、load）&lt;/h1&gt;&lt;p&gt;当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存镜像到一个tar包; -o, --output=&quot;&quot; Write to an file  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; save image_name -o file_path  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加载一个tar包格式的镜像; -i, --input=&quot;&quot; Read from a tar archive file  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; load -i file_path  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 机器a  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; save image_name &amp;gt; /home/save.tar  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用scp将save.tar拷到机器b上，然后：  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; load &amp;lt; /home/save.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;登录registry-server（login）&quot;&gt;&lt;a href=&quot;#登录registry-server（login）&quot; class=&quot;headerlink&quot; title=&quot;登录registry server（login）&quot;&gt;&lt;/a&gt;登录registry server（login）&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 登陆registry server; -e, --email=&quot;&quot; Email; -p, --password=&quot;&quot; Password; -u, --username=&quot;&quot; Username  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; login&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;发布image（push）&quot;&gt;&lt;a href=&quot;#发布image（push）&quot; class=&quot;headerlink&quot; title=&quot;发布image（push）&quot;&gt;&lt;/a&gt;发布image（push）&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 发布docker镜像  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; push new_image_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;根据Dockerfile-构建出一个容器&quot;&gt;&lt;a href=&quot;#根据Dockerfile-构建出一个容器&quot; class=&quot;headerlink&quot; title=&quot;根据Dockerfile 构建出一个容器&quot;&gt;&lt;/a&gt;根据Dockerfile 构建出一个容器&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#build  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      --no-cache=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; Do not use cache when building the image  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -q, --quiet=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; Suppress the verbose output generated by the containers  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      --rm=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; Remove intermediate containers after a successful build  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -t, --tag=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; Repository name (and optionally a tag) to be applied to the resulting image &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; of success  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; build -t image_name Dockerfile_path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.tankywoo.com/docker/2014/05/08/docker-2-dockerfile.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 2 – 关于Dockerfile&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.tankywoo.com/docker/2014/05/08/docker-4-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 4 – 总结&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/uYzeAnz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 Docker Volume（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/qinyushuang/article/details/43342091&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker 容器相关命令&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;title: Docker常用命令&lt;br&gt;date: 2016-04-19 00:42:12&lt;br&gt;tags: [docker,服务器相关技术]&lt;/p&gt;
&lt;h2 id=&quot;categories-服务器端&quot;&gt;&lt;a href=&quot;#categories-服务器端&quot; class=&quot;h
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>docker及boot2docker相关研究</title>
    <link href="http://elickzhao.github.io/2016/04/docker%E5%8F%8Aboot2docker%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/"/>
    <id>http://elickzhao.github.io/2016/04/docker及boot2docker相关研究/</id>
    <published>2016-04-18T14:51:49.000Z</published>
    <updated>2016-04-20T08:12:12.265Z</updated>
    
    <content type="html">&lt;h1 id=&quot;boot2docker转发端口问题&quot;&gt;&lt;a href=&quot;#boot2docker转发端口问题&quot; class=&quot;headerlink&quot; title=&quot;boot2docker转发端口问题&quot;&gt;&lt;/a&gt;boot2docker转发端口问题&lt;/h1&gt;&lt;p&gt;  这是个很恶心的问题 因为boot2docker还是依赖与virtualbox 所以虽然使用命令 &lt;code&gt;docker run -dp 8080:8080 php&lt;/code&gt;进行转发 但是还需要修改虚拟机的端口转发才可以 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令解析:&lt;br&gt;  docker -d 后台执行 -p 转发端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;img src=&quot;/image/16-4/2.png&quot; alt=&quot;虚拟机转发端口&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;boot2docker数据卷问题&quot;&gt;&lt;a href=&quot;#boot2docker数据卷问题&quot; class=&quot;headerlink&quot; title=&quot;boot2docker数据卷问题&quot;&gt;&lt;/a&gt;boot2docker数据卷问题&lt;/h1&gt;&lt;p&gt;  这个就更恶心了,使用在windows下的boot2docker命令行就会报错,只有进入virtualbox 使用命令 &lt;code&gt;docker run -dp 8080:8080 --name test1 -v /c/Users/elick/www:/var/www elick/php&lt;/code&gt;才可以 真是醉了&lt;br&gt;  &lt;strong&gt;需要注意的一点:&lt;/strong&gt; boot2docker建立的虚拟机有个自启动共享目录 &lt;code&gt;c/Users C:\Users&lt;/code&gt; 在虚拟机里的根目录下能看到这个目录 所以windows上的目录的根目录是/c/开始的&lt;br&gt;&lt;img src=&quot;/image/16-4/3.png&quot; alt=&quot;共享目录&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;boot2docker使用总结&quot;&gt;&lt;a href=&quot;#boot2docker使用总结&quot; class=&quot;headerlink&quot; title=&quot;boot2docker使用总结&quot;&gt;&lt;/a&gt;boot2docker使用总结&lt;/h1&gt;&lt;p&gt;  从上面两点来看,虽然省略了配置vagrantfile的麻烦,但是还得去弄虚拟机从这点看,貌似还不如使用vagrant来的简单些&lt;/p&gt;
&lt;h1 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://avnpc.com/pages/build-php-develop-env-by-docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker在PHP项目开发环境中的应用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/uYzeAnz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;{译} 深入理解 Docker Volume（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://my.oschina.net/mfk123/blog/292425&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockers 快速学习（四）Docker 容器的使用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.linuxdown.net/install/soft/2016/0303/4906.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker安装_Ubuntu 15.10 &amp;amp; 14.04 LTS上安装和管理Docker&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/halcyonbaby/article/details/46884605&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker exec与Docker attach&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-10915175-id-4443127.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker之常用命令&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/7V7vYn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker学习笔记(2)–Docker常用命令&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://tech.uc.cn/?p=2726&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;利用Docker构建开发环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://snoopyxdy.blog.163.com/blog/static/6011744020147187542090&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;利用docker快速部署应用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/junjun16818/article/details/30655543&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker volume使用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://my.oschina.net/piorcn/blog/324202&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker学习—挂载本地目录&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;boot2docker转发端口问题&quot;&gt;&lt;a href=&quot;#boot2docker转发端口问题&quot; class=&quot;headerlink&quot; title=&quot;boot2docker转发端口问题&quot;&gt;&lt;/a&gt;boot2docker转发端口问题&lt;/h1&gt;&lt;p&gt;  这是个很恶心的问题 因为boot2docker还是依赖与virtualbox 所以虽然使用命令 &lt;code&gt;docker run -dp 8080:8080 php&lt;/code&gt;进行转发 但是还需要修改虚拟机的端口转发才可以 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令解析:&lt;br&gt;  docker -d 后台执行 -p 转发端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;img src=&quot;/image/16-4/2.png&quot; alt=&quot;虚拟机转发端口&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="http://elickzhao.github.io/tags/docker/"/>
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>解决ln -s 软链接产生Too many levels of symbolic links错误</title>
    <link href="http://elickzhao.github.io/2016/04/%E8%A7%A3%E5%86%B3ln%20-s%20%E8%BD%AF%E9%93%BE%E6%8E%A5%E4%BA%A7%E7%94%9FToo%20many%20levels%20of%20symbolic%20links%E9%94%99%E8%AF%AF/"/>
    <id>http://elickzhao.github.io/2016/04/解决ln -s 软链接产生Too many levels of symbolic links错误/</id>
    <published>2016-04-18T02:50:14.000Z</published>
    <updated>2016-04-19T07:35:48.463Z</updated>
    
    <content type="html">&lt;p&gt;今天生成软连接发生这个报错,查了一下,原来是因为使用了相对路径,改成绝对路径就没有问题了&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ln&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; /cygdrive/f/Vagrant /home/elick/vagrant&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令解析:&lt;br&gt;ln -s 源目录 目标目录&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天生成软连接发生这个报错,查了一下,原来是因为使用了相对路径,改成绝对路径就没有问题了&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>在VirtualBox和Vagrant中安装Docker</title>
    <link href="http://elickzhao.github.io/2016/04/%E5%9C%A8VirtualBox%E5%92%8CVagrant%E4%B8%AD%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://elickzhao.github.io/2016/04/在VirtualBox和Vagrant中安装Docker/</id>
    <published>2016-04-13T16:18:48.000Z</published>
    <updated>2016-04-20T10:26:36.296Z</updated>
    
    <content type="html">&lt;h1 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jdon.com/artichect/docker-install.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在VirtualBox和Vagrant中安装Docker&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/V36R3y&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OSX下使用vagrant和docker管理创建虚拟环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://rmingwang.com/vagrant-commands-and-config.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant简介和安装配置&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ninghao.net/blog/1566&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Vagrant 搭建本地开发环境的教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.oschina.net/translate/unsuck-your-vagrant-developing-in-one-vm-with-vagrant-and-docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Vagrant 和 Docker 在一个 VM 中进行开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cloud.51cto.com/art/201503/470256_all.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1+1&amp;gt;2:用Docker和Vagrant构建简洁高效开发环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_72ef7bea0102vucz.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant运行Docker的几种方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/ac1985482/p/4029315.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vagrant在windows下的使用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.blogjava.net/yongboy/archive/2013/08/26/403325.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;服务器操作系统CoreOS初体验&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://betacz.com/series/%E5%BD%93%E6%B5%81%E6%B5%AA%E8%80%85%28Vagrant%29%E9%81%87%E8%A7%81%E7%A0%81%E5%A4%B4%E5%B7%A5%E4%BA%BA%28Docker%29/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;‘当流浪者(Vagrant)遇见码头工人(Docker)’系列&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;自我理解&quot;&gt;&lt;a href=&quot;#自我理解&quot; class=&quot;headerlink&quot; title=&quot;自我理解&quot;&gt;&lt;/a&gt;自我理解&lt;/h1&gt;&lt;p&gt;用boot2docker启动docker 容器一直会卡在 &lt;code&gt;default: Syncing folders to the host VM...&lt;/code&gt; 看了下&lt;a href=&quot;https://www.vagrantup.com/docs/docker/basics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Synced folder note: Vagrant will attempt to use the “best” synced folder implementation it can. For boot2docker, this is often rsync. In this case, make sure you have rsync installed on your host machine. Vagrant will give you a human-friendly error message if it is not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;这尿性是要安装一个rsync的同步软件 这鸟东西安装起来蛮麻烦的 而且基本用不到 所以不装了  毕竟就算是生产环境肯定用不到这个 linux版本 所以开发的时候还得装别的版本 以达到和生产环境同步 所以算了&lt;br&gt;直接搞个 CoreOS 这个试试吧 这个挺新的比较有趣&lt;/del&gt;&lt;br&gt;最后还是测试了rsync这个软件,因为使用CoreOS加载docker镜像 也会出现卡在同步文件夹那 所以看来问题不在boot2docker &lt;/p&gt;
&lt;h1 id=&quot;得到升华&quot;&gt;&lt;a href=&quot;#得到升华&quot; class=&quot;headerlink&quot; title=&quot;得到升华&quot;&gt;&lt;/a&gt;得到升华&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;我找到个方法 可以解决这个问题 但是并不是十全十美的方法&lt;/strong&gt;&lt;br&gt;就是屏蔽同步文件夹&lt;br&gt;&lt;figure class=&quot;highlight vb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Vagrant.configure(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |config|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  config.vm.synced_folder &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;meta&quot;&gt;#这一句就是&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  config.vm.provider &lt;span class=&quot;string&quot;&gt;&quot;docker&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |d|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d.image = &lt;span class=&quot;string&quot;&gt;&quot;tknerr/baseimage-ubuntu:14.04&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d.has_ssh = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#这句是新加的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#d.vagrant_machine = &quot;dockerhost&quot; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;meta&quot;&gt;#d.vagrant_vagrantfile = &quot;../coreos/Vagrantfile&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#config.vm.box = &quot;coreos-stable&quot; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  config.vm.provision &lt;span class=&quot;string&quot;&gt;&quot;shell&quot;&lt;/span&gt;, inline: &lt;span class=&quot;string&quot;&gt;&quot;echo &#39;hello docker!&#39;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;惊喜发现&quot;&gt;&lt;a href=&quot;#惊喜发现&quot; class=&quot;headerlink&quot; title=&quot;惊喜发现&quot;&gt;&lt;/a&gt;惊喜发现&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这个简直太省地方了:&lt;/strong&gt; 利用boot2docker 加载 tknerr/baseimage-ubuntu:14.04 这个基础镜像 最后生成的虚拟机才有400M coreOS是900M多  而Homestead 已经是2.67G了&lt;br&gt;&lt;img src=&quot;/image/16-4/1.png&quot; alt=&quot;hello&quot;&gt;&lt;/p&gt;
&lt;p&gt;而且使用的box也非常省 boot2docker只有20M而已&lt;/p&gt;
&lt;h2 id=&quot;目录说明&quot;&gt;&lt;a href=&quot;#目录说明&quot; class=&quot;headerlink&quot; title=&quot;目录说明&quot;&gt;&lt;/a&gt;目录说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;C:\Users\elick.vagrant.d&lt;/strong&gt; 这是vagrant的根目录 最主要有两个目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boxes&lt;br&gt; 这个是存放box的目录,所有你下载的各种box都在这里 &lt;/li&gt;
&lt;li&gt;data&lt;br&gt; 这个是存放host的一些信息的地方&lt;ul&gt;
&lt;li&gt;docker-host&lt;br&gt;  这个就是用docker,而没有加载box的时候 自动下载的boot2docker&lt;/li&gt;
&lt;li&gt;machine-index&lt;br&gt;  存着建立多少个host和host状态的信息 就是那个index 如果在virtualbox删除了host 这里还显示可以在这里手动删了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;C:\Users\elick\VirtualBox VMs&lt;/strong&gt; 就是virtualbox存放虚拟机的位置&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jdon.com/artichect/docker-install.html&quot;&gt;在VirtualBox和Vagrant中安装Docker&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/V36R3y&quot;&gt;OSX下使用vagrant和docker管理创建虚拟环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://rmingwang.com/vagrant-commands-and-config.html&quot;&gt;Vagrant简介和安装配置&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ninghao.net/blog/1566&quot;&gt;使用 Vagrant 搭建本地开发环境的教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.oschina.net/translate/unsuck-your-vagrant-developing-in-one-vm-with-vagrant-and-docker&quot;&gt;使用 Vagrant 和 Docker 在一个 VM 中进行开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cloud.51cto.com/art/201503/470256_all.htm&quot;&gt;1+1&amp;gt;2:用Docker和Vagrant构建简洁高效开发环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_72ef7bea0102vucz.html&quot;&gt;Vagrant运行Docker的几种方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/ac1985482/p/4029315.html&quot;&gt;vagrant在windows下的使用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.blogjava.net/yongboy/archive/2013/08/26/403325.html&quot;&gt;服务器操作系统CoreOS初体验&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://betacz.com/series/%E5%BD%93%E6%B5%81%E6%B5%AA%E8%80%85%28Vagrant%29%E9%81%87%E8%A7%81%E7%A0%81%E5%A4%B4%E5%B7%A5%E4%BA%BA%28Docker%29/&quot;&gt;‘当流浪者(Vagrant)遇见码头工人(Docker)’系列&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="服务器端" scheme="http://elickzhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="服务器相关技术" scheme="http://elickzhao.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
      <category term="linux" scheme="http://elickzhao.github.io/tags/linux/"/>
    
      <category term="vagrant" scheme="http://elickzhao.github.io/tags/vagrant/"/>
    
  </entry>
  
</feed>
